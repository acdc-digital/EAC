"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_lib_twitter-tools_fileNamer_ts";
exports.ids = ["_ssr_lib_twitter-tools_fileNamer_ts"];
exports.modules = {

/***/ "(ssr)/./lib/twitter-tools/fileNamer.ts":
/*!****************************************!*\
  !*** ./lib/twitter-tools/fileNamer.ts ***!
  \****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TwitterFileNamer: () => (/* binding */ TwitterFileNamer),\n/* harmony export */   fileNamer: () => (/* binding */ fileNamer)\n/* harmony export */ });\n// Twitter File Naming System\n// Generates unique, descriptive filenames based on content and prevents duplicates\nclass TwitterFileNamer {\n    constructor(){\n        this.usedNames = new Set();\n    }\n    static getInstance() {\n        if (!TwitterFileNamer.instance) {\n            TwitterFileNamer.instance = new TwitterFileNamer();\n        }\n        return TwitterFileNamer.instance;\n    }\n    generateFileName(options) {\n        const { content, topic, style, maxWords = 3 } = options;\n        // Primary strategy: Extract meaningful words from content\n        let baseFileName = this.extractMeaningfulWords(content, maxWords);\n        // Secondary strategy: Use topic if content extraction fails\n        if (!baseFileName && topic && topic !== 'general') {\n            baseFileName = this.topicToFileName(topic, style);\n        }\n        // Fallback strategy: Time-based naming\n        if (!baseFileName) {\n            baseFileName = this.generateTimestampName();\n        }\n        // Ensure uniqueness\n        const uniqueName = this.ensureUniqueness(baseFileName);\n        // Track used name\n        this.usedNames.add(uniqueName);\n        return {\n            name: uniqueName,\n            isUnique: uniqueName === baseFileName,\n            originalAttempt: baseFileName\n        };\n    }\n    extractMeaningfulWords(content, maxWords) {\n        // Clean the content\n        const cleaned = content.toLowerCase().replace(/[^\\w\\s]/g, ' ') // Remove special characters except emojis\n        .replace(/https?:\\/\\/[^\\s]+/g, '') // Remove URLs\n        .replace(/#\\w+/g, '') // Remove hashtags\n        .replace(/\\s+/g, ' ') // Normalize whitespace\n        .trim();\n        // Define stop words to filter out\n        const stopWords = new Set([\n            'the',\n            'and',\n            'for',\n            'with',\n            'that',\n            'this',\n            'are',\n            'you',\n            'your',\n            'can',\n            'will',\n            'our',\n            'today',\n            'what',\n            'how',\n            'when',\n            'where',\n            'why',\n            'isnt',\n            'about',\n            'there',\n            'much',\n            'explore',\n            'every',\n            'topic',\n            'has',\n            'fascinating',\n            'depths',\n            'waiting',\n            'discovered',\n            'aspect',\n            'interests',\n            'most',\n            'discovery',\n            'learning',\n            'theres',\n            'so'\n        ]);\n        // Extract meaningful words\n        const words = cleaned.split(' ').filter((word)=>word.length > 2 && !stopWords.has(word) && !word.match(/^\\d+$/) // No pure numbers\n        ).slice(0, maxWords);\n        if (words.length === 0) return '';\n        // Create filename\n        const fileName = words.join('-') + '-post';\n        return fileName;\n    }\n    topicToFileName(topic, style) {\n        const topicMap = {\n            japan: [\n                'japan',\n                'japanese',\n                'tokyo',\n                'kyoto',\n                'nippon'\n            ],\n            technology: [\n                'tech',\n                'coding',\n                'innovation',\n                'digital',\n                'software'\n            ],\n            business: [\n                'business',\n                'strategy',\n                'growth',\n                'success',\n                'venture'\n            ],\n            health: [\n                'health',\n                'fitness',\n                'wellness',\n                'strong',\n                'vitality'\n            ],\n            motivation: [\n                'motivation',\n                'inspiration',\n                'goals',\n                'success',\n                'mindset'\n            ],\n            travel: [\n                'travel',\n                'journey',\n                'adventure',\n                'explore',\n                'wanderlust'\n            ],\n            food: [\n                'food',\n                'cuisine',\n                'flavor',\n                'taste',\n                'culinary'\n            ],\n            education: [\n                'learning',\n                'knowledge',\n                'education',\n                'wisdom',\n                'study'\n            ],\n            productivity: [\n                'productivity',\n                'efficiency',\n                'focus',\n                'workflow',\n                'optimal'\n            ],\n            creativity: [\n                'creativity',\n                'artistic',\n                'imagination',\n                'design',\n                'innovative'\n            ]\n        };\n        const variations = topicMap[topic] || [\n            topic\n        ];\n        const selectedWord = variations[Math.floor(Math.random() * variations.length)];\n        const stylePrefix = style && style !== 'general' ? `${style}-` : '';\n        return `${stylePrefix}${selectedWord}-post`;\n    }\n    generateTimestampName() {\n        const now = new Date();\n        const timeStr = now.toISOString().slice(0, 16).replace(/[:-]/g, '').replace('T', '-');\n        return `twitter-post-${timeStr}`;\n    }\n    ensureUniqueness(baseName) {\n        if (!this.usedNames.has(baseName)) {\n            return baseName;\n        }\n        // Try numbered variations\n        for(let i = 2; i <= 10; i++){\n            const variant = `${baseName}-${i}`;\n            if (!this.usedNames.has(variant)) {\n                return variant;\n            }\n        }\n        // Final fallback with timestamp\n        const timestamp = Date.now().toString().slice(-6);\n        return `${baseName}-${timestamp}`;\n    }\n    // Method to clear used names (useful for testing or reset)\n    clearUsedNames() {\n        this.usedNames.clear();\n    }\n    // Method to check if a name has been used\n    isNameUsed(name) {\n        return this.usedNames.has(name);\n    }\n    // Get all used names (for debugging)\n    getUsedNames() {\n        return Array.from(this.usedNames);\n    }\n}\n// Export singleton instance\nconst fileNamer = TwitterFileNamer.getInstance();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./lib/twitter-tools/fileNamer.ts\n");

/***/ })

};
;