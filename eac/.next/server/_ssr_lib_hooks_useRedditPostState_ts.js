"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_lib_hooks_useRedditPostState_ts";
exports.ids = ["_ssr_lib_hooks_useRedditPostState_ts"];
exports.modules = {

/***/ "(ssr)/./lib/hooks/useRedditPostState.ts":
/*!*****************************************!*\
  !*** ./lib/hooks/useRedditPostState.ts ***!
  \*****************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   clearRedditPostState: () => (/* binding */ clearRedditPostState),\n/* harmony export */   hasRedditPostState: () => (/* binding */ hasRedditPostState),\n/* harmony export */   useRedditPostState: () => (/* binding */ useRedditPostState)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/../node_modules/.pnpm/next@15.3.5_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/server/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\n// File-specific Reddit Post State Management\n// /Users/matthewsimon/Projects/eac/eac/lib/hooks/useRedditPostState.ts\n\nconst defaultState = {\n    postTitle: '',\n    postContent: '',\n    postType: 'self',\n    subreddit: '',\n    flair: '',\n    linkUrl: '',\n    isNsfw: false,\n    isSpoiler: false,\n    sendReplies: true,\n    scheduledDate: '',\n    scheduledTime: '',\n    mediaFiles: []\n};\n// Global file state map to persist state across component unmounts\nconst fileStateMap = new Map();\n// Utility function to clear state for a specific file (useful when creating new files)\nfunction clearRedditPostState(fileName) {\n    console.log(`ðŸ§¹ Clearing Reddit state for file: ${fileName}`);\n    fileStateMap.delete(fileName);\n    // Force a re-render by dispatching a custom event that components can listen to\n    if (false) {}\n}\n// Utility function to check if a file has existing state\nfunction hasRedditPostState(fileName) {\n    return fileStateMap.has(fileName);\n}\nfunction useRedditPostState(fileName) {\n    // Initialize state from file map or default - always check for existing state first\n    const [state, setState] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)({\n        \"useRedditPostState.useState\": ()=>{\n            const existingState = fileStateMap.get(fileName);\n            if (existingState) {\n                return existingState;\n            }\n            // Return a completely fresh copy of default state for new files\n            return {\n                ...defaultState\n            };\n        }\n    }[\"useRedditPostState.useState\"]);\n    // Track the current fileName to detect changes\n    const [currentFileName, setCurrentFileName] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(fileName);\n    // When fileName changes (switching files), update state accordingly\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useRedditPostState.useEffect\": ()=>{\n            if (currentFileName !== fileName) {\n                const existingState = fileStateMap.get(fileName);\n                if (existingState) {\n                    // Load existing file state\n                    setState(existingState);\n                } else {\n                    // New file - start completely blank and ensure it's not in the map\n                    fileStateMap.delete(fileName); // Ensure clean slate\n                    setState({\n                        ...defaultState\n                    });\n                }\n                setCurrentFileName(fileName);\n            }\n        }\n    }[\"useRedditPostState.useEffect\"], [\n        fileName,\n        currentFileName\n    ]);\n    // Keep file state map updated whenever state changes\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useRedditPostState.useEffect\": ()=>{\n            fileStateMap.set(fileName, state);\n        }\n    }[\"useRedditPostState.useEffect\"], [\n        fileName,\n        state\n    ]);\n    // Listen for external state clearing events\n    (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)({\n        \"useRedditPostState.useEffect\": ()=>{\n            const handleStateCleared = {\n                \"useRedditPostState.useEffect.handleStateCleared\": (event)=>{\n                    if (event.detail.fileName === fileName) {\n                        setState({\n                            ...defaultState\n                        });\n                    }\n                }\n            }[\"useRedditPostState.useEffect.handleStateCleared\"];\n            if (false) {}\n        }\n    }[\"useRedditPostState.useEffect\"], [\n        fileName\n    ]);\n    // Individual setters that maintain file-specific state\n    const setPostTitle = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useRedditPostState.useCallback[setPostTitle]\": (value)=>{\n            setState({\n                \"useRedditPostState.useCallback[setPostTitle]\": (prev)=>({\n                        ...prev,\n                        postTitle: value\n                    })\n            }[\"useRedditPostState.useCallback[setPostTitle]\"]);\n        }\n    }[\"useRedditPostState.useCallback[setPostTitle]\"], []);\n    const setPostContent = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useRedditPostState.useCallback[setPostContent]\": (value)=>{\n            setState({\n                \"useRedditPostState.useCallback[setPostContent]\": (prev)=>({\n                        ...prev,\n                        postContent: value\n                    })\n            }[\"useRedditPostState.useCallback[setPostContent]\"]);\n        }\n    }[\"useRedditPostState.useCallback[setPostContent]\"], []);\n    const setPostType = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useRedditPostState.useCallback[setPostType]\": (value)=>{\n            setState({\n                \"useRedditPostState.useCallback[setPostType]\": (prev)=>({\n                        ...prev,\n                        postType: value\n                    })\n            }[\"useRedditPostState.useCallback[setPostType]\"]);\n        }\n    }[\"useRedditPostState.useCallback[setPostType]\"], []);\n    const setSubreddit = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useRedditPostState.useCallback[setSubreddit]\": (value)=>{\n            setState({\n                \"useRedditPostState.useCallback[setSubreddit]\": (prev)=>({\n                        ...prev,\n                        subreddit: value\n                    })\n            }[\"useRedditPostState.useCallback[setSubreddit]\"]);\n        }\n    }[\"useRedditPostState.useCallback[setSubreddit]\"], []);\n    const setFlair = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useRedditPostState.useCallback[setFlair]\": (value)=>{\n            setState({\n                \"useRedditPostState.useCallback[setFlair]\": (prev)=>({\n                        ...prev,\n                        flair: value\n                    })\n            }[\"useRedditPostState.useCallback[setFlair]\"]);\n        }\n    }[\"useRedditPostState.useCallback[setFlair]\"], []);\n    const setLinkUrl = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useRedditPostState.useCallback[setLinkUrl]\": (value)=>{\n            setState({\n                \"useRedditPostState.useCallback[setLinkUrl]\": (prev)=>({\n                        ...prev,\n                        linkUrl: value\n                    })\n            }[\"useRedditPostState.useCallback[setLinkUrl]\"]);\n        }\n    }[\"useRedditPostState.useCallback[setLinkUrl]\"], []);\n    const setIsNsfw = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useRedditPostState.useCallback[setIsNsfw]\": (value)=>{\n            setState({\n                \"useRedditPostState.useCallback[setIsNsfw]\": (prev)=>({\n                        ...prev,\n                        isNsfw: value\n                    })\n            }[\"useRedditPostState.useCallback[setIsNsfw]\"]);\n        }\n    }[\"useRedditPostState.useCallback[setIsNsfw]\"], []);\n    const setIsSpoiler = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useRedditPostState.useCallback[setIsSpoiler]\": (value)=>{\n            setState({\n                \"useRedditPostState.useCallback[setIsSpoiler]\": (prev)=>({\n                        ...prev,\n                        isSpoiler: value\n                    })\n            }[\"useRedditPostState.useCallback[setIsSpoiler]\"]);\n        }\n    }[\"useRedditPostState.useCallback[setIsSpoiler]\"], []);\n    const setSendReplies = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useRedditPostState.useCallback[setSendReplies]\": (value)=>{\n            setState({\n                \"useRedditPostState.useCallback[setSendReplies]\": (prev)=>({\n                        ...prev,\n                        sendReplies: value\n                    })\n            }[\"useRedditPostState.useCallback[setSendReplies]\"]);\n        }\n    }[\"useRedditPostState.useCallback[setSendReplies]\"], []);\n    const setScheduledDate = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useRedditPostState.useCallback[setScheduledDate]\": (value)=>{\n            setState({\n                \"useRedditPostState.useCallback[setScheduledDate]\": (prev)=>({\n                        ...prev,\n                        scheduledDate: value\n                    })\n            }[\"useRedditPostState.useCallback[setScheduledDate]\"]);\n        }\n    }[\"useRedditPostState.useCallback[setScheduledDate]\"], []);\n    const setScheduledTime = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useRedditPostState.useCallback[setScheduledTime]\": (value)=>{\n            setState({\n                \"useRedditPostState.useCallback[setScheduledTime]\": (prev)=>({\n                        ...prev,\n                        scheduledTime: value\n                    })\n            }[\"useRedditPostState.useCallback[setScheduledTime]\"]);\n        }\n    }[\"useRedditPostState.useCallback[setScheduledTime]\"], []);\n    const setMediaFiles = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useRedditPostState.useCallback[setMediaFiles]\": (value)=>{\n            setState({\n                \"useRedditPostState.useCallback[setMediaFiles]\": (prev)=>({\n                        ...prev,\n                        mediaFiles: value\n                    })\n            }[\"useRedditPostState.useCallback[setMediaFiles]\"]);\n        }\n    }[\"useRedditPostState.useCallback[setMediaFiles]\"], []);\n    // Bulk update function for loading from database\n    const loadFromExistingPost = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useRedditPostState.useCallback[loadFromExistingPost]\": (postData)=>{\n            setState({\n                \"useRedditPostState.useCallback[loadFromExistingPost]\": (prev)=>({\n                        ...prev,\n                        ...postData\n                    })\n            }[\"useRedditPostState.useCallback[loadFromExistingPost]\"]);\n        }\n    }[\"useRedditPostState.useCallback[loadFromExistingPost]\"], []);\n    // Function to explicitly reset state to defaults (useful for new files)\n    const resetToDefaults = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useRedditPostState.useCallback[resetToDefaults]\": ()=>{\n            setState({\n                ...defaultState\n            });\n            fileStateMap.delete(fileName); // Remove from map so it starts fresh\n        }\n    }[\"useRedditPostState.useCallback[resetToDefaults]\"], [\n        fileName\n    ]);\n    // Function to get current state as plain object (for API calls)\n    const getFormData = (0,react__WEBPACK_IMPORTED_MODULE_0__.useCallback)({\n        \"useRedditPostState.useCallback[getFormData]\": ()=>{\n            return {\n                title: state.postTitle,\n                text: state.postContent,\n                kind: state.postType,\n                subreddit: state.subreddit,\n                flairText: state.flair,\n                url: state.linkUrl,\n                nsfw: state.isNsfw,\n                spoiler: state.isSpoiler,\n                sendReplies: state.sendReplies,\n                // Convert scheduled date/time to publishAt timestamp\n                publishAt: state.scheduledDate && state.scheduledTime ? new Date(`${state.scheduledDate}T${state.scheduledTime}`).getTime() : undefined\n            };\n        }\n    }[\"useRedditPostState.useCallback[getFormData]\"], [\n        state\n    ]);\n    return {\n        // State values\n        ...state,\n        // Setters\n        setPostTitle,\n        setPostContent,\n        setPostType,\n        setSubreddit,\n        setFlair,\n        setLinkUrl,\n        setIsNsfw,\n        setIsSpoiler,\n        setSendReplies,\n        setScheduledDate,\n        setScheduledTime,\n        setMediaFiles,\n        // Utility functions\n        loadFromExistingPost,\n        resetToDefaults,\n        getFormData\n    };\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./lib/hooks/useRedditPostState.ts\n");

/***/ })

};
;