"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_claude_tools_twitter_index_ts";
exports.ids = ["_ssr_claude_tools_twitter_index_ts"];
exports.modules = {

/***/ "(ssr)/../.claude/.tools/twitter/contentGenerator.ts":
/*!*****************************************************!*\
  !*** ../.claude/.tools/twitter/contentGenerator.ts ***!
  \*****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TwitterContentGenerator: () => (/* binding */ TwitterContentGenerator),\n/* harmony export */   contentGenerator: () => (/* binding */ contentGenerator)\n/* harmony export */ });\n// Twitter Content Generator\n// Handles AI-powered content generation with improved templates and variety\n// Content Generation Interface\nclass TwitterContentGenerator {\n    constructor(){}\n    static getInstance() {\n        if (!TwitterContentGenerator.instance) {\n            TwitterContentGenerator.instance = new TwitterContentGenerator();\n        }\n        return TwitterContentGenerator.instance;\n    }\n    async generateContent(request) {\n        const { userInput } = request;\n        // Detect if user wants content generation or is providing literal content\n        const isGenerationRequest = this.detectGenerationRequest(userInput);\n        if (!isGenerationRequest) {\n            return {\n                content: userInput,\n                detectedTopic: 'user-provided',\n                style: 'custom',\n                confidence: 1.0\n            };\n        }\n        // Extract topic and style from user input\n        const detectedTopic = this.extractTopic(userInput);\n        const detectedStyle = this.extractStyle(userInput);\n        // Generate content based on topic and style\n        const content = this.generateTopicContent(detectedTopic, detectedStyle, userInput);\n        return {\n            content,\n            detectedTopic,\n            style: detectedStyle,\n            confidence: 0.85\n        };\n    }\n    detectGenerationRequest(input) {\n        const generationKeywords = [\n            'create',\n            'generate',\n            'write',\n            'make',\n            'post about',\n            'tweet about',\n            'share about',\n            'motivational',\n            'inspirational',\n            'funny',\n            'educational',\n            'professional',\n            'announcement',\n            'tip',\n            'advice',\n            'quote'\n        ];\n        return generationKeywords.some((keyword)=>input.toLowerCase().includes(keyword.toLowerCase()));\n    }\n    extractTopic(input) {\n        const inputLower = input.toLowerCase();\n        // Direct topic extraction patterns\n        const aboutMatch = input.match(/(?:about|on)\\s+([^,\\.!?]+)/i);\n        if (aboutMatch) {\n            return aboutMatch[1].trim();\n        }\n        // Predefined topic detection\n        const topicMap = {\n            'japan': [\n                'japan',\n                'japanese',\n                'tokyo',\n                'kyoto'\n            ],\n            'technology': [\n                'tech',\n                'technology',\n                'ai',\n                'software',\n                'coding'\n            ],\n            'business': [\n                'business',\n                'startup',\n                'entrepreneur',\n                'finance'\n            ],\n            'health': [\n                'health',\n                'fitness',\n                'wellness',\n                'workout'\n            ],\n            'motivation': [\n                'motivation',\n                'inspiration',\n                'success',\n                'goals'\n            ],\n            'travel': [\n                'travel',\n                'trip',\n                'vacation',\n                'tourism'\n            ],\n            'food': [\n                'food',\n                'cooking',\n                'recipe',\n                'cuisine'\n            ],\n            'education': [\n                'education',\n                'learning',\n                'study',\n                'knowledge'\n            ],\n            'productivity': [\n                'productivity',\n                'work',\n                'efficiency',\n                'time'\n            ],\n            'creativity': [\n                'creativity',\n                'art',\n                'design',\n                'creative'\n            ],\n            'music': [\n                'music',\n                'song',\n                'artist',\n                'singer',\n                'album',\n                'concert',\n                'mariah carey',\n                'taylor swift',\n                'beyonce',\n                'drake',\n                'spotify',\n                'playlist'\n            ]\n        };\n        for (const [topic, keywords] of Object.entries(topicMap)){\n            if (keywords.some((keyword)=>inputLower.includes(keyword))) {\n                return topic;\n            }\n        }\n        return 'general';\n    }\n    extractStyle(input) {\n        const inputLower = input.toLowerCase();\n        if (inputLower.includes('motivat') || inputLower.includes('inspir')) return 'motivational';\n        if (inputLower.includes('professional') || inputLower.includes('business')) return 'professional';\n        if (inputLower.includes('educational') || inputLower.includes('tip')) return 'educational';\n        if (inputLower.includes('announcement') || inputLower.includes('news')) return 'announcement';\n        if (inputLower.includes('funny') || inputLower.includes('casual')) return 'casual';\n        return 'general';\n    }\n    generateTopicContent(topic, style, originalInput) {\n        const templates = this.getTemplatesForTopic(topic, style);\n        if (templates.length === 0) {\n            return this.generateFallbackContent(topic, originalInput);\n        }\n        // Select random template for variety\n        const template = templates[Math.floor(Math.random() * templates.length)];\n        return template;\n    }\n    getTemplatesForTopic(topic, style) {\n        const templateMap = {\n            japan: {\n                motivational: [\n                    \"🗾 Japan teaches us that strength comes from adapting to change, just like cherry blossoms bloom and fall. What lesson from nature inspires you today? #JapanWisdom #Resilience #Growth\",\n                    \"🌸 In Japan, they say 'Nana korobi ya oki' - fall seven times, rise eight. What challenge are you ready to rise from today? #JapanMotivation #Perseverance #Success\"\n                ],\n                educational: [\n                    \"🗾 Did you know Japan has over 6,800 islands? From ancient temples to bullet trains, every corner tells a story of innovation meeting tradition. #JapanFacts #Culture #Learning\",\n                    \"🍜 Japanese cuisine goes beyond sushi! Ramen has over 100 varieties, each region crafting unique flavors. What's your favorite Japanese dish? #JapaneseCuisine #Food #Culture\"\n                ],\n                general: [\n                    \"🗾 Japan's breathtaking landscapes blend ancient traditions with modern marvels. From cherry blossoms in Kyoto to neon lights in Tokyo—every moment is magic! #JapanTravel #Tourism #Culture\"\n                ]\n            },\n            technology: {\n                motivational: [\n                    \"💻 Technology isn't just about code—it's about creating solutions that change lives. What problem are you solving today? #TechMotivation #Innovation #Impact\",\n                    \"🚀 Every app started as an idea. Every platform began with a single line of code. Your next breakthrough is just one commit away! #TechSuccess #Coding #Dreams\"\n                ],\n                educational: [\n                    \"🔧 AI isn't replacing developers—it's amplifying our capabilities. Learn to work WITH AI, not against it. The future belongs to human-AI collaboration! #AI #Development #Future\",\n                    \"💡 Did you know? The first computer bug was literally a bug—a moth found in a Harvard computer in 1947! Grace Hopper coined the term. #TechHistory #Programming #Fun\"\n                ],\n                professional: [\n                    \"⚡ The tech industry moves fast, but fundamentals remain constant: clean code, user focus, and continuous learning. What fundamental are you strengthening today? #TechCareer #Programming #Growth\"\n                ]\n            },\n            motivation: {\n                motivational: [\n                    \"🌟 Every expert was once a beginner. Every pro was once an amateur. The only difference? They never gave up. What are you not giving up on today? #Motivation #Growth #Success\",\n                    \"💪 Your future self is counting on the decisions you make today. Make choices that your future self will thank you for! #FutureYou #Goals #Success\",\n                    \"🎯 Progress isn't always visible, but it's always happening. Trust the process, embrace the journey, celebrate small wins! #Progress #Mindset #Growth\"\n                ]\n            },\n            business: {\n                professional: [\n                    \"📊 Great businesses solve real problems for real people. Before building features, build understanding. What problem are you solving today? #Business #Strategy #CustomerFirst\",\n                    \"💼 Revenue is vanity, profit is sanity, but cash flow is reality. Focus on the metrics that actually matter for sustainability. #BusinessTips #Finance #Strategy\"\n                ],\n                motivational: [\n                    \"🚀 Every successful business started with someone believing in an impossible idea. What impossible idea are you working on? #Entrepreneurship #Innovation #Dreams\"\n                ]\n            },\n            health: {\n                motivational: [\n                    \"💪 Your body can do it. It's your mind you need to convince. What mental barrier are you breaking through today? #FitnessMotivation #Health #Mindset\",\n                    \"🌱 Health isn't a destination—it's a daily practice. Small choices compound into life-changing results. What healthy choice are you making today? #Health #Wellness #Habits\"\n                ],\n                educational: [\n                    \"🧠 Did you know? Exercise literally grows new brain cells! Physical activity increases BDNF, which helps create new neural connections. Move your body, grow your mind! #Health #Science #Brain\"\n                ]\n            },\n            music: {\n                motivational: [\n                    \"🎵 Music has the power to heal, inspire, and unite us across all boundaries. What song lifts your spirits when you need it most? #Music #Inspiration #Healing\",\n                    \"🎤 Every artist's journey starts with a single note, a single word, a single dream. Your voice matters—let it be heard! #Music #Dreams #ArtistLife\"\n                ],\n                general: [\n                    \"🎶 Great music transcends time and touches souls. From classic ballads to modern beats, every genre tells a story. What's your soundtrack today? #Music #Life #Soundtrack\",\n                    \"🎵 The beauty of music lies in its ability to express what words cannot. Which artist's voice speaks to your heart? #Music #Emotion #Connection\",\n                    \"🎤 Music is the universal language that connects us all. One song can change a mood, a day, or even a life. What's your go-to anthem? #Music #Universal #Power\"\n                ],\n                professional: [\n                    \"🎼 The music industry continues to evolve with streaming, AI, and new platforms changing how we discover and consume music. What trends excite you most? #MusicIndustry #Innovation #Streaming\"\n                ],\n                educational: [\n                    \"🎵 Did you know? Listening to music releases dopamine in the brain—the same chemical associated with eating and falling in love! What music makes you happiest? #Music #Science #Brain\"\n                ]\n            }\n        };\n        const topicTemplates = templateMap[topic];\n        if (!topicTemplates) return [];\n        const styleTemplates = topicTemplates[style] || topicTemplates['general'] || [];\n        return styleTemplates;\n    }\n    generateFallbackContent(topic, originalInput) {\n        // Try to extract the actual subject from the original input\n        const aboutMatch = originalInput.match(/about\\s+([^,\\.!?]+)/i);\n        const subject = aboutMatch ? aboutMatch[1].trim() : topic;\n        const subjectFormatted = subject.charAt(0).toUpperCase() + subject.slice(1);\n        const hashtag = subject.replace(/\\s+/g, '').replace(/[^a-zA-Z0-9]/g, '');\n        const fallbackTemplates = [\n            `✨ ${subjectFormatted} brings so much joy and inspiration! What's your favorite thing about it? #${hashtag} #Love #Passion`,\n            `🌟 There's something special about ${subjectFormatted} that just captures the heart. Share your thoughts! #${hashtag} #Amazing #Thoughts`,\n            `💫 ${subjectFormatted} has this incredible ability to make us feel alive. What draws you to it? #${hashtag} #Inspiration #Life`,\n            `🎉 Celebrating all things ${subjectFormatted}! What makes it meaningful to you? #${hashtag} #Celebration #Meaningful`,\n            `� ${subjectFormatted} never fails to amaze! What's your latest discovery or favorite moment? #${hashtag} #Amazing #Discovery`\n        ];\n        return fallbackTemplates[Math.floor(Math.random() * fallbackTemplates.length)];\n    }\n}\n// Export singleton instance\nconst contentGenerator = TwitterContentGenerator.getInstance();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../.claude/.tools/twitter/contentGenerator.ts\n");

/***/ }),

/***/ "(ssr)/../.claude/.tools/twitter/fileNamer.ts":
/*!**********************************************!*\
  !*** ../.claude/.tools/twitter/fileNamer.ts ***!
  \**********************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TwitterFileNamer: () => (/* binding */ TwitterFileNamer),\n/* harmony export */   fileNamer: () => (/* binding */ fileNamer)\n/* harmony export */ });\n// Twitter File Naming System\n// Generates unique, descriptive filenames based on content and prevents duplicates\nclass TwitterFileNamer {\n    constructor(){\n        this.usedNames = new Set();\n    }\n    static getInstance() {\n        if (!TwitterFileNamer.instance) {\n            TwitterFileNamer.instance = new TwitterFileNamer();\n        }\n        return TwitterFileNamer.instance;\n    }\n    generateFileName(options) {\n        const { content, topic, style, maxWords = 3 } = options;\n        // Primary strategy: Extract meaningful words from content\n        let baseFileName = this.extractMeaningfulWords(content, maxWords);\n        // Secondary strategy: Use topic if content extraction fails\n        if (!baseFileName && topic && topic !== 'general') {\n            baseFileName = this.topicToFileName(topic, style);\n        }\n        // Fallback strategy: Time-based naming\n        if (!baseFileName) {\n            baseFileName = this.generateTimestampName();\n        }\n        // Ensure uniqueness\n        const uniqueName = this.ensureUniqueness(baseFileName);\n        // Track used name\n        this.usedNames.add(uniqueName);\n        return {\n            name: uniqueName,\n            isUnique: uniqueName === baseFileName,\n            originalAttempt: baseFileName\n        };\n    }\n    extractMeaningfulWords(content, maxWords) {\n        // Clean the content\n        const cleaned = content.toLowerCase().replace(/[^\\w\\s]/g, ' ') // Remove special characters except emojis\n        .replace(/https?:\\/\\/[^\\s]+/g, '') // Remove URLs\n        .replace(/#\\w+/g, '') // Remove hashtags\n        .replace(/\\s+/g, ' ') // Normalize whitespace\n        .trim();\n        // Define stop words to filter out\n        const stopWords = new Set([\n            'the',\n            'and',\n            'for',\n            'with',\n            'that',\n            'this',\n            'are',\n            'you',\n            'your',\n            'can',\n            'will',\n            'our',\n            'today',\n            'what',\n            'how',\n            'when',\n            'where',\n            'why',\n            'isnt',\n            'about',\n            'there',\n            'much',\n            'explore',\n            'every',\n            'topic',\n            'has',\n            'fascinating',\n            'depths',\n            'waiting',\n            'discovered',\n            'aspect',\n            'interests',\n            'most',\n            'discovery',\n            'learning',\n            'theres',\n            'so'\n        ]);\n        // Extract meaningful words\n        const words = cleaned.split(' ').filter((word)=>word.length > 2 && !stopWords.has(word) && !word.match(/^\\d+$/) // No pure numbers\n        ).slice(0, maxWords);\n        if (words.length === 0) return '';\n        // Create filename\n        const fileName = words.join('-') + '-post';\n        return fileName;\n    }\n    topicToFileName(topic, style) {\n        const topicMap = {\n            japan: [\n                'japan',\n                'japanese',\n                'tokyo',\n                'kyoto',\n                'nippon'\n            ],\n            technology: [\n                'tech',\n                'coding',\n                'innovation',\n                'digital',\n                'software'\n            ],\n            business: [\n                'business',\n                'strategy',\n                'growth',\n                'success',\n                'venture'\n            ],\n            health: [\n                'health',\n                'fitness',\n                'wellness',\n                'strong',\n                'vitality'\n            ],\n            motivation: [\n                'motivation',\n                'inspiration',\n                'goals',\n                'success',\n                'mindset'\n            ],\n            travel: [\n                'travel',\n                'journey',\n                'adventure',\n                'explore',\n                'wanderlust'\n            ],\n            food: [\n                'food',\n                'cuisine',\n                'flavor',\n                'taste',\n                'culinary'\n            ],\n            education: [\n                'learning',\n                'knowledge',\n                'education',\n                'wisdom',\n                'study'\n            ],\n            productivity: [\n                'productivity',\n                'efficiency',\n                'focus',\n                'workflow',\n                'optimal'\n            ],\n            creativity: [\n                'creativity',\n                'artistic',\n                'imagination',\n                'design',\n                'innovative'\n            ]\n        };\n        const variations = topicMap[topic] || [\n            topic\n        ];\n        const selectedWord = variations[Math.floor(Math.random() * variations.length)];\n        const stylePrefix = style && style !== 'general' ? `${style}-` : '';\n        return `${stylePrefix}${selectedWord}-post`;\n    }\n    generateTimestampName() {\n        const now = new Date();\n        const timeStr = now.toISOString().slice(0, 16).replace(/[:-]/g, '').replace('T', '-');\n        return `twitter-post-${timeStr}`;\n    }\n    ensureUniqueness(baseName) {\n        if (!this.usedNames.has(baseName)) {\n            return baseName;\n        }\n        // Try numbered variations\n        for(let i = 2; i <= 10; i++){\n            const variant = `${baseName}-${i}`;\n            if (!this.usedNames.has(variant)) {\n                return variant;\n            }\n        }\n        // Final fallback with timestamp\n        const timestamp = Date.now().toString().slice(-6);\n        return `${baseName}-${timestamp}`;\n    }\n    // Method to clear used names (useful for testing or reset)\n    clearUsedNames() {\n        this.usedNames.clear();\n    }\n    // Method to check if a name has been used\n    isNameUsed(name) {\n        return this.usedNames.has(name);\n    }\n    // Get all used names (for debugging)\n    getUsedNames() {\n        return Array.from(this.usedNames);\n    }\n}\n// Export singleton instance\nconst fileNamer = TwitterFileNamer.getInstance();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../.claude/.tools/twitter/fileNamer.ts\n");

/***/ }),

/***/ "(ssr)/../.claude/.tools/twitter/index.ts":
/*!******************************************!*\
  !*** ../.claude/.tools/twitter/index.ts ***!
  \******************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TwitterContentGenerator: () => (/* reexport safe */ _contentGenerator__WEBPACK_IMPORTED_MODULE_0__.TwitterContentGenerator),\n/* harmony export */   TwitterFileNamer: () => (/* reexport safe */ _fileNamer__WEBPACK_IMPORTED_MODULE_1__.TwitterFileNamer),\n/* harmony export */   TwitterProjectManager: () => (/* reexport safe */ _projectManager__WEBPACK_IMPORTED_MODULE_2__.TwitterProjectManager),\n/* harmony export */   contentGenerator: () => (/* reexport safe */ _contentGenerator__WEBPACK_IMPORTED_MODULE_0__.contentGenerator),\n/* harmony export */   fileNamer: () => (/* reexport safe */ _fileNamer__WEBPACK_IMPORTED_MODULE_1__.fileNamer),\n/* harmony export */   processTwitterRequest: () => (/* binding */ processTwitterRequest),\n/* harmony export */   projectManager: () => (/* reexport safe */ _projectManager__WEBPACK_IMPORTED_MODULE_2__.projectManager)\n/* harmony export */ });\n/* harmony import */ var _contentGenerator__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./contentGenerator */ \"(ssr)/../.claude/.tools/twitter/contentGenerator.ts\");\n/* harmony import */ var _fileNamer__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./fileNamer */ \"(ssr)/../.claude/.tools/twitter/fileNamer.ts\");\n/* harmony import */ var _projectManager__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./projectManager */ \"(ssr)/../.claude/.tools/twitter/projectManager.ts\");\n// Twitter Agent Tools\n// Main entry point for modular Twitter agent functionality\n\n\n\n\n\n\nasync function processTwitterRequest(request, editorStoreState) {\n    try {\n        // Step 1: Generate content\n        const content = await _contentGenerator__WEBPACK_IMPORTED_MODULE_0__.contentGenerator.generateContent({\n            userInput: request.userInput,\n            includeHashtags: true\n        });\n        // Step 2: Generate filename\n        const fileName = _fileNamer__WEBPACK_IMPORTED_MODULE_1__.fileNamer.generateFileName({\n            content: content.content,\n            topic: content.detectedTopic,\n            style: content.style,\n            maxWords: 3\n        });\n        // Step 3: Select project (without actual store operations)\n        const projectManagerInstance = _projectManager__WEBPACK_IMPORTED_MODULE_2__.projectManager;\n        // Create a read-only store interface\n        const readOnlyStore = {\n            getState: ()=>({\n                    folders: editorStoreState.folders || []\n                })\n        };\n        // Inject the read-only store\n        projectManagerInstance.editorStore = readOnlyStore;\n        const project = await _projectManager__WEBPACK_IMPORTED_MODULE_2__.projectManager.selectProject({\n            suggestedProject: request.suggestedProject,\n            contentTopic: content.detectedTopic,\n            contentStyle: content.style,\n            userPreferences: {\n                autoCreateProjects: true\n            }\n        });\n        return {\n            content,\n            fileName,\n            project,\n            success: true,\n            message: 'Twitter request processed successfully'\n        };\n    } catch (error) {\n        return {\n            content: {\n                content: request.userInput,\n                detectedTopic: 'error',\n                style: 'error',\n                confidence: 0\n            },\n            fileName: {\n                name: 'error-post',\n                isUnique: false,\n                originalAttempt: 'error'\n            },\n            project: {\n                projectName: 'Social Media',\n                isNewProject: false,\n                matchConfidence: 0,\n                reason: 'Error fallback'\n            },\n            success: false,\n            message: `Error processing request: ${error instanceof Error ? error.message : 'Unknown error'}`\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi4vLmNsYXVkZS8udG9vbHMvdHdpdHRlci9pbmRleC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7O0FBQUEsc0JBQXNCO0FBQ3RCLDJEQUEyRDtBQUVMO0FBQ2Q7QUFDVTtBQUU2QjtBQUNyQjtBQUNlO0FBZ0NsRSxlQUFlTSxzQkFDcEJDLE9BQTRCLEVBQzVCQyxnQkFBcUI7SUFFckIsSUFBSTtRQUNGLDJCQUEyQjtRQUMzQixNQUFNQyxVQUFVLE1BQU1ULCtEQUFnQkEsQ0FBQ1UsZUFBZSxDQUFDO1lBQ3JEQyxXQUFXSixRQUFRSSxTQUFTO1lBQzVCQyxpQkFBaUI7UUFDbkI7UUFFQSw0QkFBNEI7UUFDNUIsTUFBTUMsV0FBV1osaURBQVNBLENBQUNhLGdCQUFnQixDQUFDO1lBQzFDTCxTQUFTQSxRQUFRQSxPQUFPO1lBQ3hCTSxPQUFPTixRQUFRTyxhQUFhO1lBQzVCQyxPQUFPUixRQUFRUSxLQUFLO1lBQ3BCQyxVQUFVO1FBQ1o7UUFFQSwyREFBMkQ7UUFDM0QsTUFBTUMseUJBQXlCakIsMkRBQWNBO1FBRTdDLHFDQUFxQztRQUNyQyxNQUFNa0IsZ0JBQWdCO1lBQ3BCQyxVQUFVLElBQU87b0JBQ2ZDLFNBQVNkLGlCQUFpQmMsT0FBTyxJQUFJLEVBQUU7Z0JBQ3pDO1FBQ0Y7UUFFQSw2QkFBNkI7UUFDN0JILHVCQUF1QkksV0FBVyxHQUFHSDtRQUVyQyxNQUFNSSxVQUFVLE1BQU10QiwyREFBY0EsQ0FBQ3VCLGFBQWEsQ0FBQztZQUNqREMsa0JBQWtCbkIsUUFBUW1CLGdCQUFnQjtZQUMxQ0MsY0FBY2xCLFFBQVFPLGFBQWE7WUFDbkNZLGNBQWNuQixRQUFRUSxLQUFLO1lBQzNCWSxpQkFBaUI7Z0JBQ2ZDLG9CQUFvQjtZQUN0QjtRQUNGO1FBRUEsT0FBTztZQUNMckI7WUFDQUk7WUFDQVc7WUFDQU8sU0FBUztZQUNUQyxTQUFTO1FBQ1g7SUFDRixFQUFFLE9BQU9DLE9BQU87UUFDZCxPQUFPO1lBQ0x4QixTQUFTO2dCQUFFQSxTQUFTRixRQUFRSSxTQUFTO2dCQUFFSyxlQUFlO2dCQUFTQyxPQUFPO2dCQUFTaUIsWUFBWTtZQUFFO1lBQzdGckIsVUFBVTtnQkFBRXNCLE1BQU07Z0JBQWNDLFVBQVU7Z0JBQU9DLGlCQUFpQjtZQUFRO1lBQzFFYixTQUFTO2dCQUFFYyxhQUFhO2dCQUFnQkMsY0FBYztnQkFBT0MsaUJBQWlCO2dCQUFHQyxRQUFRO1lBQWlCO1lBQzFHVixTQUFTO1lBQ1RDLFNBQVMsQ0FBQywwQkFBMEIsRUFBRUMsaUJBQWlCUyxRQUFRVCxNQUFNRCxPQUFPLEdBQUcsaUJBQWlCO1FBQ2xHO0lBQ0Y7QUFDRiIsInNvdXJjZXMiOlsiL1VzZXJzL21hdHRoZXdzaW1vbi9Qcm9qZWN0cy9lYWMvLmNsYXVkZS8udG9vbHMvdHdpdHRlci9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUd2l0dGVyIEFnZW50IFRvb2xzXG4vLyBNYWluIGVudHJ5IHBvaW50IGZvciBtb2R1bGFyIFR3aXR0ZXIgYWdlbnQgZnVuY3Rpb25hbGl0eVxuXG5pbXBvcnQgeyBjb250ZW50R2VuZXJhdG9yIH0gZnJvbSAnLi9jb250ZW50R2VuZXJhdG9yJztcbmltcG9ydCB7IGZpbGVOYW1lciB9IGZyb20gJy4vZmlsZU5hbWVyJztcbmltcG9ydCB7IHByb2plY3RNYW5hZ2VyIH0gZnJvbSAnLi9wcm9qZWN0TWFuYWdlcic7XG5cbmV4cG9ydCB7IGNvbnRlbnRHZW5lcmF0b3IsIFR3aXR0ZXJDb250ZW50R2VuZXJhdG9yIH0gZnJvbSAnLi9jb250ZW50R2VuZXJhdG9yJztcbmV4cG9ydCB7IGZpbGVOYW1lciwgVHdpdHRlckZpbGVOYW1lciB9IGZyb20gJy4vZmlsZU5hbWVyJztcbmV4cG9ydCB7IHByb2plY3RNYW5hZ2VyLCBUd2l0dGVyUHJvamVjdE1hbmFnZXIgfSBmcm9tICcuL3Byb2plY3RNYW5hZ2VyJztcblxuZXhwb3J0IHR5cGUge1xuICAgIENvbnRlbnRHZW5lcmF0aW9uUmVxdWVzdCxcbiAgICBHZW5lcmF0ZWRDb250ZW50XG59IGZyb20gJy4vY29udGVudEdlbmVyYXRvcic7XG5cbmV4cG9ydCB0eXBlIHtcbiAgICBGaWxlTmFtaW5nT3B0aW9ucyxcbiAgICBHZW5lcmF0ZWRGaWxlTmFtZVxufSBmcm9tICcuL2ZpbGVOYW1lcic7XG5cbmV4cG9ydCB0eXBlIHtcbiAgICBQcm9qZWN0T3B0aW9ucywgUHJvamVjdFNlbGVjdGlvblxufSBmcm9tICcuL3Byb2plY3RNYW5hZ2VyJztcblxuLy8gQ29tYmluZWQgd29ya2Zsb3cgZnVuY3Rpb25cbmV4cG9ydCBpbnRlcmZhY2UgVHdpdHRlckFnZW50UmVxdWVzdCB7XG4gIHVzZXJJbnB1dDogc3RyaW5nO1xuICBzdWdnZXN0ZWRQcm9qZWN0Pzogc3RyaW5nO1xuICBzY2hlZHVsZT86IHN0cmluZztcbiAgc2V0dGluZ3M/OiBzdHJpbmc7XG59XG5cbmV4cG9ydCBpbnRlcmZhY2UgVHdpdHRlckFnZW50UmVzdWx0IHtcbiAgY29udGVudDogaW1wb3J0KCcuL2NvbnRlbnRHZW5lcmF0b3InKS5HZW5lcmF0ZWRDb250ZW50O1xuICBmaWxlTmFtZTogaW1wb3J0KCcuL2ZpbGVOYW1lcicpLkdlbmVyYXRlZEZpbGVOYW1lO1xuICBwcm9qZWN0OiBpbXBvcnQoJy4vcHJvamVjdE1hbmFnZXInKS5Qcm9qZWN0U2VsZWN0aW9uO1xuICBzdWNjZXNzOiBib29sZWFuO1xuICBtZXNzYWdlOiBzdHJpbmc7XG59XG5cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBwcm9jZXNzVHdpdHRlclJlcXVlc3QoXG4gIHJlcXVlc3Q6IFR3aXR0ZXJBZ2VudFJlcXVlc3QsXG4gIGVkaXRvclN0b3JlU3RhdGU6IGFueVxuKTogUHJvbWlzZTxUd2l0dGVyQWdlbnRSZXN1bHQ+IHtcbiAgdHJ5IHtcbiAgICAvLyBTdGVwIDE6IEdlbmVyYXRlIGNvbnRlbnRcbiAgICBjb25zdCBjb250ZW50ID0gYXdhaXQgY29udGVudEdlbmVyYXRvci5nZW5lcmF0ZUNvbnRlbnQoe1xuICAgICAgdXNlcklucHV0OiByZXF1ZXN0LnVzZXJJbnB1dCxcbiAgICAgIGluY2x1ZGVIYXNodGFnczogdHJ1ZVxuICAgIH0pO1xuXG4gICAgLy8gU3RlcCAyOiBHZW5lcmF0ZSBmaWxlbmFtZVxuICAgIGNvbnN0IGZpbGVOYW1lID0gZmlsZU5hbWVyLmdlbmVyYXRlRmlsZU5hbWUoe1xuICAgICAgY29udGVudDogY29udGVudC5jb250ZW50LFxuICAgICAgdG9waWM6IGNvbnRlbnQuZGV0ZWN0ZWRUb3BpYyxcbiAgICAgIHN0eWxlOiBjb250ZW50LnN0eWxlLFxuICAgICAgbWF4V29yZHM6IDNcbiAgICB9KTtcblxuICAgIC8vIFN0ZXAgMzogU2VsZWN0IHByb2plY3QgKHdpdGhvdXQgYWN0dWFsIHN0b3JlIG9wZXJhdGlvbnMpXG4gICAgY29uc3QgcHJvamVjdE1hbmFnZXJJbnN0YW5jZSA9IHByb2plY3RNYW5hZ2VyIGFzIGFueTtcbiAgICBcbiAgICAvLyBDcmVhdGUgYSByZWFkLW9ubHkgc3RvcmUgaW50ZXJmYWNlXG4gICAgY29uc3QgcmVhZE9ubHlTdG9yZSA9IHtcbiAgICAgIGdldFN0YXRlOiAoKSA9PiAoe1xuICAgICAgICBmb2xkZXJzOiBlZGl0b3JTdG9yZVN0YXRlLmZvbGRlcnMgfHwgW11cbiAgICAgIH0pXG4gICAgfTtcbiAgICBcbiAgICAvLyBJbmplY3QgdGhlIHJlYWQtb25seSBzdG9yZVxuICAgIHByb2plY3RNYW5hZ2VySW5zdGFuY2UuZWRpdG9yU3RvcmUgPSByZWFkT25seVN0b3JlO1xuICAgIFxuICAgIGNvbnN0IHByb2plY3QgPSBhd2FpdCBwcm9qZWN0TWFuYWdlci5zZWxlY3RQcm9qZWN0KHtcbiAgICAgIHN1Z2dlc3RlZFByb2plY3Q6IHJlcXVlc3Quc3VnZ2VzdGVkUHJvamVjdCxcbiAgICAgIGNvbnRlbnRUb3BpYzogY29udGVudC5kZXRlY3RlZFRvcGljLFxuICAgICAgY29udGVudFN0eWxlOiBjb250ZW50LnN0eWxlLFxuICAgICAgdXNlclByZWZlcmVuY2VzOiB7XG4gICAgICAgIGF1dG9DcmVhdGVQcm9qZWN0czogdHJ1ZVxuICAgICAgfVxuICAgIH0pO1xuXG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRlbnQsXG4gICAgICBmaWxlTmFtZSxcbiAgICAgIHByb2plY3QsXG4gICAgICBzdWNjZXNzOiB0cnVlLFxuICAgICAgbWVzc2FnZTogJ1R3aXR0ZXIgcmVxdWVzdCBwcm9jZXNzZWQgc3VjY2Vzc2Z1bGx5J1xuICAgIH07XG4gIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGNvbnRlbnQ6IHsgY29udGVudDogcmVxdWVzdC51c2VySW5wdXQsIGRldGVjdGVkVG9waWM6ICdlcnJvcicsIHN0eWxlOiAnZXJyb3InLCBjb25maWRlbmNlOiAwIH0sXG4gICAgICBmaWxlTmFtZTogeyBuYW1lOiAnZXJyb3ItcG9zdCcsIGlzVW5pcXVlOiBmYWxzZSwgb3JpZ2luYWxBdHRlbXB0OiAnZXJyb3InIH0sXG4gICAgICBwcm9qZWN0OiB7IHByb2plY3ROYW1lOiAnU29jaWFsIE1lZGlhJywgaXNOZXdQcm9qZWN0OiBmYWxzZSwgbWF0Y2hDb25maWRlbmNlOiAwLCByZWFzb246ICdFcnJvciBmYWxsYmFjaycgfSxcbiAgICAgIHN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgbWVzc2FnZTogYEVycm9yIHByb2Nlc3NpbmcgcmVxdWVzdDogJHtlcnJvciBpbnN0YW5jZW9mIEVycm9yID8gZXJyb3IubWVzc2FnZSA6ICdVbmtub3duIGVycm9yJ31gXG4gICAgfTtcbiAgfVxufVxuIl0sIm5hbWVzIjpbImNvbnRlbnRHZW5lcmF0b3IiLCJmaWxlTmFtZXIiLCJwcm9qZWN0TWFuYWdlciIsIlR3aXR0ZXJDb250ZW50R2VuZXJhdG9yIiwiVHdpdHRlckZpbGVOYW1lciIsIlR3aXR0ZXJQcm9qZWN0TWFuYWdlciIsInByb2Nlc3NUd2l0dGVyUmVxdWVzdCIsInJlcXVlc3QiLCJlZGl0b3JTdG9yZVN0YXRlIiwiY29udGVudCIsImdlbmVyYXRlQ29udGVudCIsInVzZXJJbnB1dCIsImluY2x1ZGVIYXNodGFncyIsImZpbGVOYW1lIiwiZ2VuZXJhdGVGaWxlTmFtZSIsInRvcGljIiwiZGV0ZWN0ZWRUb3BpYyIsInN0eWxlIiwibWF4V29yZHMiLCJwcm9qZWN0TWFuYWdlckluc3RhbmNlIiwicmVhZE9ubHlTdG9yZSIsImdldFN0YXRlIiwiZm9sZGVycyIsImVkaXRvclN0b3JlIiwicHJvamVjdCIsInNlbGVjdFByb2plY3QiLCJzdWdnZXN0ZWRQcm9qZWN0IiwiY29udGVudFRvcGljIiwiY29udGVudFN0eWxlIiwidXNlclByZWZlcmVuY2VzIiwiYXV0b0NyZWF0ZVByb2plY3RzIiwic3VjY2VzcyIsIm1lc3NhZ2UiLCJlcnJvciIsImNvbmZpZGVuY2UiLCJuYW1lIiwiaXNVbmlxdWUiLCJvcmlnaW5hbEF0dGVtcHQiLCJwcm9qZWN0TmFtZSIsImlzTmV3UHJvamVjdCIsIm1hdGNoQ29uZmlkZW5jZSIsInJlYXNvbiIsIkVycm9yIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/../.claude/.tools/twitter/index.ts\n");

/***/ }),

/***/ "(ssr)/../.claude/.tools/twitter/projectManager.ts":
/*!***************************************************!*\
  !*** ../.claude/.tools/twitter/projectManager.ts ***!
  \***************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TwitterProjectManager: () => (/* binding */ TwitterProjectManager),\n/* harmony export */   projectManager: () => (/* binding */ projectManager)\n/* harmony export */ });\n// Twitter Project Manager\n// Handles intelligent project selection and organization\nclass TwitterProjectManager {\n    constructor(){}\n    static getInstance() {\n        if (!TwitterProjectManager.instance) {\n            TwitterProjectManager.instance = new TwitterProjectManager();\n        }\n        return TwitterProjectManager.instance;\n    }\n    // Set editor store externally (injected dependency)\n    setEditorStore(editorStore) {\n        this.editorStore = editorStore;\n    }\n    async selectProject(options) {\n        try {\n            // If no editor store is available, use fallback\n            if (!this.editorStore) {\n                return this.fallbackProjectSelection(options);\n            }\n            const projectFolders = this.editorStore.getState().folders.filter((folder)=>folder.type === 'project');\n            // Strategy 1: Use explicitly suggested project\n            if (options.suggestedProject) {\n                const explicitMatch = this.findExplicitProject(projectFolders, options.suggestedProject);\n                if (explicitMatch) {\n                    return {\n                        projectName: explicitMatch.name,\n                        isNewProject: false,\n                        matchConfidence: 1.0,\n                        reason: `User specified project: ${options.suggestedProject}`\n                    };\n                }\n            }\n            // Strategy 2: Smart project matching based on content\n            if (options.contentTopic && options.contentTopic !== 'general') {\n                const smartMatch = this.findSmartMatch(projectFolders, options.contentTopic, options.contentStyle);\n                if (smartMatch) {\n                    return {\n                        projectName: smartMatch.name,\n                        isNewProject: false,\n                        matchConfidence: smartMatch.confidence,\n                        reason: `Auto-matched based on content topic: ${options.contentTopic}`\n                    };\n                }\n            }\n            // Strategy 3: Use user's default project preference\n            if (options.userPreferences?.defaultProject) {\n                const defaultMatch = this.findExplicitProject(projectFolders, options.userPreferences.defaultProject);\n                if (defaultMatch) {\n                    return {\n                        projectName: defaultMatch.name,\n                        isNewProject: false,\n                        matchConfidence: 0.8,\n                        reason: `Using user's default project: ${options.userPreferences.defaultProject}`\n                    };\n                }\n            }\n            // Strategy 4: Use most recently used regular project\n            const recentProject = this.findMostRecentProject(projectFolders);\n            if (recentProject) {\n                return {\n                    projectName: recentProject.name,\n                    isNewProject: false,\n                    matchConfidence: 0.6,\n                    reason: `Using most recently used project: ${recentProject.name}`\n                };\n            }\n            // Strategy 5: Create topic-based project if auto-create is enabled\n            if (options.userPreferences?.autoCreateProjects && options.contentTopic && options.contentTopic !== 'general') {\n                const newProjectName = this.generateTopicProjectName(options.contentTopic);\n                // Note: Actual folder creation will be handled by the main agent\n                return {\n                    projectName: newProjectName,\n                    isNewProject: true,\n                    matchConfidence: 0.9,\n                    reason: `Will create new project for topic: ${options.contentTopic}`\n                };\n            }\n            // Strategy 6: Fallback to \"Social Media\" project\n            const socialMediaProject = this.findSocialMediaProject(projectFolders);\n            if (socialMediaProject) {\n                return {\n                    projectName: socialMediaProject.name,\n                    isNewProject: false,\n                    matchConfidence: 0.5,\n                    reason: `Using existing Social Media project`\n                };\n            }\n            // Final fallback: Create \"Social Media\" project\n            // Note: Actual folder creation will be handled by the main agent\n            return {\n                projectName: \"Social Media\",\n                isNewProject: true,\n                matchConfidence: 0.4,\n                reason: `Will create default Social Media project`\n            };\n        } catch (error) {\n            // Error fallback\n            return this.fallbackProjectSelection(options);\n        }\n    }\n    fallbackProjectSelection(options) {\n        return {\n            projectName: options.suggestedProject || \"Social Media\",\n            isNewProject: false,\n            matchConfidence: 0.3,\n            reason: \"Fallback selection due to store unavailability\"\n        };\n    }\n    findExplicitProject(projectFolders, projectName) {\n        return projectFolders.find((folder)=>folder.name.toLowerCase().includes(projectName.toLowerCase()) && folder.name.toLowerCase() !== \"instructions\" && !folder.pinned) || null;\n    }\n    findSmartMatch(projectFolders, topic, style) {\n        const regularFolders = projectFolders.filter((folder)=>!folder.pinned && folder.name.toLowerCase() !== \"instructions\" && folder.id !== \"instructions-folder\");\n        // Topic-based matching\n        const topicMatches = this.getTopicMatches(topic, style);\n        for (const match of topicMatches){\n            const folder = regularFolders.find((f)=>f.name.toLowerCase().includes(match.keyword.toLowerCase()));\n            if (folder) {\n                return {\n                    name: folder.name,\n                    confidence: match.confidence\n                };\n            }\n        }\n        return null;\n    }\n    getTopicMatches(topic, style) {\n        const topicMatches = {\n            japan: [\n                {\n                    keyword: 'japan',\n                    confidence: 0.95\n                },\n                {\n                    keyword: 'travel',\n                    confidence: 0.8\n                },\n                {\n                    keyword: 'culture',\n                    confidence: 0.7\n                },\n                {\n                    keyword: 'tourism',\n                    confidence: 0.8\n                }\n            ],\n            technology: [\n                {\n                    keyword: 'tech',\n                    confidence: 0.95\n                },\n                {\n                    keyword: 'development',\n                    confidence: 0.9\n                },\n                {\n                    keyword: 'coding',\n                    confidence: 0.9\n                },\n                {\n                    keyword: 'innovation',\n                    confidence: 0.8\n                },\n                {\n                    keyword: 'digital',\n                    confidence: 0.7\n                }\n            ],\n            business: [\n                {\n                    keyword: 'business',\n                    confidence: 0.95\n                },\n                {\n                    keyword: 'marketing',\n                    confidence: 0.9\n                },\n                {\n                    keyword: 'strategy',\n                    confidence: 0.8\n                },\n                {\n                    keyword: 'growth',\n                    confidence: 0.8\n                },\n                {\n                    keyword: 'startup',\n                    confidence: 0.9\n                }\n            ],\n            health: [\n                {\n                    keyword: 'health',\n                    confidence: 0.95\n                },\n                {\n                    keyword: 'fitness',\n                    confidence: 0.9\n                },\n                {\n                    keyword: 'wellness',\n                    confidence: 0.9\n                },\n                {\n                    keyword: 'lifestyle',\n                    confidence: 0.7\n                }\n            ],\n            motivation: [\n                {\n                    keyword: 'motivation',\n                    confidence: 0.95\n                },\n                {\n                    keyword: 'inspiration',\n                    confidence: 0.9\n                },\n                {\n                    keyword: 'personal',\n                    confidence: 0.7\n                },\n                {\n                    keyword: 'growth',\n                    confidence: 0.8\n                }\n            ]\n        };\n        return topicMatches[topic] || [];\n    }\n    findMostRecentProject(projectFolders) {\n        const regularFolders = projectFolders.filter((folder)=>!folder.pinned && folder.name.toLowerCase() !== \"instructions\" && folder.id !== \"instructions-folder\");\n        // For now, return the first regular folder\n        // TODO: Implement actual \"most recently used\" tracking\n        return regularFolders[0] || null;\n    }\n    findSocialMediaProject(projectFolders) {\n        return projectFolders.find((folder)=>folder.name.toLowerCase().includes('social') && !folder.pinned) || null;\n    }\n    generateTopicProjectName(topic) {\n        const topicToProjectName = {\n            japan: 'Japan Content',\n            technology: 'Tech Posts',\n            business: 'Business Content',\n            health: 'Health & Fitness',\n            motivation: 'Motivational Posts',\n            travel: 'Travel Content',\n            food: 'Food & Cuisine',\n            education: 'Educational Posts',\n            productivity: 'Productivity Tips',\n            creativity: 'Creative Content'\n        };\n        return topicToProjectName[topic] || `${topic.charAt(0).toUpperCase() + topic.slice(1)} Posts`;\n    }\n}\n// Export singleton instance\nconst projectManager = TwitterProjectManager.getInstance();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/../.claude/.tools/twitter/projectManager.ts\n");

/***/ })

};
;