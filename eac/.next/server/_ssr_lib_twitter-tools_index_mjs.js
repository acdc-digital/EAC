"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "_ssr_lib_twitter-tools_index_mjs";
exports.ids = ["_ssr_lib_twitter-tools_index_mjs"];
exports.modules = {

/***/ "(ssr)/./lib/twitter-tools/index.mjs":
/*!*************************************!*\
  !*** ./lib/twitter-tools/index.mjs ***!
  \*************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   contentGenerator: () => (/* binding */ contentGenerator),\n/* harmony export */   fileNamer: () => (/* binding */ fileNamer),\n/* harmony export */   processTwitterRequest: () => (/* binding */ processTwitterRequest),\n/* harmony export */   projectManager: () => (/* binding */ projectManager)\n/* harmony export */ });\n// Twitter Agent Tools - ES Module version for Next.js compatibility\n// Simple content generator\nconst contentGenerator = {\n    generateContent: async (request)=>{\n        const { userInput } = request;\n        // Detect if user wants content generation or is providing literal content\n        const isGenerationRequest = userInput.toLowerCase().includes('write') || userInput.toLowerCase().includes('create') || userInput.toLowerCase().includes('generate');\n        if (!isGenerationRequest) {\n            return {\n                content: userInput,\n                detectedTopic: 'user-provided',\n                style: 'custom',\n                confidence: 1.0\n            };\n        }\n        // Extract topic from input\n        const topic = userInput.replace(/write|create|generate|a post about|about/gi, '').trim();\n        // Generate engaging content based on topic\n        const templates = [\n            `Just discovered something amazing about ${topic}! üåü The little details that make all the difference... #${topic.replace(/\\s+/g, '')} #discovery`,\n            `${topic} never fails to surprise me! There's always something new to learn and appreciate. What's your favorite thing about ${topic}? ü§î`,\n            `Taking a moment to appreciate ${topic} today. Sometimes the simplest things bring the most joy! ‚ú® #gratitude #${topic.replace(/\\s+/g, '')}`,\n            `Fun fact about ${topic}: it's more fascinating than you might think! Here's what caught my attention... üß† #funfacts #${topic.replace(/\\s+/g, '')}`,\n            `${topic} is having a moment, and I'm here for it! üôå What trends are you noticing? #trending #${topic.replace(/\\s+/g, '')}`\n        ];\n        const randomTemplate = templates[Math.floor(Math.random() * templates.length)];\n        return {\n            content: randomTemplate,\n            detectedTopic: topic,\n            style: 'engaging',\n            confidence: 0.85\n        };\n    }\n};\n// Simple file namer\nconst fileNamer = {\n    generateFileName: (options)=>{\n        const { topic, style } = options;\n        const date = new Date().toISOString().slice(0, 10);\n        const randomId = Math.random().toString(36).substring(2, 8);\n        const cleanTopic = topic.replace(/[^a-zA-Z0-9]/g, '-').toLowerCase();\n        const name = `${cleanTopic}-${style}-${date}-${randomId}`;\n        return {\n            name: name,\n            isUnique: true,\n            originalAttempt: name\n        };\n    }\n};\n// Simple project manager\nconst projectManager = {\n    selectProject: async (options)=>{\n        const { suggestedProject, contentTopic } = options;\n        if (suggestedProject) {\n            return {\n                projectName: suggestedProject,\n                isNewProject: false,\n                matchConfidence: 0.9,\n                reason: 'User specified project'\n            };\n        }\n        // Smart project selection based on topic\n        const socialMediaTopics = [\n            'twitter',\n            'social',\n            'post',\n            'engagement'\n        ];\n        const isSocialMedia = socialMediaTopics.some((topic)=>contentTopic.toLowerCase().includes(topic));\n        if (isSocialMedia) {\n            return {\n                projectName: 'Social Media Campaign',\n                isNewProject: false,\n                matchConfidence: 0.8,\n                reason: 'Content matches social media pattern'\n            };\n        }\n        return {\n            projectName: 'Content Creation',\n            isNewProject: true,\n            matchConfidence: 0.7,\n            reason: 'New project for creative content'\n        };\n    }\n};\n// Main processor function\nasync function processTwitterRequest(request, editorStoreState) {\n    try {\n        console.log(\"üîß [ADVANCED TOOLS] Processing Twitter request:\", request);\n        // Step 1: Generate content\n        const content = await contentGenerator.generateContent({\n            userInput: request.userInput,\n            includeHashtags: true\n        });\n        console.log(\"üìù [ADVANCED TOOLS] Generated content:\", content);\n        // Step 2: Generate filename\n        const fileName = fileNamer.generateFileName({\n            content: content.content,\n            topic: content.detectedTopic,\n            style: content.style,\n            maxWords: 3\n        });\n        console.log(\"üìÅ [ADVANCED TOOLS] Generated filename:\", fileName);\n        // Step 3: Select project\n        const project = await projectManager.selectProject({\n            suggestedProject: request.suggestedProject,\n            contentTopic: content.detectedTopic,\n            contentStyle: content.style,\n            userPreferences: {\n                autoCreateProjects: true\n            }\n        });\n        console.log(\"üìÇ [ADVANCED TOOLS] Selected project:\", project);\n        return {\n            content,\n            fileName,\n            project,\n            success: true,\n            message: 'Twitter request processed successfully with ADVANCED TOOLS! üöÄ'\n        };\n    } catch (error) {\n        console.error(\"‚ùå [ADVANCED TOOLS] Error in processing:\", error);\n        return {\n            content: {\n                content: request.userInput,\n                detectedTopic: 'error',\n                style: 'error',\n                confidence: 0\n            },\n            fileName: {\n                name: 'error-post',\n                isUnique: false,\n                originalAttempt: 'error'\n            },\n            project: {\n                projectName: 'Social Media',\n                isNewProject: false,\n                matchConfidence: 0,\n                reason: 'Error fallback'\n            },\n            success: false,\n            message: `Error processing request: ${error instanceof Error ? error.message : 'Unknown error'}`\n        };\n    }\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./lib/twitter-tools/index.mjs\n");

/***/ })

};
;