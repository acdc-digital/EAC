"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_lib_twitter-tools_index_mjs"],{

/***/ "(app-pages-browser)/./lib/twitter-tools/index.mjs":
/*!*************************************!*\
  !*** ./lib/twitter-tools/index.mjs ***!
  \*************************************/
/***/ ((__webpack_module__, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   contentGenerator: () => (/* binding */ contentGenerator),\n/* harmony export */   fileNamer: () => (/* binding */ fileNamer),\n/* harmony export */   processTwitterRequest: () => (/* binding */ processTwitterRequest),\n/* harmony export */   projectManager: () => (/* binding */ projectManager)\n/* harmony export */ });\n// Twitter Agent Tools - ES Module version for Next.js compatibility\n// Simple content generator\nconst contentGenerator = {\n    generateContent: async (request)=>{\n        const { userInput } = request;\n        // Detect if user wants content generation or is providing literal content\n        const isGenerationRequest = userInput.toLowerCase().includes('write') || userInput.toLowerCase().includes('create') || userInput.toLowerCase().includes('generate');\n        if (!isGenerationRequest) {\n            return {\n                content: userInput,\n                detectedTopic: 'user-provided',\n                style: 'custom',\n                confidence: 1.0\n            };\n        }\n        // Extract topic from input\n        const topic = userInput.replace(/write|create|generate|a post about|about/gi, '').trim();\n        // Generate engaging content based on topic\n        const templates = [\n            \"Just discovered something amazing about \".concat(topic, \"! \\uD83C\\uDF1F The little details that make all the difference... #\").concat(topic.replace(/\\s+/g, ''), \" #discovery\"),\n            \"\".concat(topic, \" never fails to surprise me! There's always something new to learn and appreciate. What's your favorite thing about \").concat(topic, \"? \\uD83E\\uDD14\"),\n            \"Taking a moment to appreciate \".concat(topic, \" today. Sometimes the simplest things bring the most joy! ‚ú® #gratitude #\").concat(topic.replace(/\\s+/g, '')),\n            \"Fun fact about \".concat(topic, \": it's more fascinating than you might think! Here's what caught my attention... \\uD83E\\uDDE0 #funfacts #\").concat(topic.replace(/\\s+/g, '')),\n            \"\".concat(topic, \" is having a moment, and I'm here for it! \\uD83D\\uDE4C What trends are you noticing? #trending #\").concat(topic.replace(/\\s+/g, ''))\n        ];\n        const randomTemplate = templates[Math.floor(Math.random() * templates.length)];\n        return {\n            content: randomTemplate,\n            detectedTopic: topic,\n            style: 'engaging',\n            confidence: 0.85\n        };\n    }\n};\n// Simple file namer\nconst fileNamer = {\n    generateFileName: (options)=>{\n        const { topic, style } = options;\n        const date = new Date().toISOString().slice(0, 10);\n        const randomId = Math.random().toString(36).substring(2, 8);\n        const cleanTopic = topic.replace(/[^a-zA-Z0-9]/g, '-').toLowerCase();\n        const name = \"\".concat(cleanTopic, \"-\").concat(style, \"-\").concat(date, \"-\").concat(randomId);\n        return {\n            name: name,\n            isUnique: true,\n            originalAttempt: name\n        };\n    }\n};\n// Simple project manager\nconst projectManager = {\n    selectProject: async (options)=>{\n        const { suggestedProject, contentTopic } = options;\n        if (suggestedProject) {\n            return {\n                projectName: suggestedProject,\n                isNewProject: false,\n                matchConfidence: 0.9,\n                reason: 'User specified project'\n            };\n        }\n        // Smart project selection based on topic\n        const socialMediaTopics = [\n            'twitter',\n            'social',\n            'post',\n            'engagement'\n        ];\n        const isSocialMedia = socialMediaTopics.some((topic)=>contentTopic.toLowerCase().includes(topic));\n        if (isSocialMedia) {\n            return {\n                projectName: 'Social Media Campaign',\n                isNewProject: false,\n                matchConfidence: 0.8,\n                reason: 'Content matches social media pattern'\n            };\n        }\n        return {\n            projectName: 'Content Creation',\n            isNewProject: true,\n            matchConfidence: 0.7,\n            reason: 'New project for creative content'\n        };\n    }\n};\n// Main processor function\nasync function processTwitterRequest(request, editorStoreState) {\n    try {\n        console.log(\"üîß [ADVANCED TOOLS] Processing Twitter request:\", request);\n        // Step 1: Generate content\n        const content = await contentGenerator.generateContent({\n            userInput: request.userInput,\n            includeHashtags: true\n        });\n        console.log(\"üìù [ADVANCED TOOLS] Generated content:\", content);\n        // Step 2: Generate filename\n        const fileName = fileNamer.generateFileName({\n            content: content.content,\n            topic: content.detectedTopic,\n            style: content.style,\n            maxWords: 3\n        });\n        console.log(\"üìÅ [ADVANCED TOOLS] Generated filename:\", fileName);\n        // Step 3: Select project\n        const project = await projectManager.selectProject({\n            suggestedProject: request.suggestedProject,\n            contentTopic: content.detectedTopic,\n            contentStyle: content.style,\n            userPreferences: {\n                autoCreateProjects: true\n            }\n        });\n        console.log(\"üìÇ [ADVANCED TOOLS] Selected project:\", project);\n        return {\n            content,\n            fileName,\n            project,\n            success: true,\n            message: 'Twitter request processed successfully with ADVANCED TOOLS! üöÄ'\n        };\n    } catch (error) {\n        console.error(\"‚ùå [ADVANCED TOOLS] Error in processing:\", error);\n        return {\n            content: {\n                content: request.userInput,\n                detectedTopic: 'error',\n                style: 'error',\n                confidence: 0\n            },\n            fileName: {\n                name: 'error-post',\n                isUnique: false,\n                originalAttempt: 'error'\n            },\n            project: {\n                projectName: 'Social Media',\n                isNewProject: false,\n                matchConfidence: 0,\n                reason: 'Error fallback'\n            },\n            success: false,\n            message: \"Error processing request: \".concat(error instanceof Error ? error.message : 'Unknown error')\n        };\n    }\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = __webpack_module__.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = __webpack_module__.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, __webpack_module__.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                __webpack_module__.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                __webpack_module__.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        __webpack_module__.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    __webpack_module__.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/twitter-tools/index.mjs\n"));

/***/ })

}]);