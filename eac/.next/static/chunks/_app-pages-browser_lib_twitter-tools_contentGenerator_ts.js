"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_lib_twitter-tools_contentGenerator_ts"],{

/***/ "(app-pages-browser)/./lib/twitter-tools/contentGenerator.ts":
/*!***********************************************!*\
  !*** ./lib/twitter-tools/contentGenerator.ts ***!
  \***********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TwitterContentGenerator: () => (/* binding */ TwitterContentGenerator),\n/* harmony export */   contentGenerator: () => (/* binding */ contentGenerator)\n/* harmony export */ });\n// Twitter Content Generator\n// Handles AI-powered content generation with improved templates and variety\n// Content Generation Interface\nclass TwitterContentGenerator {\n    static getInstance() {\n        if (!TwitterContentGenerator.instance) {\n            TwitterContentGenerator.instance = new TwitterContentGenerator();\n        }\n        return TwitterContentGenerator.instance;\n    }\n    async generateContent(request) {\n        const { userInput } = request;\n        // Detect if user wants content generation or is providing literal content\n        const isGenerationRequest = this.detectGenerationRequest(userInput);\n        if (!isGenerationRequest) {\n            return {\n                content: userInput,\n                detectedTopic: 'user-provided',\n                style: 'custom',\n                confidence: 1.0\n            };\n        }\n        // Extract topic and style from user input\n        const detectedTopic = this.extractTopic(userInput);\n        const detectedStyle = this.extractStyle(userInput);\n        // Generate content based on topic and style\n        const content = this.generateTopicContent(detectedTopic, detectedStyle, userInput);\n        return {\n            content,\n            detectedTopic,\n            style: detectedStyle,\n            confidence: 0.85\n        };\n    }\n    detectGenerationRequest(input) {\n        const generationKeywords = [\n            'create',\n            'generate',\n            'write',\n            'make',\n            'post about',\n            'tweet about',\n            'share about',\n            'motivational',\n            'inspirational',\n            'funny',\n            'educational',\n            'professional',\n            'announcement',\n            'tip',\n            'advice',\n            'quote'\n        ];\n        return generationKeywords.some((keyword)=>input.toLowerCase().includes(keyword.toLowerCase()));\n    }\n    extractTopic(input) {\n        const inputLower = input.toLowerCase();\n        // Direct topic extraction patterns\n        const aboutMatch = input.match(/(?:about|on)\\s+([^,\\.!?]+)/i);\n        if (aboutMatch) {\n            return aboutMatch[1].trim();\n        }\n        // Predefined topic detection\n        const topicMap = {\n            'japan': [\n                'japan',\n                'japanese',\n                'tokyo',\n                'kyoto'\n            ],\n            'technology': [\n                'tech',\n                'technology',\n                'ai',\n                'software',\n                'coding'\n            ],\n            'business': [\n                'business',\n                'startup',\n                'entrepreneur',\n                'finance'\n            ],\n            'health': [\n                'health',\n                'fitness',\n                'wellness',\n                'workout'\n            ],\n            'motivation': [\n                'motivation',\n                'inspiration',\n                'success',\n                'goals'\n            ],\n            'travel': [\n                'travel',\n                'trip',\n                'vacation',\n                'tourism'\n            ],\n            'food': [\n                'food',\n                'cooking',\n                'recipe',\n                'cuisine'\n            ],\n            'education': [\n                'education',\n                'learning',\n                'study',\n                'knowledge'\n            ],\n            'productivity': [\n                'productivity',\n                'work',\n                'efficiency',\n                'time'\n            ],\n            'creativity': [\n                'creativity',\n                'art',\n                'design',\n                'creative'\n            ],\n            'music': [\n                'music',\n                'song',\n                'artist',\n                'singer',\n                'album',\n                'concert',\n                'mariah carey',\n                'taylor swift',\n                'beyonce',\n                'drake',\n                'spotify',\n                'playlist'\n            ]\n        };\n        for (const [topic, keywords] of Object.entries(topicMap)){\n            if (keywords.some((keyword)=>inputLower.includes(keyword))) {\n                return topic;\n            }\n        }\n        return 'general';\n    }\n    extractStyle(input) {\n        const inputLower = input.toLowerCase();\n        if (inputLower.includes('motivat') || inputLower.includes('inspir')) return 'motivational';\n        if (inputLower.includes('professional') || inputLower.includes('business')) return 'professional';\n        if (inputLower.includes('educational') || inputLower.includes('tip')) return 'educational';\n        if (inputLower.includes('announcement') || inputLower.includes('news')) return 'announcement';\n        if (inputLower.includes('funny') || inputLower.includes('casual')) return 'casual';\n        return 'general';\n    }\n    generateTopicContent(topic, style, originalInput) {\n        const templates = this.getTemplatesForTopic(topic, style);\n        if (templates.length === 0) {\n            return this.generateFallbackContent(topic, originalInput);\n        }\n        // Select random template for variety\n        const template = templates[Math.floor(Math.random() * templates.length)];\n        return template;\n    }\n    getTemplatesForTopic(topic, style) {\n        const templateMap = {\n            japan: {\n                motivational: [\n                    \"🗾 Japan teaches us that strength comes from adapting to change, just like cherry blossoms bloom and fall. What lesson from nature inspires you today? #JapanWisdom #Resilience #Growth\",\n                    \"🌸 In Japan, they say 'Nana korobi ya oki' - fall seven times, rise eight. What challenge are you ready to rise from today? #JapanMotivation #Perseverance #Success\"\n                ],\n                educational: [\n                    \"🗾 Did you know Japan has over 6,800 islands? From ancient temples to bullet trains, every corner tells a story of innovation meeting tradition. #JapanFacts #Culture #Learning\",\n                    \"🍜 Japanese cuisine goes beyond sushi! Ramen has over 100 varieties, each region crafting unique flavors. What's your favorite Japanese dish? #JapaneseCuisine #Food #Culture\"\n                ],\n                general: [\n                    \"🗾 Japan's breathtaking landscapes blend ancient traditions with modern marvels. From cherry blossoms in Kyoto to neon lights in Tokyo—every moment is magic! #JapanTravel #Tourism #Culture\"\n                ]\n            },\n            technology: {\n                motivational: [\n                    \"💻 Technology isn't just about code—it's about creating solutions that change lives. What problem are you solving today? #TechMotivation #Innovation #Impact\",\n                    \"🚀 Every app started as an idea. Every platform began with a single line of code. Your next breakthrough is just one commit away! #TechSuccess #Coding #Dreams\"\n                ],\n                educational: [\n                    \"🔧 AI isn't replacing developers—it's amplifying our capabilities. Learn to work WITH AI, not against it. The future belongs to human-AI collaboration! #AI #Development #Future\",\n                    \"💡 Did you know? The first computer bug was literally a bug—a moth found in a Harvard computer in 1947! Grace Hopper coined the term. #TechHistory #Programming #Fun\"\n                ],\n                professional: [\n                    \"⚡ The tech industry moves fast, but fundamentals remain constant: clean code, user focus, and continuous learning. What fundamental are you strengthening today? #TechCareer #Programming #Growth\"\n                ]\n            },\n            motivation: {\n                motivational: [\n                    \"🌟 Every expert was once a beginner. Every pro was once an amateur. The only difference? They never gave up. What are you not giving up on today? #Motivation #Growth #Success\",\n                    \"💪 Your future self is counting on the decisions you make today. Make choices that your future self will thank you for! #FutureYou #Goals #Success\",\n                    \"🎯 Progress isn't always visible, but it's always happening. Trust the process, embrace the journey, celebrate small wins! #Progress #Mindset #Growth\"\n                ]\n            },\n            business: {\n                professional: [\n                    \"📊 Great businesses solve real problems for real people. Before building features, build understanding. What problem are you solving today? #Business #Strategy #CustomerFirst\",\n                    \"💼 Revenue is vanity, profit is sanity, but cash flow is reality. Focus on the metrics that actually matter for sustainability. #BusinessTips #Finance #Strategy\"\n                ],\n                motivational: [\n                    \"🚀 Every successful business started with someone believing in an impossible idea. What impossible idea are you working on? #Entrepreneurship #Innovation #Dreams\"\n                ]\n            },\n            health: {\n                motivational: [\n                    \"💪 Your body can do it. It's your mind you need to convince. What mental barrier are you breaking through today? #FitnessMotivation #Health #Mindset\",\n                    \"🌱 Health isn't a destination—it's a daily practice. Small choices compound into life-changing results. What healthy choice are you making today? #Health #Wellness #Habits\"\n                ],\n                educational: [\n                    \"🧠 Did you know? Exercise literally grows new brain cells! Physical activity increases BDNF, which helps create new neural connections. Move your body, grow your mind! #Health #Science #Brain\"\n                ]\n            },\n            music: {\n                motivational: [\n                    \"🎵 Music has the power to heal, inspire, and unite us across all boundaries. What song lifts your spirits when you need it most? #Music #Inspiration #Healing\",\n                    \"🎤 Every artist's journey starts with a single note, a single word, a single dream. Your voice matters—let it be heard! #Music #Dreams #ArtistLife\"\n                ],\n                general: [\n                    \"🎶 Great music transcends time and touches souls. From classic ballads to modern beats, every genre tells a story. What's your soundtrack today? #Music #Life #Soundtrack\",\n                    \"🎵 The beauty of music lies in its ability to express what words cannot. Which artist's voice speaks to your heart? #Music #Emotion #Connection\",\n                    \"🎤 Music is the universal language that connects us all. One song can change a mood, a day, or even a life. What's your go-to anthem? #Music #Universal #Power\"\n                ],\n                professional: [\n                    \"🎼 The music industry continues to evolve with streaming, AI, and new platforms changing how we discover and consume music. What trends excite you most? #MusicIndustry #Innovation #Streaming\"\n                ],\n                educational: [\n                    \"🎵 Did you know? Listening to music releases dopamine in the brain—the same chemical associated with eating and falling in love! What music makes you happiest? #Music #Science #Brain\"\n                ]\n            }\n        };\n        const topicTemplates = templateMap[topic];\n        if (!topicTemplates) return [];\n        const styleTemplates = topicTemplates[style] || topicTemplates['general'] || [];\n        return styleTemplates;\n    }\n    generateFallbackContent(topic, originalInput) {\n        // Try to extract the actual subject from the original input\n        const aboutMatch = originalInput.match(/about\\s+([^,\\.!?]+)/i);\n        const subject = aboutMatch ? aboutMatch[1].trim() : topic;\n        const subjectFormatted = subject.charAt(0).toUpperCase() + subject.slice(1);\n        const hashtag = subject.replace(/\\s+/g, '').replace(/[^a-zA-Z0-9]/g, '');\n        const fallbackTemplates = [\n            \"✨ \".concat(subjectFormatted, \" brings so much joy and inspiration! What's your favorite thing about it? #\").concat(hashtag, \" #Love #Passion\"),\n            \"\\uD83C\\uDF1F There's something special about \".concat(subjectFormatted, \" that just captures the heart. Share your thoughts! #\").concat(hashtag, \" #Amazing #Thoughts\"),\n            \"\\uD83D\\uDCAB \".concat(subjectFormatted, \" has this incredible ability to make us feel alive. What draws you to it? #\").concat(hashtag, \" #Inspiration #Life\"),\n            \"\\uD83C\\uDF89 Celebrating all things \".concat(subjectFormatted, \"! What makes it meaningful to you? #\").concat(hashtag, \" #Celebration #Meaningful\"),\n            \"� \".concat(subjectFormatted, \" never fails to amaze! What's your latest discovery or favorite moment? #\").concat(hashtag, \" #Amazing #Discovery\")\n        ];\n        return fallbackTemplates[Math.floor(Math.random() * fallbackTemplates.length)];\n    }\n    constructor(){}\n}\n// Export singleton instance\nconst contentGenerator = TwitterContentGenerator.getInstance();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL2xpYi90d2l0dGVyLXRvb2xzL2NvbnRlbnRHZW5lcmF0b3IudHMiLCJtYXBwaW5ncyI6Ijs7Ozs7QUFBQSw0QkFBNEI7QUFDNUIsNEVBQTRFO0FBRTVFLCtCQUErQjtBQWV4QixNQUFNQTtJQUtYLE9BQU9DLGNBQXVDO1FBQzVDLElBQUksQ0FBQ0Qsd0JBQXdCRSxRQUFRLEVBQUU7WUFDckNGLHdCQUF3QkUsUUFBUSxHQUFHLElBQUlGO1FBQ3pDO1FBQ0EsT0FBT0Esd0JBQXdCRSxRQUFRO0lBQ3pDO0lBRUEsTUFBTUMsZ0JBQWdCQyxPQUFpQyxFQUE2QjtRQUNsRixNQUFNLEVBQUVDLFNBQVMsRUFBRSxHQUFHRDtRQUV0QiwwRUFBMEU7UUFDMUUsTUFBTUUsc0JBQXNCLElBQUksQ0FBQ0MsdUJBQXVCLENBQUNGO1FBRXpELElBQUksQ0FBQ0MscUJBQXFCO1lBQ3hCLE9BQU87Z0JBQ0xFLFNBQVNIO2dCQUNUSSxlQUFlO2dCQUNmQyxPQUFPO2dCQUNQQyxZQUFZO1lBQ2Q7UUFDRjtRQUVBLDBDQUEwQztRQUMxQyxNQUFNRixnQkFBZ0IsSUFBSSxDQUFDRyxZQUFZLENBQUNQO1FBQ3hDLE1BQU1RLGdCQUFnQixJQUFJLENBQUNDLFlBQVksQ0FBQ1Q7UUFFeEMsNENBQTRDO1FBQzVDLE1BQU1HLFVBQVUsSUFBSSxDQUFDTyxvQkFBb0IsQ0FBQ04sZUFBZUksZUFBZVI7UUFFeEUsT0FBTztZQUNMRztZQUNBQztZQUNBQyxPQUFPRztZQUNQRixZQUFZO1FBQ2Q7SUFDRjtJQUVRSix3QkFBd0JTLEtBQWEsRUFBVztRQUN0RCxNQUFNQyxxQkFBcUI7WUFDekI7WUFBVTtZQUFZO1lBQVM7WUFDL0I7WUFBYztZQUFlO1lBQzdCO1lBQWdCO1lBQWlCO1lBQ2pDO1lBQWU7WUFBZ0I7WUFDL0I7WUFBTztZQUFVO1NBQ2xCO1FBRUQsT0FBT0EsbUJBQW1CQyxJQUFJLENBQUNDLENBQUFBLFVBQzdCSCxNQUFNSSxXQUFXLEdBQUdDLFFBQVEs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QUFRO1lBQzNHLHVDQUFtRkEsT0FBdkRKLGtCQUFpQix3Q0FBOEMsT0FBUkksU0FBUTtZQUMzRixLQUFnR0EsT0FBNUZKLGtCQUFpQiw2RUFBbUYsT0FBUkksU0FBUTtTQUMxRztRQUVELE9BQU9FLGlCQUFpQixDQUFDdkIsS0FBS0MsS0FBSyxDQUFDRCxLQUFLRSxNQUFNLEtBQUtxQixrQkFBa0IxQixNQUFNLEVBQUU7SUFDaEY7SUFuTkEsYUFBc0IsQ0FBQztBQW9OekI7QUFFQSw0QkFBNEI7QUFDckIsTUFBTTJCLG1CQUFtQjdELHdCQUF3QkMsV0FBVyxHQUFHIiwic291cmNlcyI6WyIvVXNlcnMvbWF0dGhld3NpbW9uL1Byb2plY3RzL2VhYy9lYWMvbGliL3R3aXR0ZXItdG9vbHMvY29udGVudEdlbmVyYXRvci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBUd2l0dGVyIENvbnRlbnQgR2VuZXJhdG9yXG4vLyBIYW5kbGVzIEFJLXBvd2VyZWQgY29udGVudCBnZW5lcmF0aW9uIHdpdGggaW1wcm92ZWQgdGVtcGxhdGVzIGFuZCB2YXJpZXR5XG5cbi8vIENvbnRlbnQgR2VuZXJhdGlvbiBJbnRlcmZhY2VcbmV4cG9ydCBpbnRlcmZhY2UgQ29udGVudEdlbmVyYXRpb25SZXF1ZXN0IHtcbiAgdXNlcklucHV0OiBzdHJpbmc7XG4gIHRvcGljPzogc3RyaW5nO1xuICBzdHlsZT86ICdtb3RpdmF0aW9uYWwnIHwgJ2VkdWNhdGlvbmFsJyB8ICdwcm9mZXNzaW9uYWwnIHwgJ2Nhc3VhbCcgfCAnYW5ub3VuY2VtZW50JztcbiAgaW5jbHVkZUhhc2h0YWdzPzogYm9vbGVhbjtcbn1cblxuZXhwb3J0IGludGVyZmFjZSBHZW5lcmF0ZWRDb250ZW50IHtcbiAgY29udGVudDogc3RyaW5nO1xuICBkZXRlY3RlZFRvcGljOiBzdHJpbmc7XG4gIHN0eWxlOiBzdHJpbmc7XG4gIGNvbmZpZGVuY2U6IG51bWJlcjtcbn1cblxuZXhwb3J0IGNsYXNzIFR3aXR0ZXJDb250ZW50R2VuZXJhdG9yIHtcbiAgcHJpdmF0ZSBzdGF0aWMgaW5zdGFuY2U6IFR3aXR0ZXJDb250ZW50R2VuZXJhdG9yO1xuICBcbiAgcHJpdmF0ZSBjb25zdHJ1Y3RvcigpIHt9XG4gIFxuICBzdGF0aWMgZ2V0SW5zdGFuY2UoKTogVHdpdHRlckNvbnRlbnRHZW5lcmF0b3Ige1xuICAgIGlmICghVHdpdHRlckNvbnRlbnRHZW5lcmF0b3IuaW5zdGFuY2UpIHtcbiAgICAgIFR3aXR0ZXJDb250ZW50R2VuZXJhdG9yLmluc3RhbmNlID0gbmV3IFR3aXR0ZXJDb250ZW50R2VuZXJhdG9yKCk7XG4gICAgfVxuICAgIHJldHVybiBUd2l0dGVyQ29udGVudEdlbmVyYXRvci5pbnN0YW5jZTtcbiAgfVxuXG4gIGFzeW5jIGdlbmVyYXRlQ29udGVudChyZXF1ZXN0OiBDb250ZW50R2VuZXJhdGlvblJlcXVlc3QpOiBQcm9taXNlPEdlbmVyYXRlZENvbnRlbnQ+IHtcbiAgICBjb25zdCB7IHVzZXJJbnB1dCB9ID0gcmVxdWVzdDtcbiAgICBcbiAgICAvLyBEZXRlY3QgaWYgdXNlciB3YW50cyBjb250ZW50IGdlbmVyYXRpb24gb3IgaXMgcHJvdmlkaW5nIGxpdGVyYWwgY29udGVudFxuICAgIGNvbnN0IGlzR2VuZXJhdGlvblJlcXVlc3QgPSB0aGlzLmRldGVjdEdlbmVyYXRpb25SZXF1ZXN0KHVzZXJJbnB1dCk7XG4gICAgXG4gICAgaWYgKCFpc0dlbmVyYXRpb25SZXF1ZXN0KSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBjb250ZW50OiB1c2VySW5wdXQsXG4gICAgICAgIGRldGVjdGVkVG9waWM6ICd1c2VyLXByb3ZpZGVkJyxcbiAgICAgICAgc3R5bGU6ICdjdXN0b20nLFxuICAgICAgICBjb25maWRlbmNlOiAxLjBcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gRXh0cmFjdCB0b3BpYyBhbmQgc3R5bGUgZnJvbSB1c2VyIGlucHV0XG4gICAgY29uc3QgZGV0ZWN0ZWRUb3BpYyA9IHRoaXMuZXh0cmFjdFRvcGljKHVzZXJJbnB1dCk7XG4gICAgY29uc3QgZGV0ZWN0ZWRTdHlsZSA9IHRoaXMuZXh0cmFjdFN0eWxlKHVzZXJJbnB1dCk7XG4gICAgXG4gICAgLy8gR2VuZXJhdGUgY29udGVudCBiYXNlZCBvbiB0b3BpYyBhbmQgc3R5bGVcbiAgICBjb25zdCBjb250ZW50ID0gdGhpcy5nZW5lcmF0ZVRvcGljQ29udGVudChkZXRlY3RlZFRvcGljLCBkZXRlY3RlZFN0eWxlLCB1c2VySW5wdXQpO1xuICAgIFxuICAgIHJldHVybiB7XG4gICAgICBjb250ZW50LFxuICAgICAgZGV0ZWN0ZWRUb3BpYyxcbiAgICAgIHN0eWxlOiBkZXRlY3RlZFN0eWxlLFxuICAgICAgY29uZmlkZW5jZTogMC44NVxuICAgIH07XG4gIH1cblxuICBwcml2YXRlIGRldGVjdEdlbmVyYXRpb25SZXF1ZXN0KGlucHV0OiBzdHJpbmcpOiBib29sZWFuIHtcbiAgICBjb25zdCBnZW5lcmF0aW9uS2V5d29yZHMgPSBbXG4gICAgICAnY3JlYXRlJywgJ2dlbmVyYXRlJywgJ3dyaXRlJywgJ21ha2UnLFxuICAgICAgJ3Bvc3QgYWJvdXQnLCAndHdlZXQgYWJvdXQnLCAnc2hhcmUgYWJvdXQnLFxuICAgICAgJ21vdGl2YXRpb25hbCcsICdpbnNwaXJhdGlvbmFsJywgJ2Z1bm55JyxcbiAgICAgICdlZHVjYXRpb25hbCcsICdwcm9mZXNzaW9uYWwnLCAnYW5ub3VuY2VtZW50JyxcbiAgICAgICd0aXAnLCAnYWR2aWNlJywgJ3F1b3RlJ1xuICAgIF07XG5cbiAgICByZXR1cm4gZ2VuZXJhdGlvbktleXdvcmRzLnNvbWUoa2V5d29yZCA9PiBcbiAgICAgIGlucHV0LnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoa2V5d29yZC50b0xvd2VyQ2FzZSgpKVxuICAgICk7XG4gIH1cblxuICBwcml2YXRlIGV4dHJhY3RUb3BpYyhpbnB1dDogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBpbnB1dExvd2VyID0gaW5wdXQudG9Mb3dlckNhc2UoKTtcbiAgICBcbiAgICAvLyBEaXJlY3QgdG9waWMgZXh0cmFjdGlvbiBwYXR0ZXJuc1xuICAgIGNvbnN0IGFib3V0TWF0Y2ggPSBpbnB1dC5tYXRjaCgvKD86YWJvdXR8b24pXFxzKyhbXixcXC4hP10rKS9pKTtcbiAgICBpZiAoYWJvdXRNYXRjaCkge1xuICAgICAgcmV0dXJuIGFib3V0TWF0Y2hbMV0udHJpbSgpO1xuICAgIH1cblxuICAgIC8vIFByZWRlZmluZWQgdG9waWMgZGV0ZWN0aW9uXG4gICAgY29uc3QgdG9waWNNYXAgPSB7XG4gICAgICAnamFwYW4nOiBbJ2phcGFuJywgJ2phcGFuZXNlJywgJ3Rva3lvJywgJ2t5b3RvJ10sXG4gICAgICAndGVjaG5vbG9neSc6IFsndGVjaCcsICd0ZWNobm9sb2d5JywgJ2FpJywgJ3NvZnR3YXJlJywgJ2NvZGluZyddLFxuICAgICAgJ2J1c2luZXNzJzogWydidXNpbmVzcycsICdzdGFydHVwJywgJ2VudHJlcHJlbmV1cicsICdmaW5hbmNlJ10sXG4gICAgICAnaGVhbHRoJzogWydoZWFsdGgnLCAnZml0bmVzcycsICd3ZWxsbmVzcycsICd3b3Jrb3V0J10sXG4gICAgICAnbW90aXZhdGlvbic6IFsnbW90aXZhdGlvbicsICdpbnNwaXJhdGlvbicsICdzdWNjZXNzJywgJ2dvYWxzJ10sXG4gICAgICAndHJhdmVsJzogWyd0cmF2ZWwnLCAndHJpcCcsICd2YWNhdGlvbicsICd0b3VyaXNtJ10sXG4gICAgICAnZm9vZCc6IFsnZm9vZCcsICdjb29raW5nJywgJ3JlY2lwZScsICdjdWlzaW5lJ10sXG4gICAgICAnZWR1Y2F0aW9uJzogWydlZHVjYXRpb24nLCAnbGVhcm5pbmcnLCAnc3R1ZHknLCAna25vd2xlZGdlJ10sXG4gICAgICAncHJvZHVjdGl2aXR5JzogWydwcm9kdWN0aXZpdHknLCAnd29yaycsICdlZmZpY2llbmN5JywgJ3RpbWUnXSxcbiAgICAgICdjcmVhdGl2aXR5JzogWydjcmVhdGl2aXR5JywgJ2FydCcsICdkZXNpZ24nLCAnY3JlYXRpdmUnXSxcbiAgICAgICdtdXNpYyc6IFsnbXVzaWMnLCAnc29uZycsICdhcnRpc3QnLCAnc2luZ2VyJywgJ2FsYnVtJywgJ2NvbmNlcnQnLCAnbWFyaWFoIGNhcmV5JywgJ3RheWxvciBzd2lmdCcsICdiZXlvbmNlJywgJ2RyYWtlJywgJ3Nwb3RpZnknLCAncGxheWxpc3QnXVxuICAgIH07XG5cbiAgICBmb3IgKGNvbnN0IFt0b3BpYywga2V5d29yZHNdIG9mIE9iamVjdC5lbnRyaWVzKHRvcGljTWFwKSkge1xuICAgICAgaWYgKGtleXdvcmRzLnNvbWUoa2V5d29yZCA9PiBpbnB1dExvd2VyLmluY2x1ZGVzKGtleXdvcmQpKSkge1xuICAgICAgICByZXR1cm4gdG9waWM7XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuICdnZW5lcmFsJztcbiAgfVxuXG4gIHByaXZhdGUgZXh0cmFjdFN0eWxlKGlucHV0OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IGlucHV0TG93ZXIgPSBpbnB1dC50b0xvd2VyQ2FzZSgpO1xuICAgIFxuICAgIGlmIChpbnB1dExvd2VyLmluY2x1ZGVzKCdtb3RpdmF0JykgfHwgaW5wdXRMb3dlci5pbmNsdWRlcygnaW5zcGlyJykpIHJldHVybiAnbW90aXZhdGlvbmFsJztcbiAgICBpZiAoaW5wdXRMb3dlci5pbmNsdWRlcygncHJvZmVzc2lvbmFsJykgfHwgaW5wdXRMb3dlci5pbmNsdWRlcygnYnVzaW5lc3MnKSkgcmV0dXJuICdwcm9mZXNzaW9uYWwnO1xuICAgIGlmIChpbnB1dExvd2VyLmluY2x1ZGVzKCdlZHVjYXRpb25hbCcpIHx8IGlucHV0TG93ZXIuaW5jbHVkZXMoJ3RpcCcpKSByZXR1cm4gJ2VkdWNhdGlvbmFsJztcbiAgICBpZiAoaW5wdXRMb3dlci5pbmNsdWRlcygnYW5ub3VuY2VtZW50JykgfHwgaW5wdXRMb3dlci5pbmNsdWRlcygnbmV3cycpKSByZXR1cm4gJ2Fubm91bmNlbWVudCc7XG4gICAgaWYgKGlucHV0TG93ZXIuaW5jbHVkZXMoJ2Z1bm55JykgfHwgaW5wdXRMb3dlci5pbmNsdWRlcygnY2FzdWFsJykpIHJldHVybiAnY2FzdWFsJztcbiAgICBcbiAgICByZXR1cm4gJ2dlbmVyYWwnO1xuICB9XG5cbiAgcHJpdmF0ZSBnZW5lcmF0ZVRvcGljQ29udGVudCh0b3BpYzogc3RyaW5nLCBzdHlsZTogc3RyaW5nLCBvcmlnaW5hbElucHV0OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIGNvbnN0IHRlbXBsYXRlcyA9IHRoaXMuZ2V0VGVtcGxhdGVzRm9yVG9waWModG9waWMsIHN0eWxlKTtcbiAgICBcbiAgICBpZiAodGVtcGxhdGVzLmxlbmd0aCA9PT0gMCkge1xuICAgICAgcmV0dXJuIHRoaXMuZ2VuZXJhdGVGYWxsYmFja0NvbnRlbnQodG9waWMsIG9yaWdpbmFsSW5wdXQpO1xuICAgIH1cblxuICAgIC8vIFNlbGVjdCByYW5kb20gdGVtcGxhdGUgZm9yIHZhcmlldHlcbiAgICBjb25zdCB0ZW1wbGF0ZSA9IHRlbXBsYXRlc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiB0ZW1wbGF0ZXMubGVuZ3RoKV07XG4gICAgcmV0dXJuIHRlbXBsYXRlO1xuICB9XG5cbiAgcHJpdmF0ZSBnZXRUZW1wbGF0ZXNGb3JUb3BpYyh0b3BpYzogc3RyaW5nLCBzdHlsZTogc3RyaW5nKTogc3RyaW5nW10ge1xuICAgIGNvbnN0IHRlbXBsYXRlTWFwOiBSZWNvcmQ8c3RyaW5nLCBSZWNvcmQ8c3RyaW5nLCBzdHJpbmdbXT4+ID0ge1xuICAgICAgamFwYW46IHtcbiAgICAgICAgbW90aXZhdGlvbmFsOiBbXG4gICAgICAgICAgXCLwn5e+IEphcGFuIHRlYWNoZXMgdXMgdGhhdCBzdHJlbmd0aCBjb21lcyBmcm9tIGFkYXB0aW5nIHRvIGNoYW5nZSwganVzdCBsaWtlIGNoZXJyeSBibG9zc29tcyBibG9vbSBhbmQgZmFsbC4gV2hhdCBsZXNzb24gZnJvbSBuYXR1cmUgaW5zcGlyZXMgeW91IHRvZGF5PyAjSmFwYW5XaXNkb20gI1Jlc2lsaWVuY2UgI0dyb3d0aFwiLFxuICAgICAgICAgIFwi8J+MuCBJbiBKYXBhbiwgdGhleSBzYXkgJ05hbmEga29yb2JpIHlhIG9raScgLSBmYWxsIHNldmVuIHRpbWVzLCByaXNlIGVpZ2h0LiBXaGF0IGNoYWxsZW5nZSBhcmUgeW91IHJlYWR5IHRvIHJpc2UgZnJvbSB0b2RheT8gI0phcGFuTW90aXZhdGlvbiAjUGVyc2V2ZXJhbmNlICNTdWNjZXNzXCJcbiAgICAgICAgXSxcbiAgICAgICAgZWR1Y2F0aW9uYWw6IFtcbiAgICAgICAgICBcIvCfl74gRGlkIHlvdSBrbm93IEphcGFuIGhhcyBvdmVyIDYsODAwIGlzbGFuZHM/IEZyb20gYW5jaWVudCB0ZW1wbGVzIHRvIGJ1bGxldCB0cmFpbnMsIGV2ZXJ5IGNvcm5lciB0ZWxscyBhIHN0b3J5IG9mIGlubm92YXRpb24gbWVldGluZyB0cmFkaXRpb24uICNKYXBhbkZhY3RzICNDdWx0dXJlICNMZWFybmluZ1wiLFxuICAgICAgICAgIFwi8J+NnCBKYXBhbmVzZSBjdWlzaW5lIGdvZXMgYmV5b25kIHN1c2hpISBSYW1lbiBoYXMgb3ZlciAxMDAgdmFyaWV0aWVzLCBlYWNoIHJlZ2lvbiBjcmFmdGluZyB1bmlxdWUgZmxhdm9ycy4gV2hhdCdzIHlvdXIgZmF2b3JpdGUgSmFwYW5lc2UgZGlzaD8gI0phcGFuZXNlQ3Vpc2luZSAjRm9vZCAjQ3VsdHVyZVwiXG4gICAgICAgIF0sXG4gICAgICAgIGdlbmVyYWw6IFtcbiAgICAgICAgICBcIvCfl74gSmFwYW4ncyBicmVhdGh0YWtpbmcgbGFuZHNjYXBlcyBibGVuZCBhbmNpZW50IHRyYWRpdGlvbnMgd2l0aCBtb2Rlcm4gbWFydmVscy4gRnJvbSBjaGVycnkgYmxvc3NvbXMgaW4gS3lvdG8gdG8gbmVvbiBsaWdodHMgaW4gVG9reW/igJRldmVyeSBtb21lbnQgaXMgbWFnaWMhICNKYXBhblRyYXZlbCAjVG91cmlzbSAjQ3VsdHVyZVwiXG4gICAgICAgIF1cbiAgICAgIH0sXG4gICAgICBcbiAgICAgIHRlY2hub2xvZ3k6IHtcbiAgICAgICAgbW90aXZhdGlvbmFsOiBbXG4gICAgICAgICAgXCLwn5K7IFRlY2hub2xvZ3kgaXNuJ3QganVzdCBhYm91dCBjb2Rl4oCUaXQncyBhYm91dCBjcmVhdGluZyBzb2x1dGlvbnMgdGhhdCBjaGFuZ2UgbGl2ZXMuIFdoYXQgcHJvYmxlbSBhcmUgeW91IHNvbHZpbmcgdG9kYXk/ICNUZWNoTW90aXZhdGlvbiAjSW5ub3ZhdGlvbiAjSW1wYWN0XCIsXG4gICAgICAgICAgXCLwn5qAIEV2ZXJ5IGFwcCBzdGFydGVkIGFzIGFuIGlkZWEuIEV2ZXJ5IHBsYXRmb3JtIGJlZ2FuIHdpdGggYSBzaW5nbGUgbGluZSBvZiBjb2RlLiBZb3VyIG5leHQgYnJlYWt0aHJvdWdoIGlzIGp1c3Qgb25lIGNvbW1pdCBhd2F5ISAjVGVjaFN1Y2Nlc3MgI0NvZGluZyAjRHJlYW1zXCJcbiAgICAgICAgXSxcbiAgICAgICAgZWR1Y2F0aW9uYWw6IFtcbiAgICAgICAgICBcIvCflKcgQUkgaXNuJ3QgcmVwbGFjaW5nIGRldmVsb3BlcnPigJRpdCdzIGFtcGxpZnlpbmcgb3VyIGNhcGFiaWxpdGllcy4gTGVhcm4gdG8gd29yayBXSVRIIEFJLCBub3QgYWdhaW5zdCBpdC4gVGhlIGZ1dHVyZSBiZWxvbmdzIHRvIGh1bWFuLUFJIGNvbGxhYm9yYXRpb24hICNBSSAjRGV2ZWxvcG1lbnQgI0Z1dHVyZVwiLFxuICAgICAgICAgIFwi8J+SoSBEaWQgeW91IGtub3c/IFRoZSBmaXJzdCBjb21wdXRlciBidWcgd2FzIGxpdGVyYWxseSBhIGJ1Z+KAlGEgbW90aCBmb3VuZCBpbiBhIEhhcnZhcmQgY29tcHV0ZXIgaW4gMTk0NyEgR3JhY2UgSG9wcGVyIGNvaW5lZCB0aGUgdGVybS4gI1RlY2hIaXN0b3J5ICNQcm9ncmFtbWluZyAjRnVuXCJcbiAgICAgICAgXSxcbiAgICAgICAgcHJvZmVzc2lvbmFsOiBbXG4gICAgICAgICAgXCLimqEgVGhlIHRlY2ggaW5kdXN0cnkgbW92ZXMgZmFzdCwgYnV0IGZ1bmRhbWVudGFscyByZW1haW4gY29uc3RhbnQ6IGNsZWFuIGNvZGUsIHVzZXIgZm9jdXMsIGFuZCBjb250aW51b3VzIGxlYXJuaW5nLiBXaGF0IGZ1bmRhbWVudGFsIGFyZSB5b3Ugc3RyZW5ndGhlbmluZyB0b2RheT8gI1RlY2hDYXJlZXIgI1Byb2dyYW1taW5nICNHcm93dGhcIlxuICAgICAgICBdXG4gICAgICB9LFxuXG4gICAgICBtb3RpdmF0aW9uOiB7XG4gICAgICAgIG1vdGl2YXRpb25hbDogW1xuICAgICAgICAgIFwi8J+MnyBFdmVyeSBleHBlcnQgd2FzIG9uY2UgYSBiZWdpbm5lci4gRXZlcnkgcHJvIHdhcyBvbmNlIGFuIGFtYXRldXIuIFRoZSBvbmx5IGRpZmZlcmVuY2U/IFRoZXkgbmV2ZXIgZ2F2ZSB1cC4gV2hhdCBhcmUgeW91IG5vdCBnaXZpbmcgdXAgb24gdG9kYXk/ICNNb3RpdmF0aW9uICNHcm93dGggI1N1Y2Nlc3NcIixcbiAgICAgICAgICBcIvCfkqogWW91ciBmdXR1cmUgc2VsZiBpcyBjb3VudGluZyBvbiB0aGUgZGVjaXNpb25zIHlvdSBtYWtlIHRvZGF5LiBNYWtlIGNob2ljZXMgdGhhdCB5b3VyIGZ1dHVyZSBzZWxmIHdpbGwgdGhhbmsgeW91IGZvciEgI0Z1dHVyZVlvdSAjR29hbHMgI1N1Y2Nlc3NcIixcbiAgICAgICAgICBcIvCfjq8gUHJvZ3Jlc3MgaXNuJ3QgYWx3YXlzIHZpc2libGUsIGJ1dCBpdCdzIGFsd2F5cyBoYXBwZW5pbmcuIFRydXN0IHRoZSBwcm9jZXNzLCBlbWJyYWNlIHRoZSBqb3VybmV5LCBjZWxlYnJhdGUgc21hbGwgd2lucyEgI1Byb2dyZXNzICNNaW5kc2V0ICNHcm93dGhcIlxuICAgICAgICBdXG4gICAgICB9LFxuXG4gICAgICBidXNpbmVzczoge1xuICAgICAgICBwcm9mZXNzaW9uYWw6IFtcbiAgICAgICAgICBcIvCfk4ogR3JlYXQgYnVzaW5lc3NlcyBzb2x2ZSByZWFsIHByb2JsZW1zIGZvciByZWFsIHBlb3BsZS4gQmVmb3JlIGJ1aWxkaW5nIGZlYXR1cmVzLCBidWlsZCB1bmRlcnN0YW5kaW5nLiBXaGF0IHByb2JsZW0gYXJlIHlvdSBzb2x2aW5nIHRvZGF5PyAjQnVzaW5lc3MgI1N0cmF0ZWd5ICNDdXN0b21lckZpcnN0XCIsXG4gICAgICAgICAgXCLwn5K8IFJldmVudWUgaXMgdmFuaXR5LCBwcm9maXQgaXMgc2FuaXR5LCBidXQgY2FzaCBmbG93IGlzIHJlYWxpdHkuIEZvY3VzIG9uIHRoZSBtZXRyaWNzIHRoYXQgYWN0dWFsbHkgbWF0dGVyIGZvciBzdXN0YWluYWJpbGl0eS4gI0J1c2luZXNzVGlwcyAjRmluYW5jZSAjU3RyYXRlZ3lcIlxuICAgICAgICBdLFxuICAgICAgICBtb3RpdmF0aW9uYWw6IFtcbiAgICAgICAgICBcIvCfmoAgRXZlcnkgc3VjY2Vzc2Z1bCBidXNpbmVzcyBzdGFydGVkIHdpdGggc29tZW9uZSBiZWxpZXZpbmcgaW4gYW4gaW1wb3NzaWJsZSBpZGVhLiBXaGF0IGltcG9zc2libGUgaWRlYSBhcmUgeW91IHdvcmtpbmcgb24/ICNFbnRyZXByZW5ldXJzaGlwICNJbm5vdmF0aW9uICNEcmVhbXNcIlxuICAgICAgICBdXG4gICAgICB9LFxuXG4gICAgICBoZWFsdGg6IHtcbiAgICAgICAgbW90aXZhdGlvbmFsOiBbXG4gICAgICAgICAgXCLwn5KqIFlvdXIgYm9keSBjYW4gZG8gaXQuIEl0J3MgeW91ciBtaW5kIHlvdSBuZWVkIHRvIGNvbnZpbmNlLiBXaGF0IG1lbnRhbCBiYXJyaWVyIGFyZSB5b3UgYnJlYWtpbmcgdGhyb3VnaCB0b2RheT8gI0ZpdG5lc3NNb3RpdmF0aW9uICNIZWFsdGggI01pbmRzZXRcIixcbiAgICAgICAgICBcIvCfjLEgSGVhbHRoIGlzbid0IGEgZGVzdGluYXRpb27igJRpdCdzIGEgZGFpbHkgcHJhY3RpY2UuIFNtYWxsIGNob2ljZXMgY29tcG91bmQgaW50byBsaWZlLWNoYW5naW5nIHJlc3VsdHMuIFdoYXQgaGVhbHRoeSBjaG9pY2UgYXJlIHlvdSBtYWtpbmcgdG9kYXk/ICNIZWFsdGggI1dlbGxuZXNzICNIYWJpdHNcIlxuICAgICAgICBdLFxuICAgICAgICBlZHVjYXRpb25hbDogW1xuICAgICAgICAgIFwi8J+noCBEaWQgeW91IGtub3c/IEV4ZXJjaXNlIGxpdGVyYWxseSBncm93cyBuZXcgYnJhaW4gY2VsbHMhIFBoeXNpY2FsIGFjdGl2aXR5IGluY3JlYXNlcyBCRE5GLCB3aGljaCBoZWxwcyBjcmVhdGUgbmV3IG5ldXJhbCBjb25uZWN0aW9ucy4gTW92ZSB5b3VyIGJvZHksIGdyb3cgeW91ciBtaW5kISAjSGVhbHRoICNTY2llbmNlICNCcmFpblwiXG4gICAgICAgIF1cbiAgICAgIH0sXG5cbiAgICAgIG11c2ljOiB7XG4gICAgICAgIG1vdGl2YXRpb25hbDogW1xuICAgICAgICAgIFwi8J+OtSBNdXNpYyBoYXMgdGhlIHBvd2VyIHRvIGhlYWwsIGluc3BpcmUsIGFuZCB1bml0ZSB1cyBhY3Jvc3MgYWxsIGJvdW5kYXJpZXMuIFdoYXQgc29uZyBsaWZ0cyB5b3VyIHNwaXJpdHMgd2hlbiB5b3UgbmVlZCBpdCBtb3N0PyAjTXVzaWMgI0luc3BpcmF0aW9uICNIZWFsaW5nXCIsXG4gICAgICAgICAgXCLwn46kIEV2ZXJ5IGFydGlzdCdzIGpvdXJuZXkgc3RhcnRzIHdpdGggYSBzaW5nbGUgbm90ZSwgYSBzaW5nbGUgd29yZCwgYSBzaW5nbGUgZHJlYW0uIFlvdXIgdm9pY2UgbWF0dGVyc+KAlGxldCBpdCBiZSBoZWFyZCEgI011c2ljICNEcmVhbXMgI0FydGlzdExpZmVcIlxuICAgICAgICBdLFxuICAgICAgICBnZW5lcmFsOiBbXG4gICAgICAgICAgXCLwn462IEdyZWF0IG11c2ljIHRyYW5zY2VuZHMgdGltZSBhbmQgdG91Y2hlcyBzb3Vscy4gRnJvbSBjbGFzc2ljIGJhbGxhZHMgdG8gbW9kZXJuIGJlYXRzLCBldmVyeSBnZW5yZSB0ZWxscyBhIHN0b3J5LiBXaGF0J3MgeW91ciBzb3VuZHRyYWNrIHRvZGF5PyAjTXVzaWMgI0xpZmUgI1NvdW5kdHJhY2tcIixcbiAgICAgICAgICBcIvCfjrUgVGhlIGJlYXV0eSBvZiBtdXNpYyBsaWVzIGluIGl0cyBhYmlsaXR5IHRvIGV4cHJlc3Mgd2hhdCB3b3JkcyBjYW5ub3QuIFdoaWNoIGFydGlzdCdzIHZvaWNlIHNwZWFrcyB0byB5b3VyIGhlYXJ0PyAjTXVzaWMgI0Vtb3Rpb24gI0Nvbm5lY3Rpb25cIixcbiAgICAgICAgICBcIvCfjqQgTXVzaWMgaXMgdGhlIHVuaXZlcnNhbCBsYW5ndWFnZSB0aGF0IGNvbm5lY3RzIHVzIGFsbC4gT25lIHNvbmcgY2FuIGNoYW5nZSBhIG1vb2QsIGEgZGF5LCBvciBldmVuIGEgbGlmZS4gV2hhdCdzIHlvdXIgZ28tdG8gYW50aGVtPyAjTXVzaWMgI1VuaXZlcnNhbCAjUG93ZXJcIlxuICAgICAgICBdLFxuICAgICAgICBwcm9mZXNzaW9uYWw6IFtcbiAgICAgICAgICBcIvCfjrwgVGhlIG11c2ljIGluZHVzdHJ5IGNvbnRpbnVlcyB0byBldm9sdmUgd2l0aCBzdHJlYW1pbmcsIEFJLCBhbmQgbmV3IHBsYXRmb3JtcyBjaGFuZ2luZyBob3cgd2UgZGlzY292ZXIgYW5kIGNvbnN1bWUgbXVzaWMuIFdoYXQgdHJlbmRzIGV4Y2l0ZSB5b3UgbW9zdD8gI011c2ljSW5kdXN0cnkgI0lubm92YXRpb24gI1N0cmVhbWluZ1wiXG4gICAgICAgIF0sXG4gICAgICAgIGVkdWNhdGlvbmFsOiBbXG4gICAgICAgICAgXCLwn461IERpZCB5b3Uga25vdz8gTGlzdGVuaW5nIHRvIG11c2ljIHJlbGVhc2VzIGRvcGFtaW5lIGluIHRoZSBicmFpbuKAlHRoZSBzYW1lIGNoZW1pY2FsIGFzc29jaWF0ZWQgd2l0aCBlYXRpbmcgYW5kIGZhbGxpbmcgaW4gbG92ZSEgV2hhdCBtdXNpYyBtYWtlcyB5b3UgaGFwcGllc3Q/ICNNdXNpYyAjU2NpZW5jZSAjQnJhaW5cIlxuICAgICAgICBdXG4gICAgICB9XG4gICAgfTtcblxuICAgIGNvbnN0IHRvcGljVGVtcGxhdGVzID0gdGVtcGxhdGVNYXBbdG9waWNdO1xuICAgIGlmICghdG9waWNUZW1wbGF0ZXMpIHJldHVybiBbXTtcblxuICAgIGNvbnN0IHN0eWxlVGVtcGxhdGVzID0gdG9waWNUZW1wbGF0ZXNbc3R5bGVdIHx8IHRvcGljVGVtcGxhdGVzWydnZW5lcmFsJ10gfHwgW107XG4gICAgcmV0dXJuIHN0eWxlVGVtcGxhdGVzO1xuICB9XG5cbiAgcHJpdmF0ZSBnZW5lcmF0ZUZhbGxiYWNrQ29udGVudCh0b3BpYzogc3RyaW5nLCBvcmlnaW5hbElucHV0OiBzdHJpbmcpOiBzdHJpbmcge1xuICAgIC8vIFRyeSB0byBleHRyYWN0IHRoZSBhY3R1YWwgc3ViamVjdCBmcm9tIHRoZSBvcmlnaW5hbCBpbnB1dFxuICAgIGNvbnN0IGFib3V0TWF0Y2ggPSBvcmlnaW5hbElucHV0Lm1hdGNoKC9hYm91dFxccysoW14sXFwuIT9dKykvaSk7XG4gICAgY29uc3Qgc3ViamVjdCA9IGFib3V0TWF0Y2ggPyBhYm91dE1hdGNoWzFdLnRyaW0oKSA6IHRvcGljO1xuICAgIFxuICAgIGNvbnN0IHN1YmplY3RGb3JtYXR0ZWQgPSBzdWJqZWN0LmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgc3ViamVjdC5zbGljZSgxKTtcbiAgICBjb25zdCBoYXNodGFnID0gc3ViamVjdC5yZXBsYWNlKC9cXHMrL2csICcnKS5yZXBsYWNlKC9bXmEtekEtWjAtOV0vZywgJycpO1xuICAgIFxuICAgIGNvbnN0IGZhbGxiYWNrVGVtcGxhdGVzID0gW1xuICAgICAgYOKcqCAke3N1YmplY3RGb3JtYXR0ZWR9IGJyaW5ncyBzbyBtdWNoIGpveSBhbmQgaW5zcGlyYXRpb24hIFdoYXQncyB5b3VyIGZhdm9yaXRlIHRoaW5nIGFib3V0IGl0PyAjJHtoYXNodGFnfSAjTG92ZSAjUGFzc2lvbmAsXG4gICAgICBg8J+MnyBUaGVyZSdzIHNvbWV0aGluZyBzcGVjaWFsIGFib3V0ICR7c3ViamVjdEZvcm1hdHRlZH0gdGhhdCBqdXN0IGNhcHR1cmVzIHRoZSBoZWFydC4gU2hhcmUgeW91ciB0aG91Z2h0cyEgIyR7aGFzaHRhZ30gI0FtYXppbmcgI1Rob3VnaHRzYCxcbiAgICAgIGDwn5KrICR7c3ViamVjdEZvcm1hdHRlZH0gaGFzIHRoaXMgaW5jcmVkaWJsZSBhYmlsaXR5IHRvIG1ha2UgdXMgZmVlbCBhbGl2ZS4gV2hhdCBkcmF3cyB5b3UgdG8gaXQ/ICMke2hhc2h0YWd9ICNJbnNwaXJhdGlvbiAjTGlmZWAsXG4gICAgICBg8J+OiSBDZWxlYnJhdGluZyBhbGwgdGhpbmdzICR7c3ViamVjdEZvcm1hdHRlZH0hIFdoYXQgbWFrZXMgaXQgbWVhbmluZ2Z1bCB0byB5b3U/ICMke2hhc2h0YWd9ICNDZWxlYnJhdGlvbiAjTWVhbmluZ2Z1bGAsXG4gICAgICBg77+9ICR7c3ViamVjdEZvcm1hdHRlZH0gbmV2ZXIgZmFpbHMgdG8gYW1hemUhIFdoYXQncyB5b3VyIGxhdGVzdCBkaXNjb3Zlcnkgb3IgZmF2b3JpdGUgbW9tZW50PyAjJHtoYXNodGFnfSAjQW1hemluZyAjRGlzY292ZXJ5YFxuICAgIF07XG5cbiAgICByZXR1cm4gZmFsbGJhY2tUZW1wbGF0ZXNbTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogZmFsbGJhY2tUZW1wbGF0ZXMubGVuZ3RoKV07XG4gIH1cbn1cblxuLy8gRXhwb3J0IHNpbmdsZXRvbiBpbnN0YW5jZVxuZXhwb3J0IGNvbnN0IGNvbnRlbnRHZW5lcmF0b3IgPSBUd2l0dGVyQ29udGVudEdlbmVyYXRvci5nZXRJbnN0YW5jZSgpO1xuIl0sIm5hbWVzIjpbIlR3aXR0ZXJDb250ZW50R2VuZXJhdG9yIiwiZ2V0SW5zdGFuY2UiLCJpbnN0YW5jZSIsImdlbmVyYXRlQ29udGVudCIsInJlcXVlc3QiLCJ1c2VySW5wdXQiLCJpc0dlbmVyYXRpb25SZXF1ZXN0IiwiZGV0ZWN0R2VuZXJhdGlvblJlcXVlc3QiLCJjb250ZW50IiwiZGV0ZWN0ZWRUb3BpYyIsInN0eWxlIiwiY29uZmlkZW5jZSIsImV4dHJhY3RUb3BpYyIsImRldGVjdGVkU3R5bGUiLCJleHRyYWN0U3R5bGUiLCJnZW5lcmF0ZVRvcGljQ29udGVudCIsImlucHV0IiwiZ2VuZXJhdGlvbktleXdvcmRzIiwic29tZSIsImtleXdvcmQiLCJ0b0xvd2VyQ2FzZSIsImluY2x1ZGVzIiwiaW5wdXRMb3dlciIsImFib3V0TWF0Y2giLCJtYXRjaCIsInRyaW0iLCJ0b3BpY01hcCIsInRvcGljIiwia2V5d29yZHMiLCJPYmplY3QiLCJlbnRyaWVzIiwib3JpZ2luYWxJbnB1dCIsInRlbXBsYXRlcyIsImdldFRlbXBsYXRlc0ZvclRvcGljIiwibGVuZ3RoIiwiZ2VuZXJhdGVGYWxsYmFja0NvbnRlbnQiLCJ0ZW1wbGF0ZSIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInRlbXBsYXRlTWFwIiwiamFwYW4iLCJtb3RpdmF0aW9uYWwiLCJlZHVjYXRpb25hbCIsImdlbmVyYWwiLCJ0ZWNobm9sb2d5IiwicHJvZmVzc2lvbmFsIiwibW90aXZhdGlvbiIsImJ1c2luZXNzIiwiaGVhbHRoIiwibXVzaWMiLCJ0b3BpY1RlbXBsYXRlcyIsInN0eWxlVGVtcGxhdGVzIiwic3ViamVjdCIsInN1YmplY3RGb3JtYXR0ZWQiLCJjaGFyQXQiLCJ0b1VwcGVyQ2FzZSIsInNsaWNlIiwiaGFzaHRhZyIsInJlcGxhY2UiLCJmYWxsYmFja1RlbXBsYXRlcyIsImNvbnRlbnRHZW5lcmF0b3IiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/twitter-tools/contentGenerator.ts\n"));

/***/ })

}]);