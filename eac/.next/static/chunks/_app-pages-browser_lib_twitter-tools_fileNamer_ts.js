"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["_app-pages-browser_lib_twitter-tools_fileNamer_ts"],{

/***/ "(app-pages-browser)/./lib/twitter-tools/fileNamer.ts":
/*!****************************************!*\
  !*** ./lib/twitter-tools/fileNamer.ts ***!
  \****************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TwitterFileNamer: () => (/* binding */ TwitterFileNamer),\n/* harmony export */   fileNamer: () => (/* binding */ fileNamer)\n/* harmony export */ });\n// Twitter File Naming System\n// Generates unique, descriptive filenames based on content and prevents duplicates\nclass TwitterFileNamer {\n    static getInstance() {\n        if (!TwitterFileNamer.instance) {\n            TwitterFileNamer.instance = new TwitterFileNamer();\n        }\n        return TwitterFileNamer.instance;\n    }\n    generateFileName(options) {\n        const { content, topic, style, maxWords = 3 } = options;\n        // Primary strategy: Extract meaningful words from content\n        let baseFileName = this.extractMeaningfulWords(content, maxWords);\n        // Secondary strategy: Use topic if content extraction fails\n        if (!baseFileName && topic && topic !== 'general') {\n            baseFileName = this.topicToFileName(topic, style);\n        }\n        // Fallback strategy: Time-based naming\n        if (!baseFileName) {\n            baseFileName = this.generateTimestampName();\n        }\n        // Ensure uniqueness\n        const uniqueName = this.ensureUniqueness(baseFileName);\n        // Track used name\n        this.usedNames.add(uniqueName);\n        return {\n            name: uniqueName,\n            isUnique: uniqueName === baseFileName,\n            originalAttempt: baseFileName\n        };\n    }\n    extractMeaningfulWords(content, maxWords) {\n        // Clean the content\n        const cleaned = content.toLowerCase().replace(/[^\\w\\s]/g, ' ') // Remove special characters except emojis\n        .replace(/https?:\\/\\/[^\\s]+/g, '') // Remove URLs\n        .replace(/#\\w+/g, '') // Remove hashtags\n        .replace(/\\s+/g, ' ') // Normalize whitespace\n        .trim();\n        // Define stop words to filter out\n        const stopWords = new Set([\n            'the',\n            'and',\n            'for',\n            'with',\n            'that',\n            'this',\n            'are',\n            'you',\n            'your',\n            'can',\n            'will',\n            'our',\n            'today',\n            'what',\n            'how',\n            'when',\n            'where',\n            'why',\n            'isnt',\n            'about',\n            'there',\n            'much',\n            'explore',\n            'every',\n            'topic',\n            'has',\n            'fascinating',\n            'depths',\n            'waiting',\n            'discovered',\n            'aspect',\n            'interests',\n            'most',\n            'discovery',\n            'learning',\n            'theres',\n            'so'\n        ]);\n        // Extract meaningful words\n        const words = cleaned.split(' ').filter((word)=>word.length > 2 && !stopWords.has(word) && !word.match(/^\\d+$/) // No pure numbers\n        ).slice(0, maxWords);\n        if (words.length === 0) return '';\n        // Create filename\n        const fileName = words.join('-') + '-post';\n        return fileName;\n    }\n    topicToFileName(topic, style) {\n        const topicMap = {\n            japan: [\n                'japan',\n                'japanese',\n                'tokyo',\n                'kyoto',\n                'nippon'\n            ],\n            technology: [\n                'tech',\n                'coding',\n                'innovation',\n                'digital',\n                'software'\n            ],\n            business: [\n                'business',\n                'strategy',\n                'growth',\n                'success',\n                'venture'\n            ],\n            health: [\n                'health',\n                'fitness',\n                'wellness',\n                'strong',\n                'vitality'\n            ],\n            motivation: [\n                'motivation',\n                'inspiration',\n                'goals',\n                'success',\n                'mindset'\n            ],\n            travel: [\n                'travel',\n                'journey',\n                'adventure',\n                'explore',\n                'wanderlust'\n            ],\n            food: [\n                'food',\n                'cuisine',\n                'flavor',\n                'taste',\n                'culinary'\n            ],\n            education: [\n                'learning',\n                'knowledge',\n                'education',\n                'wisdom',\n                'study'\n            ],\n            productivity: [\n                'productivity',\n                'efficiency',\n                'focus',\n                'workflow',\n                'optimal'\n            ],\n            creativity: [\n                'creativity',\n                'artistic',\n                'imagination',\n                'design',\n                'innovative'\n            ]\n        };\n        const variations = topicMap[topic] || [\n            topic\n        ];\n        const selectedWord = variations[Math.floor(Math.random() * variations.length)];\n        const stylePrefix = style && style !== 'general' ? \"\".concat(style, \"-\") : '';\n        return \"\".concat(stylePrefix).concat(selectedWord, \"-post\");\n    }\n    generateTimestampName() {\n        const now = new Date();\n        const timeStr = now.toISOString().slice(0, 16).replace(/[:-]/g, '').replace('T', '-');\n        return \"twitter-post-\".concat(timeStr);\n    }\n    ensureUniqueness(baseName) {\n        if (!this.usedNames.has(baseName)) {\n            return baseName;\n        }\n        // Try numbered variations\n        for(let i = 2; i <= 10; i++){\n            const variant = \"\".concat(baseName, \"-\").concat(i);\n            if (!this.usedNames.has(variant)) {\n                return variant;\n            }\n        }\n        // Final fallback with timestamp\n        const timestamp = Date.now().toString().slice(-6);\n        return \"\".concat(baseName, \"-\").concat(timestamp);\n    }\n    // Method to clear used names (useful for testing or reset)\n    clearUsedNames() {\n        this.usedNames.clear();\n    }\n    // Method to check if a name has been used\n    isNameUsed(name) {\n        return this.usedNames.has(name);\n    }\n    // Get all used names (for debugging)\n    getUsedNames() {\n        return Array.from(this.usedNames);\n    }\n    constructor(){\n        this.usedNames = new Set();\n    }\n}\n// Export singleton instance\nconst fileNamer = TwitterFileNamer.getInstance();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/twitter-tools/fileNamer.ts\n"));

/***/ })

}]);