"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./store/agents/directorAgent.ts":
/*!***************************************!*\
  !*** ./store/agents/directorAgent.ts ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DirectorAgent: () => (/* binding */ DirectorAgent),\n/* harmony export */   directorAgent: () => (/* binding */ directorAgent)\n/* harmony export */ });\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ \"(app-pages-browser)/./store/agents/base.ts\");\n// Campaign Director Agent\n// Orchestrates large-scale marketing campaigns with 100+ posts across multiple platforms\n\nclass DirectorAgent extends _base__WEBPACK_IMPORTED_MODULE_0__.BaseAgent {\n    async execute(tool, input, convexMutations, sessionId) {\n        console.log('🔥 Director Agent: Execute called with input:', input);\n        console.log('🔥 Director Agent: Session ID:', sessionId);\n        if (!sessionId) {\n            return 'Session ID is required for campaign orchestration';\n        }\n        // Initialize or get session\n        const existingSession = this.sessions.has(sessionId);\n        console.log('🔥 Director Agent: Existing session found:', existingSession);\n        if (!this.sessions.has(sessionId)) {\n            console.log('🔥 Director Agent: Creating new session');\n            this.sessions.set(sessionId, {\n                currentStep: 'campaign-name',\n                activeCampaigns: new Map()\n            });\n        }\n        const session = this.sessions.get(sessionId);\n        console.log('🔥 Director Agent: Current session step:', session.currentStep);\n        console.log('🔥 Director Agent: Has instructions file:', !!session.instructionsFile);\n        // If session is already complete, return success message\n        if (session.currentStep === 'complete') {\n            return 'Campaign has been successfully generated and scheduled! Use `/director` to start a new campaign.';\n        }\n        // Step 1: Request campaign name and create project\n        if (session.currentStep === 'campaign-name') {\n            // Check if this is a campaign name input\n            if (input && input.trim() && !input.includes('Selected file:') && !input.startsWith('/')) {\n                const campaignName = input.trim();\n                console.log('🔥 Director Agent: Creating campaign project:', campaignName);\n                try {\n                    var _convexMutations_createProject;\n                    // Create the project using Convex mutations\n                    const project = await ((_convexMutations_createProject = convexMutations.createProject) === null || _convexMutations_createProject === void 0 ? void 0 : _convexMutations_createProject.call(convexMutations, {\n                        name: campaignName,\n                        description: \"Marketing campaign project: \".concat(campaignName),\n                        status: 'active'\n                    }));\n                    if (project) {\n                        session.campaignProjectId = project._id;\n                        session.campaignProjectName = campaignName;\n                        session.currentStep = 'instructions';\n                        console.log('🔥 Director Agent: Project created, moving to instructions step');\n                        // Continue to instructions step\n                        if (convexMutations.storeChatMessage) {\n                            await convexMutations.storeChatMessage({\n                                role: 'assistant',\n                                content: '✅ Campaign project \"'.concat(campaignName, '\" created successfully!\\n\\nNow, please select an instructions file that contains your campaign guidelines, brand voice, or marketing strategy.\\n\\nWhat you can include in your instructions file:\\n- Brand voice and tone guidelines\\n- Target audience information\\n- Campaign objectives and KPIs\\n- Content themes and messaging\\n- Platform-specific requirements\\n- Hashtag strategies\\n- Visual guidelines\\n\\nSelect your instructions file:'),\n                                sessionId,\n                                interactiveComponent: {\n                                    type: 'file_selector',\n                                    status: 'pending',\n                                    data: {\n                                        fileType: 'instructions',\n                                        filterByExtension: [\n                                            '.md',\n                                            '.txt'\n                                        ],\n                                        placeholder: 'Select campaign instructions file...'\n                                    }\n                                }\n                            });\n                        }\n                        return 'Campaign project \"'.concat(campaignName, '\" created! Please select an instructions file to continue.');\n                    } else {\n                        return 'Failed to create campaign project. Please try again.';\n                    }\n                } catch (error) {\n                    console.error('🔥 Director Agent: Error creating project:', error);\n                    return 'Error creating campaign project. Please try again with a different name.';\n                }\n            } else {\n                // Show campaign name input prompt\n                if (convexMutations.storeChatMessage) {\n                    await convexMutations.storeChatMessage({\n                        role: 'assistant',\n                        content: '🎬 **Campaign Director Agent**\\n\\nI will help you orchestrate a comprehensive marketing campaign with 100+ posts across multiple platforms.\\n\\n**Step 1: Create Campaign Project**\\n\\nFirst, let\\'s create a dedicated project folder for your campaign. This will organize all your generated content, schedules, and assets.\\n\\nWhat would you like to name your campaign project?',\n                        sessionId,\n                        interactiveComponent: {\n                            type: 'file_name_input',\n                            status: 'pending',\n                            data: {\n                                placeholder: 'Enter campaign name (e.g., \"Q4 Product Launch\", \"Holiday Marketing 2025\")',\n                                fileType: 'project'\n                            }\n                        }\n                    });\n                }\n                return 'Please enter a name for your campaign project.';\n            }\n        }\n        // Handle file selection input AFTER campaign name step\n        if (input.includes('Selected file:') && session.currentStep === 'instructions') {\n            console.log('🔥 Director Agent: Processing file selection:', input);\n            console.log('🔥 Director Agent: Session step:', session.currentStep);\n            const fileName = input.replace('Selected file:', '').trim();\n            console.log('🔥 Director Agent: Extracted filename:', fileName);\n            session.instructionsFile = fileName;\n            // Fetch the file content\n            try {\n                var _convexMutations_getAllFiles;\n                const files = await ((_convexMutations_getAllFiles = convexMutations.getAllFiles) === null || _convexMutations_getAllFiles === void 0 ? void 0 : _convexMutations_getAllFiles.call(convexMutations)) || [];\n                console.log('🔥 Director Agent: Available files count:', files.length);\n                console.log('🔥 Director Agent: Available file names:', files.map((f)=>f.name));\n                // Try to find the file with or without extension\n                let instructionFile = files.find((f)=>f.name === fileName);\n                if (!instructionFile && !fileName.includes('.')) {\n                    // Try with .md extension\n                    instructionFile = files.find((f)=>f.name === fileName + '.md');\n                    console.log('🔥 Director Agent: Trying with .md extension:', fileName + '.md');\n                }\n                console.log('🔥 Director Agent: Found instruction file:', !!instructionFile);\n                if (instructionFile) {\n                    session.instructionsContent = instructionFile.content;\n                    session.instructionsFile = fileName; // Make sure this is set\n                    session.currentStep = 'complete'; // Set to complete after generation\n                    console.log('🔥 Director Agent: Updated session step to complete');\n                    // Set default campaign settings based on instructions\n                    session.campaignName = 'EAC Marketing Campaign';\n                    session.duration = 4; // weeks\n                    session.platforms = [\n                        'twitter',\n                        'linkedin',\n                        'instagram',\n                        'facebook'\n                    ];\n                    session.postsPerDay = 3;\n                    session.campaignGoals = 'Brand awareness and lead generation based on instructions';\n                    // Immediately generate campaign\n                    const result = await this.generateCampaign(session, convexMutations, sessionId);\n                    console.log('🔥 Director Agent: Campaign generation result:', result);\n                    return result;\n                } else {\n                    console.log('🔥 Director Agent: File not found in files array');\n                    return 'File \"'.concat(fileName, '\" not found. Please select a valid instructions file.');\n                }\n            } catch (error) {\n                console.error('🔥 Director Agent: Error loading instructions file:', error);\n                return 'Error loading instructions file. Please try again.';\n            }\n        }\n        // Step 1: Request instructions file (only if we haven't processed file selection and not complete)\n        if (session.currentStep === 'instructions' && !session.instructionsFile) {\n            if (convexMutations.storeChatMessage) {\n                await convexMutations.storeChatMessage({\n                    role: 'assistant',\n                    content: 'Campaign Director Agent\\n\\nI will help you orchestrate a comprehensive marketing campaign with 100+ posts across multiple platforms.\\n\\nStep 1: Select Instructions File\\n\\nFirst, I need to understand your campaign strategy. Please select an instructions file that contains your campaign guidelines, brand voice, or marketing strategy.\\n\\nWhat you can include in your instructions file:\\n- Brand voice and tone guidelines\\n- Target audience information\\n- Campaign objectives and KPIs\\n- Content themes and messaging\\n- Platform-specific requirements\\n- Hashtag strategies\\n- Visual guidelines\\n\\nSelect your instructions file:',\n                    sessionId,\n                    interactiveComponent: {\n                        type: 'file_selector',\n                        status: 'pending',\n                        data: {\n                            fileType: 'instructions',\n                            filterByExtension: [\n                                '.md',\n                                '.txt'\n                            ],\n                            placeholder: 'Select campaign instructions file...'\n                        }\n                    }\n                });\n            }\n            return 'Please select an instructions file to get started with your campaign.';\n        }\n        // Handle campaign configuration\n        if (session.currentStep === 'campaign-setup') {\n            if (input.toLowerCase().includes('generate default campaign') || input.toLowerCase().includes('default')) {\n                // Use default campaign settings\n                session.campaignName = 'EAC Marketing Campaign';\n                session.duration = 4; // weeks\n                session.platforms = [\n                    'twitter',\n                    'linkedin',\n                    'instagram',\n                    'facebook'\n                ];\n                session.postsPerDay = 3;\n                session.campaignGoals = 'Brand awareness and lead generation';\n                session.currentStep = 'generating';\n                return await this.generateCampaign(session, convexMutations, sessionId);\n            } else {\n                // Parse custom campaign settings from user input\n                return this.parseCampaignSettings(input, session);\n            }\n        }\n        // Handle batch generation status updates\n        if (input.includes('batch completed') || input.includes('posts generated')) {\n            return this.handleBatchCompletion(input, session);\n        }\n        return 'Campaign orchestration in progress. Use /director to start a new campaign.';\n    }\n    parseCampaignSettings(input, session) {\n        var _session_platforms;\n        // Extract campaign settings from user input\n        const lines = input.split('\\n').map((line)=>line.trim()).filter((line)=>line.length > 0);\n        for (const line of lines){\n            const lower = line.toLowerCase();\n            if (lower.includes('name:') || lower.startsWith('1.')) {\n                var _line_split_;\n                session.campaignName = ((_line_split_ = line.split(':')[1]) === null || _line_split_ === void 0 ? void 0 : _line_split_.trim()) || line.replace(/^1\\./, '').trim();\n            } else if (lower.includes('duration:') || lower.includes('weeks') || lower.startsWith('2.')) {\n                const match = line.match(/(\\d+)/);\n                if (match) session.duration = parseInt(match[1]);\n            } else if (lower.includes('platform') || lower.startsWith('3.')) {\n                const platforms = line.toLowerCase().match(/(twitter|linkedin|facebook|instagram)/g);\n                if (platforms) session.platforms = platforms;\n            } else if (lower.includes('posts per day') || lower.startsWith('4.')) {\n                const match = line.match(/(\\d+)/);\n                if (match) session.postsPerDay = parseInt(match[1]);\n            } else if (lower.includes('goals:') || lower.startsWith('5.')) {\n                var _line_split_1;\n                session.campaignGoals = ((_line_split_1 = line.split(':')[1]) === null || _line_split_1 === void 0 ? void 0 : _line_split_1.trim()) || line.replace(/^5\\./, '').trim();\n            }\n        }\n        // Validate required fields\n        if (!session.campaignName || !session.duration || !((_session_platforms = session.platforms) === null || _session_platforms === void 0 ? void 0 : _session_platforms.length)) {\n            return 'Please provide all required campaign details:\\n\\n1. Campaign Name\\n2. Duration (weeks)\\n3. Platforms\\n4. Posts per day\\n5. Goals\\n\\nOr type \"generate default campaign\" to use standard settings.';\n        }\n        session.currentStep = 'generating';\n        return \"Campaign Configuration Set:\\n\\nName: \".concat(session.campaignName, \"\\nDuration: \").concat(session.duration, \" weeks\\nPlatforms: \").concat(session.platforms.join(', '), \"\\nPosts per day: \").concat(session.postsPerDay, \"\\nGoals: \").concat(session.campaignGoals, \"\\n\\nGenerating your comprehensive campaign...\");\n    }\n    async generateCampaign(session, convexMutations, sessionId) {\n        try {\n            // Calculate total posts needed\n            const totalDays = (session.duration || 4) * 7;\n            const postsPerDay = session.postsPerDay || 3;\n            const totalPosts = totalDays * postsPerDay;\n            const platforms = session.platforms || [\n                'twitter',\n                'linkedin',\n                'instagram',\n                'facebook'\n            ];\n            // Create campaign in database\n            let campaignId;\n            try {\n                var _convexMutations_createCampaign;\n                const campaign = await ((_convexMutations_createCampaign = convexMutations.createCampaign) === null || _convexMutations_createCampaign === void 0 ? void 0 : _convexMutations_createCampaign.call(convexMutations, {\n                    name: session.campaignName || 'Generated Campaign',\n                    description: \"Auto-generated campaign: \".concat(session.campaignGoals || 'Marketing campaign'),\n                    platforms,\n                    totalPosts,\n                    startDate: new Date().toISOString().split('T')[0],\n                    endDate: new Date(Date.now() + (session.duration || 4) * 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n                    template: session.instructionsContent || ''\n                }));\n                campaignId = (campaign === null || campaign === void 0 ? void 0 : campaign._id) || \"campaign_\".concat(Date.now());\n            } catch (error) {\n                console.log('Campaign creation not available, using fallback ID');\n                campaignId = \"campaign_\".concat(Date.now());\n            }\n            // Generate posts in batches\n            const allPosts = await this.generateBatchesAsync(totalPosts, platforms, session.instructionsContent || '', campaignId, session.duration || 4);\n            // Create batches for processing\n            const batches = this.createBatches(allPosts, campaignId);\n            // Store batches in session\n            batches.forEach((batch)=>{\n                session.activeCampaigns.set(batch.campaignId, batch);\n            });\n            // Start with progress indicator\n            if (convexMutations.storeChatMessage) {\n                await convexMutations.storeChatMessage({\n                    role: 'assistant',\n                    content: \"Campaign Generation Complete!\\n\\nGenerated \".concat(totalPosts, \" posts across \").concat(platforms.length, \" platforms\\nOrganized into \").concat(batches.length, \" processing batches\\nStarting content creation and scheduling...\\n\\nCampaign ID: \").concat(campaignId, \"\\nTotal Posts: \").concat(totalPosts, \"\\nPlatforms: \").concat(platforms.join(', '), \"\\nDuration: \").concat(session.duration, \" weeks\"),\n                    sessionId,\n                    processIndicator: {\n                        type: 'continuing',\n                        processType: 'Processing Campaign Batches',\n                        color: 'blue'\n                    }\n                });\n            }\n            // Process all batches with progress updates\n            for(let i = 0; i < batches.length; i++){\n                const batch = batches[i];\n                console.log(\"\\uD83D\\uDD25 Director Agent: Processing batch \".concat(i + 1, \"/\").concat(batches.length));\n                // Update progress\n                if (convexMutations.storeChatMessage) {\n                    await convexMutations.storeChatMessage({\n                        role: 'assistant',\n                        content: \"Processing batch \".concat(i + 1, \" of \").concat(batches.length, \"... (\").concat(batch.posts.length, \" posts)\"),\n                        sessionId,\n                        processIndicator: {\n                            type: 'continuing',\n                            processType: \"Batch \".concat(i + 1, \"/\").concat(batches.length),\n                            color: 'blue'\n                        }\n                    });\n                }\n                await this.processBatch(batch, convexMutations, sessionId);\n                // Small delay between batches to prevent overwhelming the database\n                if (i < batches.length - 1) {\n                    await new Promise((resolve)=>setTimeout(resolve, 1000));\n                }\n            }\n            // Final success message\n            if (convexMutations.storeChatMessage) {\n                await convexMutations.storeChatMessage({\n                    role: 'assistant',\n                    content: \"✅ Campaign Successfully Created!\\n\\n\\uD83D\\uDCCA **Campaign Summary:**\\n- **Campaign ID:** \".concat(campaignId, \"\\n- **Total Posts:** \").concat(totalPosts, \"\\n- **Platforms:** \").concat(platforms.join(', '), \"\\n- **Duration:** \").concat(session.duration, \" weeks\\n- **Batches Processed:** \").concat(batches.length, \"\\n\\n\\uD83D\\uDDD3️ All posts have been scheduled and saved to the database. Use the social media dashboard to review and manage your campaign.\"),\n                    sessionId\n                });\n            }\n            session.currentStep = 'complete';\n            return 'Campaign processing completed successfully!';\n        } catch (error) {\n            console.error('Campaign generation error:', error);\n            return \"Error generating campaign: \".concat(error instanceof Error ? error.message : 'Unknown error');\n        }\n    }\n    async generateBatchesAsync(totalPosts, platforms, instructions, campaignId, duration) {\n        const posts = [];\n        const days = [\n            'Monday',\n            'Tuesday',\n            'Wednesday',\n            'Thursday',\n            'Friday',\n            'Saturday',\n            'Sunday'\n        ];\n        for(let i = 0; i < totalPosts; i++){\n            const platform = platforms[i % platforms.length];\n            const week = Math.floor(i / (totalPosts / duration)) + 1;\n            const dayIndex = i % 7;\n            const day = days[dayIndex];\n            // Determine optimal posting time based on platform\n            const time = this.getOptimalPostTime(platform, dayIndex);\n            // Calculate post date\n            const startDate = new Date();\n            const postDate = new Date(startDate);\n            postDate.setDate(startDate.getDate() + Math.floor(i / platforms.length));\n            // Determine campaign phase based on week\n            const phases = [\n                'awareness',\n                'consideration',\n                'conversion',\n                'retention'\n            ];\n            const phaseIndex = Math.floor((week - 1) / (duration / phases.length));\n            const phase = phases[Math.min(phaseIndex, phases.length - 1)];\n            // Determine content type cyclically\n            const contentTypes = [\n                'educational',\n                'promotional',\n                'engagement',\n                'announcement'\n            ];\n            const contentType = contentTypes[i % contentTypes.length];\n            // Generate content\n            const content = this.generatePlatformContent(platform, phase, contentType, instructions, week, day);\n            posts.push({\n                platform,\n                content,\n                scheduledDate: postDate.toISOString().split('T')[0],\n                scheduledTime: time,\n                metadata: {\n                    week,\n                    dayOfWeek: day,\n                    campaignPhase: phase,\n                    contentType,\n                    hashtags: this.generateHashtags(platform, phase, contentType),\n                    campaignId,\n                    batchId: \"batch_\".concat(Math.floor(i / this.BATCH_SIZE))\n                }\n            });\n        }\n        return posts;\n    }\n    getOptimalPostTime(platform, dayIndex) {\n        const times = {\n            twitter: [\n                '09:00',\n                '12:00',\n                '15:00',\n                '18:00'\n            ],\n            linkedin: [\n                '08:00',\n                '12:00',\n                '17:00'\n            ],\n            instagram: [\n                '11:00',\n                '14:00',\n                '17:00',\n                '19:00'\n            ],\n            facebook: [\n                '09:00',\n                '13:00',\n                '15:00'\n            ]\n        };\n        const platformTimes = times[platform] || times.twitter;\n        return platformTimes[dayIndex % platformTimes.length];\n    }\n    generatePlatformContent(platform, phase, contentType, instructions, week, day) {\n        const brandVoice = this.extractBrandVoice(instructions);\n        const audience = this.extractAudience(instructions);\n        const content = \"\".concat(brandVoice, \" content for \").concat(audience, \" - Week \").concat(week, \", \").concat(day, \". Phase: \").concat(phase, \", Type: \").concat(contentType, \". Platform: \").concat(platform);\n        // Platform-specific formatting\n        switch(platform){\n            case 'twitter':\n                return content.length > 250 ? content.substring(0, 247) + '...' : content;\n            case 'linkedin':\n                return \"\".concat(content, \"\\n\\n#LinkedInEngagement #ProfessionalGrowth\");\n            case 'instagram':\n                return \"\".concat(content, \" ✨\\n\\n#InstagramBusiness #VisualContent\");\n            case 'facebook':\n                return \"\".concat(content, \"\\n\\nWhat do you think? Share your thoughts below! \\uD83D\\uDC47\");\n            default:\n                return content;\n        }\n    }\n    extractBrandVoice(instructions) {\n        const voiceKeywords = [\n            'professional',\n            'friendly',\n            'innovative',\n            'trusted',\n            'expert',\n            'reliable'\n        ];\n        const lowerInstructions = instructions.toLowerCase();\n        for (const keyword of voiceKeywords){\n            if (lowerInstructions.includes(keyword)) {\n                return keyword.charAt(0).toUpperCase() + keyword.slice(1);\n            }\n        }\n        return 'Professional';\n    }\n    extractAudience(instructions) {\n        const audienceKeywords = [\n            'businesses',\n            'professionals',\n            'teams',\n            'companies',\n            'organizations',\n            'users'\n        ];\n        const lowerInstructions = instructions.toLowerCase();\n        for (const keyword of audienceKeywords){\n            if (lowerInstructions.includes(keyword)) {\n                return keyword;\n            }\n        }\n        return 'professionals';\n    }\n    generateHashtags(platform, phase, contentType) {\n        const baseHashtags = [\n            'marketing',\n            'business',\n            'growth'\n        ];\n        const phaseHashtags = {\n            awareness: [\n                'brandawareness',\n                'introduction'\n            ],\n            consideration: [\n                'solutions',\n                'evaluation'\n            ],\n            conversion: [\n                'getstarted',\n                'action'\n            ],\n            retention: [\n                'community',\n                'success'\n            ]\n        };\n        const contentHashtags = {\n            educational: [\n                'tips',\n                'learning'\n            ],\n            promotional: [\n                'offer',\n                'featured'\n            ],\n            engagement: [\n                'discussion',\n                'question'\n            ],\n            announcement: [\n                'news',\n                'update'\n            ]\n        };\n        return [\n            ...baseHashtags,\n            ...phaseHashtags[phase],\n            ...contentHashtags[contentType]\n        ].slice(0, 5);\n    }\n    createBatches(posts, campaignId) {\n        const batches = [];\n        for(let i = 0; i < posts.length; i += this.BATCH_SIZE){\n            const batchPosts = posts.slice(i, i + this.BATCH_SIZE);\n            batches.push({\n                campaignId: \"\".concat(campaignId, \"_batch_\").concat(batches.length),\n                posts: batchPosts,\n                processingStatus: 'pending',\n                processedCount: 0,\n                totalCount: batchPosts.length\n            });\n        }\n        return batches;\n    }\n    async processBatch(batch, convexMutations, sessionId) {\n        batch.processingStatus = 'processing';\n        try {\n            const postPromises = batch.posts.map(async (post)=>{\n                try {\n                    await convexMutations.upsertPost({\n                        fileName: \"\".concat(post.platform, \"_\").concat(post.metadata.week, \"_\").concat(post.metadata.dayOfWeek, \"_\").concat(Date.now()),\n                        fileType: post.platform,\n                        content: post.content,\n                        title: \"Week \".concat(post.metadata.week, \" - \").concat(post.metadata.campaignPhase),\n                        platformData: JSON.stringify({\n                            scheduledDate: post.scheduledDate,\n                            scheduledTime: post.scheduledTime,\n                            hashtags: post.metadata.hashtags,\n                            campaignId: post.metadata.campaignId,\n                            batchId: post.metadata.batchId,\n                            week: post.metadata.week,\n                            dayOfWeek: post.metadata.dayOfWeek,\n                            campaignPhase: post.metadata.campaignPhase,\n                            contentType: post.metadata.contentType\n                        }),\n                        status: 'scheduled',\n                        scheduledFor: new Date(\"\".concat(post.scheduledDate, \"T\").concat(post.scheduledTime)).getTime()\n                    });\n                    batch.processedCount++;\n                } catch (error) {\n                    console.error('Error processing post:', error);\n                }\n            });\n            await Promise.all(postPromises);\n            batch.processingStatus = 'completed';\n        } catch (error) {\n            console.error('Batch processing error:', error);\n            batch.processingStatus = 'failed';\n        }\n    }\n    handleBatchCompletion(input, session) {\n        const completedBatches = Array.from(session.activeCampaigns.values()).filter((batch)=>batch.processingStatus === 'completed');\n        const totalBatches = session.activeCampaigns.size;\n        const totalProcessed = completedBatches.reduce((sum, batch)=>sum + batch.processedCount, 0);\n        if (completedBatches.length === totalBatches) {\n            session.currentStep = 'complete';\n            return \"Campaign Complete!\\n\\nAll \".concat(totalBatches, \" batches processed successfully.\\nTotal posts created: \").concat(totalProcessed, \"\\nCampaign: \").concat(session.campaignName, \"\\n\\nYour comprehensive marketing campaign is now scheduled and ready!\");\n        }\n        return \"Progress Update:\\nCompleted: \".concat(completedBatches.length, \"/\").concat(totalBatches, \" batches\\nPosts processed: \").concat(totalProcessed, \"\\nContinuing campaign generation...\");\n    }\n    constructor(...args){\n        super(...args), this.id = 'director', this.name = 'Campaign Director', this.description = 'Orchestrates large-scale marketing campaigns with 100+ posts across multiple platforms. Integrates instruction files for brand guidelines and generates comprehensive content strategies.', this.icon = '🎬', this.sessions = new Map(), this.BATCH_SIZE = 10, this.MAX_CONCURRENT_BATCHES = 3, this.tools = [\n            {\n                id: 'orchestrate-campaign',\n                name: 'Orchestrate Campaign',\n                command: '/director',\n                description: 'Create and schedule a complete marketing campaign with 100+ posts across multiple platforms',\n                parameters: []\n            }\n        ];\n    }\n}\nconst directorAgent = new DirectorAgent();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3N0b3JlL2FnZW50cy9kaXJlY3RvckFnZW50LnRzIiwibWFwcGluZ3MiOiI7Ozs7OztBQUFBLDBCQUEwQjtBQUMxQix5RkFBeUY7QUFFM0M7QUEwQ3ZDLE1BQU1DLHNCQUFzQkQsNENBQVNBO0lBb0IxQyxNQUFNRSxRQUFRQyxJQUFlLEVBQUVDLEtBQWEsRUFBRUMsZUFBZ0MsRUFBRUMsU0FBa0IsRUFBbUI7UUFDbkhDLFFBQVFDLEdBQUcsQ0FBQyxpREFBaURKO1FBQzdERyxRQUFRQyxHQUFHLENBQUMsa0NBQWtDRjtRQUU5QyxJQUFJLENBQUNBLFdBQVc7WUFDZCxPQUFPO1FBQ1Q7UUFFQSw0QkFBNEI7UUFDNUIsTUFBTUcsa0JBQWtCLElBQUksQ0FBQ0MsUUFBUSxDQUFDQyxHQUFHLENBQUNMO1FBQzFDQyxRQUFRQyxHQUFHLENBQUMsOENBQThDQztRQUUxRCxJQUFJLENBQUMsSUFBSSxDQUFDQyxRQUFRLENBQUNDLEdBQUcsQ0FBQ0wsWUFBWTtZQUNqQ0MsUUFBUUMsR0FBRyxDQUFDO1lBQ1osSUFBSSxDQUFDRSxRQUFRLENBQUNFLEdBQUcsQ0FBQ04sV0FBVztnQkFDM0JPLGFBQWE7Z0JBQ2JDLGlCQUFpQixJQUFJQztZQUN2QjtRQUNGO1FBRUEsTUFBTUMsVUFBVSxJQUFJLENBQUNOLFFBQVEsQ0FBQ08sR0FBRyxDQUFDWDtRQUNsQ0MsUUFBUUMsR0FBRyxDQUFDLDRDQUE0Q1EsUUFBUUgsV0FBVztRQUMzRU4sUUFBUUMsR0FBRyxDQUFDLDZDQUE2QyxDQUFDLENBQUNRLFFBQVFFLGdCQUFnQjtRQUVuRix5REFBeUQ7UUFDekQsSUFBSUYsUUFBUUgsV0FBVyxLQUFLLFlBQVk7WUFDdEMsT0FBTztRQUNUO1FBRUEsbURBQW1EO1FBQ25ELElBQUlHLFFBQVFILFdBQVcsS0FBSyxpQkFBaUI7WUFDM0MseUNBQXlDO1lBQ3pDLElBQUlULFNBQVNBLE1BQU1lLElBQUksTUFBTSxDQUFDZixNQUFNZ0IsUUFBUSxDQUFDLHFC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LE1BQU03RixNQUFNeUUsY0FBYyxFQUFFO1FBRTNGLElBQUlZLGlCQUFpQjVILE1BQU0sS0FBS2dJLGNBQWM7WUFDNUM3SixRQUFRSCxXQUFXLEdBQUc7WUFDdEIsT0FBTyw2QkFBbUdrSyxPQUF0RUYsY0FBYSwyREFBc0Y3SixPQUE3QitKLGdCQUFlLGdCQUFtQyxPQUFyQi9KLFFBQVFNLFlBQVksRUFBQztRQUM5SjtRQUVBLE9BQU8sZ0NBQTJEdUosT0FBM0JKLGlCQUFpQjVILE1BQU0sRUFBQyxLQUE2Q2tJLE9BQTFDRixjQUFhLCtCQUE0QyxPQUFmRSxnQkFBZTtJQUM3SDs7UUEzaUJLLHFCQUNMRyxLQUFLLGlCQUNMekosT0FBTywwQkFDUEMsY0FBYyxrTUFDZHlKLE9BQU8sV0FFQ3pLLFdBQXlDLElBQUlLLFlBQ3BDOEcsYUFBYSxTQUNidUQseUJBQXlCLFFBRTFDQyxRQUFxQjtZQUNuQjtnQkFDRUgsSUFBSTtnQkFDSnpKLE1BQU07Z0JBQ042SixTQUFTO2dCQUNUNUosYUFBYTtnQkFDYjZKLFlBQVksRUFBRTtZQUNoQjtTQUNEOztBQTBoQkg7QUFFTyxNQUFNQyxnQkFBZ0IsSUFBSXZMLGdCQUFnQiIsInNvdXJjZXMiOlsiL1VzZXJzL21hdHRoZXdzaW1vbi9Qcm9qZWN0cy9lYWMvZWFjL3N0b3JlL2FnZW50cy9kaXJlY3RvckFnZW50LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENhbXBhaWduIERpcmVjdG9yIEFnZW50XG4vLyBPcmNoZXN0cmF0ZXMgbGFyZ2Utc2NhbGUgbWFya2V0aW5nIGNhbXBhaWducyB3aXRoIDEwMCsgcG9zdHMgYWNyb3NzIG11bHRpcGxlIHBsYXRmb3Jtc1xuXG5pbXBvcnQgeyBBZ2VudFRvb2wsIEJhc2VBZ2VudCB9IGZyb20gJy4vYmFzZSc7XG5pbXBvcnQgeyBDb252ZXhNdXRhdGlvbnMgfSBmcm9tICcuL3R5cGVzJztcblxuaW50ZXJmYWNlIENhbXBhaWduUG9zdCB7XG4gIHBsYXRmb3JtOiAndHdpdHRlcicgfCAnbGlua2VkaW4nIHwgJ2ZhY2Vib29rJyB8ICdpbnN0YWdyYW0nO1xuICBjb250ZW50OiBzdHJpbmc7XG4gIHNjaGVkdWxlZERhdGU6IHN0cmluZztcbiAgc2NoZWR1bGVkVGltZTogc3RyaW5nO1xuICBtZXRhZGF0YToge1xuICAgIHdlZWs6IG51bWJlcjtcbiAgICBkYXlPZldlZWs6IHN0cmluZztcbiAgICBjYW1wYWlnblBoYXNlOiAnYXdhcmVuZXNzJyB8ICdjb25zaWRlcmF0aW9uJyB8ICdjb252ZXJzaW9uJyB8ICdyZXRlbnRpb24nO1xuICAgIGNvbnRlbnRUeXBlOiAnZWR1Y2F0aW9uYWwnIHwgJ3Byb21vdGlvbmFsJyB8ICdlbmdhZ2VtZW50JyB8ICdhbm5vdW5jZW1lbnQnO1xuICAgIGhhc2h0YWdzOiBzdHJpbmdbXTtcbiAgICBjYW1wYWlnbklkPzogc3RyaW5nO1xuICAgIGJhdGNoSWQ/OiBzdHJpbmc7XG4gIH07XG59XG5cbmludGVyZmFjZSBDYW1wYWlnbkJhdGNoIHtcbiAgY2FtcGFpZ25JZDogc3RyaW5nO1xuICBwb3N0czogQ2FtcGFpZ25Qb3N0W107XG4gIHByb2Nlc3NpbmdTdGF0dXM6ICdwZW5kaW5nJyB8ICdwcm9jZXNzaW5nJyB8ICdjb21wbGV0ZWQnIHwgJ2ZhaWxlZCc7XG4gIHByb2Nlc3NlZENvdW50OiBudW1iZXI7XG4gIHRvdGFsQ291bnQ6IG51bWJlcjtcbn1cblxuaW50ZXJmYWNlIERpcmVjdG9yU2Vzc2lvbiB7XG4gIGNhbXBhaWduUHJvamVjdElkPzogc3RyaW5nOyAvLyBQcm9qZWN0IElEIGZvciB0aGUgY2FtcGFpZ25cbiAgY2FtcGFpZ25Qcm9qZWN0TmFtZT86IHN0cmluZzsgLy8gVXNlci1wcm92aWRlZCBjYW1wYWlnbiBuYW1lXG4gIGluc3RydWN0aW9uc0ZpbGU/OiBzdHJpbmc7XG4gIGluc3RydWN0aW9uc0NvbnRlbnQ/OiBzdHJpbmc7XG4gIGNhbXBhaWduTmFtZT86IHN0cmluZztcbiAgY2FtcGFpZ25Hb2Fscz86IHN0cmluZztcbiAgcGxhdGZvcm1zPzogc3RyaW5nW107XG4gIGR1cmF0aW9uPzogbnVtYmVyOyAvLyB3ZWVrc1xuICBwb3N0c1BlckRheT86IG51bWJlcjtcbiAgY29udGVudFN0cmF0ZWd5Pzogc3RyaW5nO1xuICBjdXJyZW50U3RlcDogJ2NhbXBhaWduLW5hbWUnIHwgJ2luc3RydWN0aW9ucycgfCAnY2FtcGFpZ24tc2V0dXAnIHwgJ2dlbmVyYXRpbmcnIHwgJ3NjaGVkdWxpbmcnIHwgJ2NvbXBsZXRlJztcbiAgYWN0aXZlQ2FtcGFpZ25zOiBNYXA8c3RyaW5nLCBDYW1wYWlnbkJhdGNoPjtcbn1cblxuZXhwb3J0IGNsYXNzIERpcmVjdG9yQWdlbnQgZXh0ZW5kcyBCYXNlQWdlbnQge1xuICBpZCA9ICdkaXJlY3Rvcic7XG4gIG5hbWUgPSAnQ2FtcGFpZ24gRGlyZWN0b3InO1xuICBkZXNjcmlwdGlvbiA9ICdPcmNoZXN0cmF0ZXMgbGFyZ2Utc2NhbGUgbWFya2V0aW5nIGNhbXBhaWducyB3aXRoIDEwMCsgcG9zdHMgYWNyb3NzIG11bHRpcGxlIHBsYXRmb3Jtcy4gSW50ZWdyYXRlcyBpbnN0cnVjdGlvbiBmaWxlcyBmb3IgYnJhbmQgZ3VpZGVsaW5lcyBhbmQgZ2VuZXJhdGVzIGNvbXByZWhlbnNpdmUgY29udGVudCBzdHJhdGVnaWVzLic7XG4gIGljb24gPSAn8J+OrCc7XG4gIFxuICBwcml2YXRlIHNlc3Npb25zOiBNYXA8c3RyaW5nLCBEaXJlY3RvclNlc3Npb24+ID0gbmV3IE1hcCgpO1xuICBwcml2YXRlIHJlYWRvbmx5IEJBVENIX1NJWkUgPSAxMDtcbiAgcHJpdmF0ZSByZWFkb25seSBNQVhfQ09OQ1VSUkVOVF9CQVRDSEVTID0gMztcbiAgXG4gIHRvb2xzOiBBZ2VudFRvb2xbXSA9IFtcbiAgICB7XG4gICAgICBpZDogJ29yY2hlc3RyYXRlLWNhbXBhaWduJyxcbiAgICAgIG5hbWU6ICdPcmNoZXN0cmF0ZSBDYW1wYWlnbicsXG4gICAgICBjb21tYW5kOiAnL2RpcmVjdG9yJyxcbiAgICAgIGRlc2NyaXB0aW9uOiAnQ3JlYXRlIGFuZCBzY2hlZHVsZSBhIGNvbXBsZXRlIG1hcmtldGluZyBjYW1wYWlnbiB3aXRoIDEwMCsgcG9zdHMgYWNyb3NzIG11bHRpcGxlIHBsYXRmb3JtcycsXG4gICAgICBwYXJhbWV0ZXJzOiBbXVxuICAgIH1cbiAgXTtcblxuICBhc3luYyBleGVjdXRlKHRvb2w6IEFnZW50VG9vbCwgaW5wdXQ6IHN0cmluZywgY29udmV4TXV0YXRpb25zOiBDb252ZXhNdXRhdGlvbnMsIHNlc3Npb25JZD86IHN0cmluZyk6IFByb21pc2U8c3RyaW5nPiB7XG4gICAgY29uc29sZS5sb2coJ/CflKUgRGlyZWN0b3IgQWdlbnQ6IEV4ZWN1dGUgY2FsbGVkIHdpdGggaW5wdXQ6JywgaW5wdXQpO1xuICAgIGNvbnNvbGUubG9nKCfwn5SlIERpcmVjdG9yIEFnZW50OiBTZXNzaW9uIElEOicsIHNlc3Npb25JZCk7XG4gICAgXG4gICAgaWYgKCFzZXNzaW9uSWQpIHtcbiAgICAgIHJldHVybiAnU2Vzc2lvbiBJRCBpcyByZXF1aXJlZCBmb3IgY2FtcGFpZ24gb3JjaGVzdHJhdGlvbic7XG4gICAgfVxuXG4gICAgLy8gSW5pdGlhbGl6ZSBvciBnZXQgc2Vzc2lvblxuICAgIGNvbnN0IGV4aXN0aW5nU2Vzc2lvbiA9IHRoaXMuc2Vzc2lvbnMuaGFzKHNlc3Npb25JZCk7XG4gICAgY29uc29sZS5sb2coJ/CflKUgRGlyZWN0b3IgQWdlbnQ6IEV4aXN0aW5nIHNlc3Npb24gZm91bmQ6JywgZXhpc3RpbmdTZXNzaW9uKTtcbiAgICBcbiAgICBpZiAoIXRoaXMuc2Vzc2lvbnMuaGFzKHNlc3Npb25JZCkpIHtcbiAgICAgIGNvbnNvbGUubG9nKCfwn5SlIERpcmVjdG9yIEFnZW50OiBDcmVhdGluZyBuZXcgc2Vzc2lvbicpO1xuICAgICAgdGhpcy5zZXNzaW9ucy5zZXQoc2Vzc2lvbklkLCB7XG4gICAgICAgIGN1cnJlbnRTdGVwOiAnY2FtcGFpZ24tbmFtZScsXG4gICAgICAgIGFjdGl2ZUNhbXBhaWduczogbmV3IE1hcCgpXG4gICAgICB9KTtcbiAgICB9XG4gICAgXG4gICAgY29uc3Qgc2Vzc2lvbiA9IHRoaXMuc2Vzc2lvbnMuZ2V0KHNlc3Npb25JZCkhO1xuICAgIGNvbnNvbGUubG9nKCfwn5SlIERpcmVjdG9yIEFnZW50OiBDdXJyZW50IHNlc3Npb24gc3RlcDonLCBzZXNzaW9uLmN1cnJlbnRTdGVwKTtcbiAgICBjb25zb2xlLmxvZygn8J+UpSBEaXJlY3RvciBBZ2VudDogSGFzIGluc3RydWN0aW9ucyBmaWxlOicsICEhc2Vzc2lvbi5pbnN0cnVjdGlvbnNGaWxlKTtcbiAgICBcbiAgICAvLyBJZiBzZXNzaW9uIGlzIGFscmVhZHkgY29tcGxldGUsIHJldHVybiBzdWNjZXNzIG1lc3NhZ2VcbiAgICBpZiAoc2Vzc2lvbi5jdXJyZW50U3RlcCA9PT0gJ2NvbXBsZXRlJykge1xuICAgICAgcmV0dXJuICdDYW1wYWlnbiBoYXMgYmVlbiBzdWNjZXNzZnVsbHkgZ2VuZXJhdGVkIGFuZCBzY2hlZHVsZWQhIFVzZSBgL2RpcmVjdG9yYCB0byBzdGFydCBhIG5ldyBjYW1wYWlnbi4nO1xuICAgIH1cblxuICAgIC8vIFN0ZXAgMTogUmVxdWVzdCBjYW1wYWlnbiBuYW1lIGFuZCBjcmVhdGUgcHJvamVjdFxuICAgIGlmIChzZXNzaW9uLmN1cnJlbnRTdGVwID09PSAnY2FtcGFpZ24tbmFtZScpIHtcbiAgICAgIC8vIENoZWNrIGlmIHRoaXMgaXMgYSBjYW1wYWlnbiBuYW1lIGlucHV0XG4gICAgICBpZiAoaW5wdXQgJiYgaW5wdXQudHJpbSgpICYmICFpbnB1dC5pbmNsdWRlcygnU2VsZWN0ZWQgZmlsZTonKSAmJiAhaW5wdXQuc3RhcnRzV2l0aCgnLycpKSB7XG4gICAgICAgIGNvbnN0IGNhbXBhaWduTmFtZSA9IGlucHV0LnRyaW0oKTtcbiAgICAgICAgY29uc29sZS5sb2coJ/CflKUgRGlyZWN0b3IgQWdlbnQ6IENyZWF0aW5nIGNhbXBhaWduIHByb2plY3Q6JywgY2FtcGFpZ25OYW1lKTtcbiAgICAgICAgXG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgLy8gQ3JlYXRlIHRoZSBwcm9qZWN0IHVzaW5nIENvbnZleCBtdXRhdGlvbnNcbiAgICAgICAgICBjb25zdCBwcm9qZWN0ID0gYXdhaXQgY29udmV4TXV0YXRpb25zLmNyZWF0ZVByb2plY3Q/Lih7XG4gICAgICAgICAgICBuYW1lOiBjYW1wYWlnbk5hbWUsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogYE1hcmtldGluZyBjYW1wYWlnbiBwcm9qZWN0OiAke2NhbXBhaWduTmFtZX1gLFxuICAgICAgICAgICAgc3RhdHVzOiAnYWN0aXZlJ1xuICAgICAgICAgIH0pO1xuICAgICAgICAgIFxuICAgICAgICAgIGlmIChwcm9qZWN0KSB7XG4gICAgICAgICAgICBzZXNzaW9uLmNhbXBhaWduUHJvamVjdElkID0gcHJvamVjdC5faWQ7XG4gICAgICAgICAgICBzZXNzaW9uLmNhbXBhaWduUHJvamVjdE5hbWUgPSBjYW1wYWlnbk5hbWU7XG4gICAgICAgICAgICBzZXNzaW9uLmN1cnJlbnRTdGVwID0gJ2luc3RydWN0aW9ucyc7XG4gICAgICAgICAgICBjb25zb2xlLmxvZygn8J+UpSBEaXJlY3RvciBBZ2VudDogUHJvamVjdCBjcmVhdGVkLCBtb3ZpbmcgdG8gaW5zdHJ1Y3Rpb25zIHN0ZXAnKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ29udGludWUgdG8gaW5zdHJ1Y3Rpb25zIHN0ZXBcbiAgICAgICAgICAgIGlmIChjb252ZXhNdXRhdGlvbnMuc3RvcmVDaGF0TWVzc2FnZSkge1xuICAgICAgICAgICAgICBhd2FpdCBjb252ZXhNdXRhdGlvbnMuc3RvcmVDaGF0TWVzc2FnZSh7XG4gICAgICAgICAgICAgICAgcm9sZTogJ2Fzc2lzdGFudCcsXG4gICAgICAgICAgICAgICAgY29udGVudDogYOKchSBDYW1wYWlnbiBwcm9qZWN0IFwiJHtjYW1wYWlnbk5hbWV9XCIgY3JlYXRlZCBzdWNjZXNzZnVsbHkhXFxuXFxuTm93LCBwbGVhc2Ugc2VsZWN0IGFuIGluc3RydWN0aW9ucyBmaWxlIHRoYXQgY29udGFpbnMgeW91ciBjYW1wYWlnbiBndWlkZWxpbmVzLCBicmFuZCB2b2ljZSwgb3IgbWFya2V0aW5nIHN0cmF0ZWd5LlxcblxcbldoYXQgeW91IGNhbiBpbmNsdWRlIGluIHlvdXIgaW5zdHJ1Y3Rpb25zIGZpbGU6XFxuLSBCcmFuZCB2b2ljZSBhbmQgdG9uZSBndWlkZWxpbmVzXFxuLSBUYXJnZXQgYXVkaWVuY2UgaW5mb3JtYXRpb25cXG4tIENhbXBhaWduIG9iamVjdGl2ZXMgYW5kIEtQSXNcXG4tIENvbnRlbnQgdGhlbWVzIGFuZCBtZXNzYWdpbmdcXG4tIFBsYXRmb3JtLXNwZWNpZmljIHJlcXVpcmVtZW50c1xcbi0gSGFzaHRhZyBzdHJhdGVnaWVzXFxuLSBWaXN1YWwgZ3VpZGVsaW5lc1xcblxcblNlbGVjdCB5b3VyIGluc3RydWN0aW9ucyBmaWxlOmAsXG4gICAgICAgICAgICAgICAgc2Vzc2lvbklkLFxuICAgICAgICAgICAgICAgIGludGVyYWN0aXZlQ29tcG9uZW50OiB7XG4gICAgICAgICAgICAgICAgICB0eXBlOiAnZmlsZV9zZWxlY3RvcicsXG4gICAgICAgICAgICAgICAgICBzdGF0dXM6ICdwZW5kaW5nJyxcbiAgICAgICAgICAgICAgICAgIGRhdGE6IHtcbiAgICAgICAgICAgICAgICAgICAgZmlsZVR5cGU6ICdpbnN0cnVjdGlvbnMnLFxuICAgICAgICAgICAgICAgICAgICBmaWx0ZXJCeUV4dGVuc2lvbjogWycubWQnLCAnLnR4dCddLFxuICAgICAgICAgICAgICAgICAgICBwbGFjZWhvbGRlcjogJ1NlbGVjdCBjYW1wYWlnbiBpbnN0cnVjdGlvbnMgZmlsZS4uLidcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuIGBDYW1wYWlnbiBwcm9qZWN0IFwiJHtjYW1wYWlnbk5hbWV9XCIgY3JlYXRlZCEgUGxlYXNlIHNlbGVjdCBhbiBpbnN0cnVjdGlvbnMgZmlsZSB0byBjb250aW51ZS5gO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICByZXR1cm4gJ0ZhaWxlZCB0byBjcmVhdGUgY2FtcGFpZ24gcHJvamVjdC4gUGxlYXNlIHRyeSBhZ2Fpbi4nO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgICBjb25zb2xlLmVycm9yKCfwn5SlIERpcmVjdG9yIEFnZW50OiBFcnJvciBjcmVhdGluZyBwcm9qZWN0OicsIGVycm9yKTtcbiAgICAgICAgICByZXR1cm4gJ0Vycm9yIGNyZWF0aW5nIGNhbXBhaWduIHByb2plY3QuIFBsZWFzZSB0cnkgYWdhaW4gd2l0aCBhIGRpZmZlcmVudCBuYW1lLic7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFNob3cgY2FtcGFpZ24gbmFtZSBpbnB1dCBwcm9tcHRcbiAgICAgICAgaWYgKGNvbnZleE11dGF0aW9ucy5zdG9yZUNoYXRNZXNzYWdlKSB7XG4gICAgICAgICAgYXdhaXQgY29udmV4TXV0YXRpb25zLnN0b3JlQ2hhdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgcm9sZTogJ2Fzc2lzdGFudCcsXG4gICAgICAgICAgICBjb250ZW50OiAn8J+OrCAqKkNhbXBhaWduIERpcmVjdG9yIEFnZW50KipcXG5cXG5JIHdpbGwgaGVscCB5b3Ugb3JjaGVzdHJhdGUgYSBjb21wcmVoZW5zaXZlIG1hcmtldGluZyBjYW1wYWlnbiB3aXRoIDEwMCsgcG9zdHMgYWNyb3NzIG11bHRpcGxlIHBsYXRmb3Jtcy5cXG5cXG4qKlN0ZXAgMTogQ3JlYXRlIENhbXBhaWduIFByb2plY3QqKlxcblxcbkZpcnN0LCBsZXRcXCdzIGNyZWF0ZSBhIGRlZGljYXRlZCBwcm9qZWN0IGZvbGRlciBmb3IgeW91ciBjYW1wYWlnbi4gVGhpcyB3aWxsIG9yZ2FuaXplIGFsbCB5b3VyIGdlbmVyYXRlZCBjb250ZW50LCBzY2hlZHVsZXMsIGFuZCBhc3NldHMuXFxuXFxuV2hhdCB3b3VsZCB5b3UgbGlrZSB0byBuYW1lIHlvdXIgY2FtcGFpZ24gcHJvamVjdD8nLFxuICAgICAgICAgICAgc2Vzc2lvbklkLFxuICAgICAgICAgICAgaW50ZXJhY3RpdmVDb21wb25lbnQ6IHtcbiAgICAgICAgICAgICAgdHlwZTogJ2ZpbGVfbmFtZV9pbnB1dCcsXG4gICAgICAgICAgICAgIHN0YXR1czogJ3BlbmRpbmcnLFxuICAgICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdFbnRlciBjYW1wYWlnbiBuYW1lIChlLmcuLCBcIlE0IFByb2R1Y3QgTGF1bmNoXCIsIFwiSG9saWRheSBNYXJrZXRpbmcgMjAyNVwiKScsXG4gICAgICAgICAgICAgICAgZmlsZVR5cGU6ICdwcm9qZWN0J1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICdQbGVhc2UgZW50ZXIgYSBuYW1lIGZvciB5b3VyIGNhbXBhaWduIHByb2plY3QuJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBIYW5kbGUgZmlsZSBzZWxlY3Rpb24gaW5wdXQgQUZURVIgY2FtcGFpZ24gbmFtZSBzdGVwXG4gICAgaWYgKGlucHV0LmluY2x1ZGVzKCdTZWxlY3RlZCBmaWxlOicpICYmIHNlc3Npb24uY3VycmVudFN0ZXAgPT09ICdpbnN0cnVjdGlvbnMnKSB7XG4gICAgICBjb25zb2xlLmxvZygn8J+UpSBEaXJlY3RvciBBZ2VudDogUHJvY2Vzc2luZyBmaWxlIHNlbGVjdGlvbjonLCBpbnB1dCk7XG4gICAgICBjb25zb2xlLmxvZygn8J+UpSBEaXJlY3RvciBBZ2VudDogU2Vzc2lvbiBzdGVwOicsIHNlc3Npb24uY3VycmVudFN0ZXApO1xuICAgICAgXG4gICAgICBjb25zdCBmaWxlTmFtZSA9IGlucHV0LnJlcGxhY2UoJ1NlbGVjdGVkIGZpbGU6JywgJycpLnRyaW0oKTtcbiAgICAgIGNvbnNvbGUubG9nKCfwn5SlIERpcmVjdG9yIEFnZW50OiBFeHRyYWN0ZWQgZmlsZW5hbWU6JywgZmlsZU5hbWUpO1xuICAgICAgXG4gICAgICBzZXNzaW9uLmluc3RydWN0aW9uc0ZpbGUgPSBmaWxlTmFtZTtcbiAgICAgIFxuICAgICAgLy8gRmV0Y2ggdGhlIGZpbGUgY29udGVudFxuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgZmlsZXMgPSBhd2FpdCBjb252ZXhNdXRhdGlvbnMuZ2V0QWxsRmlsZXM/LigpIHx8IFtdO1xuICAgICAgICBjb25zb2xlLmxvZygn8J+UpSBEaXJlY3RvciBBZ2VudDogQXZhaWxhYmxlIGZpbGVzIGNvdW50OicsIGZpbGVzLmxlbmd0aCk7XG4gICAgICAgIGNvbnNvbGUubG9nKCfwn5SlIERpcmVjdG9yIEFnZW50OiBBdmFpbGFibGUgZmlsZSBuYW1lczonLCBmaWxlcy5tYXAoKGY6IGFueSkgPT4gZi5uYW1lKSk7XG4gICAgICAgIFxuICAgICAgICAvLyBUcnkgdG8gZmluZCB0aGUgZmlsZSB3aXRoIG9yIHdpdGhvdXQgZXh0ZW5zaW9uXG4gICAgICAgIGxldCBpbnN0cnVjdGlvbkZpbGUgPSBmaWxlcy5maW5kKChmOiBhbnkpID0+IGYubmFtZSA9PT0gZmlsZU5hbWUpO1xuICAgICAgICBpZiAoIWluc3RydWN0aW9uRmlsZSAmJiAhZmlsZU5hbWUuaW5jbHVkZXMoJy4nKSkge1xuICAgICAgICAgIC8vIFRyeSB3aXRoIC5tZCBleHRlbnNpb25cbiAgICAgICAgICBpbnN0cnVjdGlvbkZpbGUgPSBmaWxlcy5maW5kKChmOiBhbnkpID0+IGYubmFtZSA9PT0gZmlsZU5hbWUgKyAnLm1kJyk7XG4gICAgICAgICAgY29uc29sZS5sb2coJ/CflKUgRGlyZWN0b3IgQWdlbnQ6IFRyeWluZyB3aXRoIC5tZCBleHRlbnNpb246JywgZmlsZU5hbWUgKyAnLm1kJyk7XG4gICAgICAgIH1cbiAgICAgICAgY29uc29sZS5sb2coJ/CflKUgRGlyZWN0b3IgQWdlbnQ6IEZvdW5kIGluc3RydWN0aW9uIGZpbGU6JywgISFpbnN0cnVjdGlvbkZpbGUpO1xuICAgICAgICBcbiAgICAgICAgaWYgKGluc3RydWN0aW9uRmlsZSkge1xuICAgICAgICAgIHNlc3Npb24uaW5zdHJ1Y3Rpb25zQ29udGVudCA9IGluc3RydWN0aW9uRmlsZS5jb250ZW50O1xuICAgICAgICAgIHNlc3Npb24uaW5zdHJ1Y3Rpb25zRmlsZSA9IGZpbGVOYW1lOyAvLyBNYWtlIHN1cmUgdGhpcyBpcyBzZXRcbiAgICAgICAgICBzZXNzaW9uLmN1cnJlbnRTdGVwID0gJ2NvbXBsZXRlJzsgLy8gU2V0IHRvIGNvbXBsZXRlIGFmdGVyIGdlbmVyYXRpb25cbiAgICAgICAgICBjb25zb2xlLmxvZygn8J+UpSBEaXJlY3RvciBBZ2VudDogVXBkYXRlZCBzZXNzaW9uIHN0ZXAgdG8gY29tcGxldGUnKTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBTZXQgZGVmYXVsdCBjYW1wYWlnbiBzZXR0aW5ncyBiYXNlZCBvbiBpbnN0cnVjdGlvbnNcbiAgICAgICAgICBzZXNzaW9uLmNhbXBhaWduTmFtZSA9ICdFQUMgTWFya2V0aW5nIENhbXBhaWduJztcbiAgICAgICAgICBzZXNzaW9uLmR1cmF0aW9uID0gNDsgLy8gd2Vla3NcbiAgICAgICAgICBzZXNzaW9uLnBsYXRmb3JtcyA9IFsndHdpdHRlcicsICdsaW5rZWRpbicsICdpbnN0YWdyYW0nLCAnZmFjZWJvb2snXTtcbiAgICAgICAgICBzZXNzaW9uLnBvc3RzUGVyRGF5ID0gMztcbiAgICAgICAgICBzZXNzaW9uLmNhbXBhaWduR29hbHMgPSAnQnJhbmQgYXdhcmVuZXNzIGFuZCBsZWFkIGdlbmVyYXRpb24gYmFzZWQgb24gaW5zdHJ1Y3Rpb25zJztcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBJbW1lZGlhdGVseSBnZW5lcmF0ZSBjYW1wYWlnblxuICAgICAgICAgIGNvbnN0IHJlc3VsdCA9IGF3YWl0IHRoaXMuZ2VuZXJhdGVDYW1wYWlnbihzZXNzaW9uLCBjb252ZXhNdXRhdGlvbnMsIHNlc3Npb25JZCk7XG4gICAgICAgICAgY29uc29sZS5sb2coJ/CflKUgRGlyZWN0b3IgQWdlbnQ6IENhbXBhaWduIGdlbmVyYXRpb24gcmVzdWx0OicsIHJlc3VsdCk7XG4gICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBjb25zb2xlLmxvZygn8J+UpSBEaXJlY3RvciBBZ2VudDogRmlsZSBub3QgZm91bmQgaW4gZmlsZXMgYXJyYXknKTtcbiAgICAgICAgICByZXR1cm4gYEZpbGUgXCIke2ZpbGVOYW1lfVwiIG5vdCBmb3VuZC4gUGxlYXNlIHNlbGVjdCBhIHZhbGlkIGluc3RydWN0aW9ucyBmaWxlLmA7XG4gICAgICAgIH1cbiAgICAgIH0gY2F0Y2ggKGVycm9yKSB7XG4gICAgICAgIGNvbnNvbGUuZXJyb3IoJ/CflKUgRGlyZWN0b3IgQWdlbnQ6IEVycm9yIGxvYWRpbmcgaW5zdHJ1Y3Rpb25zIGZpbGU6JywgZXJyb3IpO1xuICAgICAgICByZXR1cm4gJ0Vycm9yIGxvYWRpbmcgaW5zdHJ1Y3Rpb25zIGZpbGUuIFBsZWFzZSB0cnkgYWdhaW4uJztcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLy8gU3RlcCAxOiBSZXF1ZXN0IGluc3RydWN0aW9ucyBmaWxlIChvbmx5IGlmIHdlIGhhdmVuJ3QgcHJvY2Vzc2VkIGZpbGUgc2VsZWN0aW9uIGFuZCBub3QgY29tcGxldGUpXG4gICAgaWYgKHNlc3Npb24uY3VycmVudFN0ZXAgPT09ICdpbnN0cnVjdGlvbnMnICYmICFzZXNzaW9uLmluc3RydWN0aW9uc0ZpbGUpIHtcbiAgICAgIGlmIChjb252ZXhNdXRhdGlvbnMuc3RvcmVDaGF0TWVzc2FnZSkge1xuICAgICAgICBhd2FpdCBjb252ZXhNdXRhdGlvbnMuc3RvcmVDaGF0TWVzc2FnZSh7XG4gICAgICAgICAgcm9sZTogJ2Fzc2lzdGFudCcsXG4gICAgICAgICAgY29udGVudDogJ0NhbXBhaWduIERpcmVjdG9yIEFnZW50XFxuXFxuSSB3aWxsIGhlbHAgeW91IG9yY2hlc3RyYXRlIGEgY29tcHJlaGVuc2l2ZSBtYXJrZXRpbmcgY2FtcGFpZ24gd2l0aCAxMDArIHBvc3RzIGFjcm9zcyBtdWx0aXBsZSBwbGF0Zm9ybXMuXFxuXFxuU3RlcCAxOiBTZWxlY3QgSW5zdHJ1Y3Rpb25zIEZpbGVcXG5cXG5GaXJzdCwgSSBuZWVkIHRvIHVuZGVyc3RhbmQgeW91ciBjYW1wYWlnbiBzdHJhdGVneS4gUGxlYXNlIHNlbGVjdCBhbiBpbnN0cnVjdGlvbnMgZmlsZSB0aGF0IGNvbnRhaW5zIHlvdXIgY2FtcGFpZ24gZ3VpZGVsaW5lcywgYnJhbmQgdm9pY2UsIG9yIG1hcmtldGluZyBzdHJhdGVneS5cXG5cXG5XaGF0IHlvdSBjYW4gaW5jbHVkZSBpbiB5b3VyIGluc3RydWN0aW9ucyBmaWxlOlxcbi0gQnJhbmQgdm9pY2UgYW5kIHRvbmUgZ3VpZGVsaW5lc1xcbi0gVGFyZ2V0IGF1ZGllbmNlIGluZm9ybWF0aW9uXFxuLSBDYW1wYWlnbiBvYmplY3RpdmVzIGFuZCBLUElzXFxuLSBDb250ZW50IHRoZW1lcyBhbmQgbWVzc2FnaW5nXFxuLSBQbGF0Zm9ybS1zcGVjaWZpYyByZXF1aXJlbWVudHNcXG4tIEhhc2h0YWcgc3RyYXRlZ2llc1xcbi0gVmlzdWFsIGd1aWRlbGluZXNcXG5cXG5TZWxlY3QgeW91ciBpbnN0cnVjdGlvbnMgZmlsZTonLFxuICAgICAgICAgIHNlc3Npb25JZCxcbiAgICAgICAgICBpbnRlcmFjdGl2ZUNvbXBvbmVudDoge1xuICAgICAgICAgICAgdHlwZTogJ2ZpbGVfc2VsZWN0b3InLFxuICAgICAgICAgICAgc3RhdHVzOiAncGVuZGluZycsXG4gICAgICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgICAgIGZpbGVUeXBlOiAnaW5zdHJ1Y3Rpb25zJyxcbiAgICAgICAgICAgICAgZmlsdGVyQnlFeHRlbnNpb246IFsnLm1kJywgJy50eHQnXSxcbiAgICAgICAgICAgICAgcGxhY2Vob2xkZXI6ICdTZWxlY3QgY2FtcGFpZ24gaW5zdHJ1Y3Rpb25zIGZpbGUuLi4nXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICAgIHJldHVybiAnUGxlYXNlIHNlbGVjdCBhbiBpbnN0cnVjdGlvbnMgZmlsZSB0byBnZXQgc3RhcnRlZCB3aXRoIHlvdXIgY2FtcGFpZ24uJztcbiAgICB9XG4gICAgXG4gICAgLy8gSGFuZGxlIGNhbXBhaWduIGNvbmZpZ3VyYXRpb25cbiAgICBpZiAoc2Vzc2lvbi5jdXJyZW50U3RlcCA9PT0gJ2NhbXBhaWduLXNldHVwJykge1xuICAgICAgaWYgKGlucHV0LnRvTG93ZXJDYXNlKCkuaW5jbHVkZXMoJ2dlbmVyYXRlIGRlZmF1bHQgY2FtcGFpZ24nKSB8fCBpbnB1dC50b0xvd2VyQ2FzZSgpLmluY2x1ZGVzKCdkZWZhdWx0JykpIHtcbiAgICAgICAgLy8gVXNlIGRlZmF1bHQgY2FtcGFpZ24gc2V0dGluZ3NcbiAgICAgICAgc2Vzc2lvbi5jYW1wYWlnbk5hbWUgPSAnRUFDIE1hcmtldGluZyBDYW1wYWlnbic7XG4gICAgICAgIHNlc3Npb24uZHVyYXRpb24gPSA0OyAvLyB3ZWVrc1xuICAgICAgICBzZXNzaW9uLnBsYXRmb3JtcyA9IFsndHdpdHRlcicsICdsaW5rZWRpbicsICdpbnN0YWdyYW0nLCAnZmFjZWJvb2snXTtcbiAgICAgICAgc2Vzc2lvbi5wb3N0c1BlckRheSA9IDM7XG4gICAgICAgIHNlc3Npb24uY2FtcGFpZ25Hb2FscyA9ICdCcmFuZCBhd2FyZW5lc3MgYW5kIGxlYWQgZ2VuZXJhdGlvbic7XG4gICAgICAgIHNlc3Npb24uY3VycmVudFN0ZXAgPSAnZ2VuZXJhdGluZyc7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gYXdhaXQgdGhpcy5nZW5lcmF0ZUNhbXBhaWduKHNlc3Npb24sIGNvbnZleE11dGF0aW9ucywgc2Vzc2lvbklkKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIFBhcnNlIGN1c3RvbSBjYW1wYWlnbiBzZXR0aW5ncyBmcm9tIHVzZXIgaW5wdXRcbiAgICAgICAgcmV0dXJuIHRoaXMucGFyc2VDYW1wYWlnblNldHRpbmdzKGlucHV0LCBzZXNzaW9uKTtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLy8gSGFuZGxlIGJhdGNoIGdlbmVyYXRpb24gc3RhdHVzIHVwZGF0ZXNcbiAgICBpZiAoaW5wdXQuaW5jbHVkZXMoJ2JhdGNoIGNvbXBsZXRlZCcpIHx8IGlucHV0LmluY2x1ZGVzKCdwb3N0cyBnZW5lcmF0ZWQnKSkge1xuICAgICAgcmV0dXJuIHRoaXMuaGFuZGxlQmF0Y2hDb21wbGV0aW9uKGlucHV0LCBzZXNzaW9uKTtcbiAgICB9XG4gICAgXG4gICAgcmV0dXJuICdDYW1wYWlnbiBvcmNoZXN0cmF0aW9uIGluIHByb2dyZXNzLiBVc2UgL2RpcmVjdG9yIHRvIHN0YXJ0IGEgbmV3IGNhbXBhaWduLic7XG4gIH1cblxuICBwcml2YXRlIHBhcnNlQ2FtcGFpZ25TZXR0aW5ncyhpbnB1dDogc3RyaW5nLCBzZXNzaW9uOiBEaXJlY3RvclNlc3Npb24pOiBzdHJpbmcge1xuICAgIC8vIEV4dHJhY3QgY2FtcGFpZ24gc2V0dGluZ3MgZnJvbSB1c2VyIGlucHV0XG4gICAgY29uc3QgbGluZXMgPSBpbnB1dC5zcGxpdCgnXFxuJykubWFwKGxpbmUgPT4gbGluZS50cmltKCkpLmZpbHRlcihsaW5lID0+IGxpbmUubGVuZ3RoID4gMCk7XG4gICAgXG4gICAgZm9yIChjb25zdCBsaW5lIG9mIGxpbmVzKSB7XG4gICAgICBjb25zdCBsb3dlciA9IGxpbmUudG9Mb3dlckNhc2UoKTtcbiAgICAgIGlmIChsb3dlci5pbmNsdWRlcygnbmFtZTonKSB8fCBsb3dlci5zdGFydHNXaXRoKCcxLicpKSB7XG4gICAgICAgIHNlc3Npb24uY2FtcGFpZ25OYW1lID0gbGluZS5zcGxpdCgnOicpWzFdPy50cmltKCkgfHwgbGluZS5yZXBsYWNlKC9eMVxcLi8sICcnKS50cmltKCk7XG4gICAgICB9IGVsc2UgaWYgKGxvd2VyLmluY2x1ZGVzKCdkdXJhdGlvbjonKSB8fCBsb3dlci5pbmNsdWRlcygnd2Vla3MnKSB8fCBsb3dlci5zdGFydHNXaXRoKCcyLicpKSB7XG4gICAgICAgIGNvbnN0IG1hdGNoID0gbGluZS5tYXRjaCgvKFxcZCspLyk7XG4gICAgICAgIGlmIChtYXRjaCkgc2Vzc2lvbi5kdXJhdGlvbiA9IHBhcnNlSW50KG1hdGNoWzFdKTtcbiAgICAgIH0gZWxzZSBpZiAobG93ZXIuaW5jbHVkZXMoJ3BsYXRmb3JtJykgfHwgbG93ZXIuc3RhcnRzV2l0aCgnMy4nKSkge1xuICAgICAgICBjb25zdCBwbGF0Zm9ybXMgPSBsaW5lLnRvTG93ZXJDYXNlKCkubWF0Y2goLyh0d2l0dGVyfGxpbmtlZGlufGZhY2Vib29rfGluc3RhZ3JhbSkvZyk7XG4gICAgICAgIGlmIChwbGF0Zm9ybXMpIHNlc3Npb24ucGxhdGZvcm1zID0gcGxhdGZvcm1zO1xuICAgICAgfSBlbHNlIGlmIChsb3dlci5pbmNsdWRlcygncG9zdHMgcGVyIGRheScpIHx8IGxvd2VyLnN0YXJ0c1dpdGgoJzQuJykpIHtcbiAgICAgICAgY29uc3QgbWF0Y2ggPSBsaW5lLm1hdGNoKC8oXFxkKykvKTtcbiAgICAgICAgaWYgKG1hdGNoKSBzZXNzaW9uLnBvc3RzUGVyRGF5ID0gcGFyc2VJbnQobWF0Y2hbMV0pO1xuICAgICAgfSBlbHNlIGlmIChsb3dlci5pbmNsdWRlcygnZ29hbHM6JykgfHwgbG93ZXIuc3RhcnRzV2l0aCgnNS4nKSkge1xuICAgICAgICBzZXNzaW9uLmNhbXBhaWduR29hbHMgPSBsaW5lLnNwbGl0KCc6JylbMV0/LnRyaW0oKSB8fCBsaW5lLnJlcGxhY2UoL141XFwuLywgJycpLnRyaW0oKTtcbiAgICAgIH1cbiAgICB9XG4gICAgXG4gICAgLy8gVmFsaWRhdGUgcmVxdWlyZWQgZmllbGRzXG4gICAgaWYgKCFzZXNzaW9uLmNhbXBhaWduTmFtZSB8fCAhc2Vzc2lvbi5kdXJhdGlvbiB8fCAhc2Vzc2lvbi5wbGF0Zm9ybXM/Lmxlbmd0aCkge1xuICAgICAgcmV0dXJuICdQbGVhc2UgcHJvdmlkZSBhbGwgcmVxdWlyZWQgY2FtcGFpZ24gZGV0YWlsczpcXG5cXG4xLiBDYW1wYWlnbiBOYW1lXFxuMi4gRHVyYXRpb24gKHdlZWtzKVxcbjMuIFBsYXRmb3Jtc1xcbjQuIFBvc3RzIHBlciBkYXlcXG41LiBHb2Fsc1xcblxcbk9yIHR5cGUgXCJnZW5lcmF0ZSBkZWZhdWx0IGNhbXBhaWduXCIgdG8gdXNlIHN0YW5kYXJkIHNldHRpbmdzLic7XG4gICAgfVxuICAgIFxuICAgIHNlc3Npb24uY3VycmVudFN0ZXAgPSAnZ2VuZXJhdGluZyc7XG4gICAgcmV0dXJuIGBDYW1wYWlnbiBDb25maWd1cmF0aW9uIFNldDpcXG5cXG5OYW1lOiAke3Nlc3Npb24uY2FtcGFpZ25OYW1lfVxcbkR1cmF0aW9uOiAke3Nlc3Npb24uZHVyYXRpb259IHdlZWtzXFxuUGxhdGZvcm1zOiAke3Nlc3Npb24ucGxhdGZvcm1zLmpvaW4oJywgJyl9XFxuUG9zdHMgcGVyIGRheTogJHtzZXNzaW9uLnBvc3RzUGVyRGF5fVxcbkdvYWxzOiAke3Nlc3Npb24uY2FtcGFpZ25Hb2Fsc31cXG5cXG5HZW5lcmF0aW5nIHlvdXIgY29tcHJlaGVuc2l2ZSBjYW1wYWlnbi4uLmA7XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGdlbmVyYXRlQ2FtcGFpZ24oc2Vzc2lvbjogRGlyZWN0b3JTZXNzaW9uLCBjb252ZXhNdXRhdGlvbnM6IENvbnZleE11dGF0aW9ucywgc2Vzc2lvbklkOiBzdHJpbmcpOiBQcm9taXNlPHN0cmluZz4ge1xuICAgIHRyeSB7XG4gICAgICAvLyBDYWxjdWxhdGUgdG90YWwgcG9zdHMgbmVlZGVkXG4gICAgICBjb25zdCB0b3RhbERheXMgPSAoc2Vzc2lvbi5kdXJhdGlvbiB8fCA0KSAqIDc7XG4gICAgICBjb25zdCBwb3N0c1BlckRheSA9IHNlc3Npb24ucG9zdHNQZXJEYXkgfHwgMztcbiAgICAgIGNvbnN0IHRvdGFsUG9zdHMgPSB0b3RhbERheXMgKiBwb3N0c1BlckRheTtcbiAgICAgIGNvbnN0IHBsYXRmb3JtcyA9IHNlc3Npb24ucGxhdGZvcm1zIHx8IFsndHdpdHRlcicsICdsaW5rZWRpbicsICdpbnN0YWdyYW0nLCAnZmFjZWJvb2snXTtcbiAgICAgIFxuICAgICAgLy8gQ3JlYXRlIGNhbXBhaWduIGluIGRhdGFiYXNlXG4gICAgICBsZXQgY2FtcGFpZ25JZDogc3RyaW5nO1xuICAgICAgdHJ5IHtcbiAgICAgICAgY29uc3QgY2FtcGFpZ24gPSBhd2FpdCBjb252ZXhNdXRhdGlvbnMuY3JlYXRlQ2FtcGFpZ24/Lih7XG4gICAgICAgICAgbmFtZTogc2Vzc2lvbi5jYW1wYWlnbk5hbWUgfHwgJ0dlbmVyYXRlZCBDYW1wYWlnbicsXG4gICAgICAgICAgZGVzY3JpcHRpb246IGBBdXRvLWdlbmVyYXRlZCBjYW1wYWlnbjogJHtzZXNzaW9uLmNhbXBhaWduR29hbHMgfHwgJ01hcmtldGluZyBjYW1wYWlnbid9YCxcbiAgICAgICAgICBwbGF0Zm9ybXMsXG4gICAgICAgICAgdG90YWxQb3N0cyxcbiAgICAgICAgICBzdGFydERhdGU6IG5ldyBEYXRlKCkudG9JU09TdHJpbmcoKS5zcGxpdCgnVCcpWzBdLFxuICAgICAgICAgIGVuZERhdGU6IG5ldyBEYXRlKERhdGUubm93KCkgKyAoc2Vzc2lvbi5kdXJhdGlvbiB8fCA0KSAqIDcgKiAyNCAqIDYwICogNjAgKiAxMDAwKS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF0sXG4gICAgICAgICAgdGVtcGxhdGU6IHNlc3Npb24uaW5zdHJ1Y3Rpb25zQ29udGVudCB8fCAnJ1xuICAgICAgICB9KTtcbiAgICAgICAgY2FtcGFpZ25JZCA9IGNhbXBhaWduPy5faWQgfHwgYGNhbXBhaWduXyR7RGF0ZS5ub3coKX1gO1xuICAgICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgICAgY29uc29sZS5sb2coJ0NhbXBhaWduIGNyZWF0aW9uIG5vdCBhdmFpbGFibGUsIHVzaW5nIGZhbGxiYWNrIElEJyk7XG4gICAgICAgIGNhbXBhaWduSWQgPSBgY2FtcGFpZ25fJHtEYXRlLm5vdygpfWA7XG4gICAgICB9XG4gICAgICBcbiAgICAgIC8vIEdlbmVyYXRlIHBvc3RzIGluIGJhdGNoZXNcbiAgICAgIGNvbnN0IGFsbFBvc3RzID0gYXdhaXQgdGhpcy5nZW5lcmF0ZUJhdGNoZXNBc3luYyhcbiAgICAgICAgdG90YWxQb3N0cyxcbiAgICAgICAgcGxhdGZvcm1zLFxuICAgICAgICBzZXNzaW9uLmluc3RydWN0aW9uc0NvbnRlbnQgfHwgJycsXG4gICAgICAgIGNhbXBhaWduSWQsXG4gICAgICAgIHNlc3Npb24uZHVyYXRpb24gfHwgNFxuICAgICAgKTtcbiAgICAgIFxuICAgICAgLy8gQ3JlYXRlIGJhdGNoZXMgZm9yIHByb2Nlc3NpbmdcbiAgICAgIGNvbnN0IGJhdGNoZXMgPSB0aGlzLmNyZWF0ZUJhdGNoZXMoYWxsUG9zdHMsIGNhbXBhaWduSWQpO1xuICAgICAgXG4gICAgICAvLyBTdG9yZSBiYXRjaGVzIGluIHNlc3Npb25cbiAgICAgIGJhdGNoZXMuZm9yRWFjaChiYXRjaCA9PiB7XG4gICAgICAgIHNlc3Npb24uYWN0aXZlQ2FtcGFpZ25zLnNldChiYXRjaC5jYW1wYWlnbklkLCBiYXRjaCk7XG4gICAgICB9KTtcblxuICAgICAgLy8gU3RhcnQgd2l0aCBwcm9ncmVzcyBpbmRpY2F0b3JcbiAgICAgIGlmIChjb252ZXhNdXRhdGlvbnMuc3RvcmVDaGF0TWVzc2FnZSkge1xuICAgICAgICBhd2FpdCBjb252ZXhNdXRhdGlvbnMuc3RvcmVDaGF0TWVzc2FnZSh7XG4gICAgICAgICAgcm9sZTogJ2Fzc2lzdGFudCcsXG4gICAgICAgICAgY29udGVudDogYENhbXBhaWduIEdlbmVyYXRpb24gQ29tcGxldGUhXFxuXFxuR2VuZXJhdGVkICR7dG90YWxQb3N0c30gcG9zdHMgYWNyb3NzICR7cGxhdGZvcm1zLmxlbmd0aH0gcGxhdGZvcm1zXFxuT3JnYW5pemVkIGludG8gJHtiYXRjaGVzLmxlbmd0aH0gcHJvY2Vzc2luZyBiYXRjaGVzXFxuU3RhcnRpbmcgY29udGVudCBjcmVhdGlvbiBhbmQgc2NoZWR1bGluZy4uLlxcblxcbkNhbXBhaWduIElEOiAke2NhbXBhaWduSWR9XFxuVG90YWwgUG9zdHM6ICR7dG90YWxQb3N0c31cXG5QbGF0Zm9ybXM6ICR7cGxhdGZvcm1zLmpvaW4oJywgJyl9XFxuRHVyYXRpb246ICR7c2Vzc2lvbi5kdXJhdGlvbn0gd2Vla3NgLFxuICAgICAgICAgIHNlc3Npb25JZCxcbiAgICAgICAgICBwcm9jZXNzSW5kaWNhdG9yOiB7XG4gICAgICAgICAgICB0eXBlOiAnY29udGludWluZycsXG4gICAgICAgICAgICBwcm9jZXNzVHlwZTogJ1Byb2Nlc3NpbmcgQ2FtcGFpZ24gQmF0Y2hlcycsXG4gICAgICAgICAgICBjb2xvcjogJ2JsdWUnXG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH1cblxuICAgICAgLy8gUHJvY2VzcyBhbGwgYmF0Y2hlcyB3aXRoIHByb2dyZXNzIHVwZGF0ZXNcbiAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgYmF0Y2hlcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb25zdCBiYXRjaCA9IGJhdGNoZXNbaV07XG4gICAgICAgIGNvbnNvbGUubG9nKGDwn5SlIERpcmVjdG9yIEFnZW50OiBQcm9jZXNzaW5nIGJhdGNoICR7aSArIDF9LyR7YmF0Y2hlcy5sZW5ndGh9YCk7XG4gICAgICAgIFxuICAgICAgICAvLyBVcGRhdGUgcHJvZ3Jlc3NcbiAgICAgICAgaWYgKGNvbnZleE11dGF0aW9ucy5zdG9yZUNoYXRNZXNzYWdlKSB7XG4gICAgICAgICAgYXdhaXQgY29udmV4TXV0YXRpb25zLnN0b3JlQ2hhdE1lc3NhZ2Uoe1xuICAgICAgICAgICAgcm9sZTogJ2Fzc2lzdGFudCcsXG4gICAgICAgICAgICBjb250ZW50OiBgUHJvY2Vzc2luZyBiYXRjaCAke2kgKyAxfSBvZiAke2JhdGNoZXMubGVuZ3RofS4uLiAoJHtiYXRjaC5wb3N0cy5sZW5ndGh9IHBvc3RzKWAsXG4gICAgICAgICAgICBzZXNzaW9uSWQsXG4gICAgICAgICAgICBwcm9jZXNzSW5kaWNhdG9yOiB7XG4gICAgICAgICAgICAgIHR5cGU6ICdjb250aW51aW5nJyxcbiAgICAgICAgICAgICAgcHJvY2Vzc1R5cGU6IGBCYXRjaCAke2kgKyAxfS8ke2JhdGNoZXMubGVuZ3RofWAsXG4gICAgICAgICAgICAgIGNvbG9yOiAnYmx1ZSdcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBcbiAgICAgICAgYXdhaXQgdGhpcy5wcm9jZXNzQmF0Y2goYmF0Y2gsIGNvbnZleE11dGF0aW9ucywgc2Vzc2lvbklkKTtcbiAgICAgICAgXG4gICAgICAgIC8vIFNtYWxsIGRlbGF5IGJldHdlZW4gYmF0Y2hlcyB0byBwcmV2ZW50IG92ZXJ3aGVsbWluZyB0aGUgZGF0YWJhc2VcbiAgICAgICAgaWYgKGkgPCBiYXRjaGVzLmxlbmd0aCAtIDEpIHtcbiAgICAgICAgICBhd2FpdCBuZXcgUHJvbWlzZShyZXNvbHZlID0+IHNldFRpbWVvdXQocmVzb2x2ZSwgMTAwMCkpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIEZpbmFsIHN1Y2Nlc3MgbWVzc2FnZVxuICAgICAgaWYgKGNvbnZleE11dGF0aW9ucy5zdG9yZUNoYXRNZXNzYWdlKSB7XG4gICAgICAgIGF3YWl0IGNvbnZleE11dGF0aW9ucy5zdG9yZUNoYXRNZXNzYWdlKHtcbiAgICAgICAgICByb2xlOiAnYXNzaXN0YW50JyxcbiAgICAgICAgICBjb250ZW50OiBg4pyFIENhbXBhaWduIFN1Y2Nlc3NmdWxseSBDcmVhdGVkIVxcblxcbvCfk4ogKipDYW1wYWlnbiBTdW1tYXJ5OioqXFxuLSAqKkNhbXBhaWduIElEOioqICR7Y2FtcGFpZ25JZH1cXG4tICoqVG90YWwgUG9zdHM6KiogJHt0b3RhbFBvc3RzfVxcbi0gKipQbGF0Zm9ybXM6KiogJHtwbGF0Zm9ybXMuam9pbignLCAnKX1cXG4tICoqRHVyYXRpb246KiogJHtzZXNzaW9uLmR1cmF0aW9ufSB3ZWVrc1xcbi0gKipCYXRjaGVzIFByb2Nlc3NlZDoqKiAke2JhdGNoZXMubGVuZ3RofVxcblxcbvCfl5PvuI8gQWxsIHBvc3RzIGhhdmUgYmVlbiBzY2hlZHVsZWQgYW5kIHNhdmVkIHRvIHRoZSBkYXRhYmFzZS4gVXNlIHRoZSBzb2NpYWwgbWVkaWEgZGFzaGJvYXJkIHRvIHJldmlldyBhbmQgbWFuYWdlIHlvdXIgY2FtcGFpZ24uYCxcbiAgICAgICAgICBzZXNzaW9uSWRcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIHNlc3Npb24uY3VycmVudFN0ZXAgPSAnY29tcGxldGUnO1xuICAgICAgXG4gICAgICByZXR1cm4gJ0NhbXBhaWduIHByb2Nlc3NpbmcgY29tcGxldGVkIHN1Y2Nlc3NmdWxseSEnOyAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignQ2FtcGFpZ24gZ2VuZXJhdGlvbiBlcnJvcjonLCBlcnJvcik7XG4gICAgICByZXR1cm4gYEVycm9yIGdlbmVyYXRpbmcgY2FtcGFpZ246ICR7ZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcid9YDtcbiAgICB9XG4gIH1cblxuICBwcml2YXRlIGFzeW5jIGdlbmVyYXRlQmF0Y2hlc0FzeW5jKFxuICAgIHRvdGFsUG9zdHM6IG51bWJlcixcbiAgICBwbGF0Zm9ybXM6IHN0cmluZ1tdLFxuICAgIGluc3RydWN0aW9uczogc3RyaW5nLFxuICAgIGNhbXBhaWduSWQ6IHN0cmluZyxcbiAgICBkdXJhdGlvbjogbnVtYmVyXG4gICk6IFByb21pc2U8Q2FtcGFpZ25Qb3N0W10+IHtcbiAgICBjb25zdCBwb3N0czogQ2FtcGFpZ25Qb3N0W10gPSBbXTtcbiAgICBcbiAgICBjb25zdCBkYXlzID0gWydNb25kYXknLCAnVHVlc2RheScsICdXZWRuZXNkYXknLCAnVGh1cnNkYXknLCAnRnJpZGF5JywgJ1NhdHVyZGF5JywgJ1N1bmRheSddO1xuICAgIFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdG90YWxQb3N0czsgaSsrKSB7XG4gICAgICBjb25zdCBwbGF0Zm9ybSA9IHBsYXRmb3Jtc1tpICUgcGxhdGZvcm1zLmxlbmd0aF0gYXMgYW55O1xuICAgICAgY29uc3Qgd2VlayA9IE1hdGguZmxvb3IoaSAvICh0b3RhbFBvc3RzIC8gZHVyYXRpb24pKSArIDE7XG4gICAgICBjb25zdCBkYXlJbmRleCA9IGkgJSA3O1xuICAgICAgY29uc3QgZGF5ID0gZGF5c1tkYXlJbmRleF07XG4gICAgICBcbiAgICAgIC8vIERldGVybWluZSBvcHRpbWFsIHBvc3RpbmcgdGltZSBiYXNlZCBvbiBwbGF0Zm9ybVxuICAgICAgY29uc3QgdGltZSA9IHRoaXMuZ2V0T3B0aW1hbFBvc3RUaW1lKHBsYXRmb3JtLCBkYXlJbmRleCk7XG4gICAgICBcbiAgICAgIC8vIENhbGN1bGF0ZSBwb3N0IGRhdGVcbiAgICAgIGNvbnN0IHN0YXJ0RGF0ZSA9IG5ldyBEYXRlKCk7XG4gICAgICBjb25zdCBwb3N0RGF0ZSA9IG5ldyBEYXRlKHN0YXJ0RGF0ZSk7XG4gICAgICBwb3N0RGF0ZS5zZXREYXRlKHN0YXJ0RGF0ZS5nZXREYXRlKCkgKyBNYXRoLmZsb29yKGkgLyBwbGF0Zm9ybXMubGVuZ3RoKSk7XG4gICAgICBcbiAgICAgIC8vIERldGVybWluZSBjYW1wYWlnbiBwaGFzZSBiYXNlZCBvbiB3ZWVrXG4gICAgICBjb25zdCBwaGFzZXMgPSBbJ2F3YXJlbmVzcycsICdjb25zaWRlcmF0aW9uJywgJ2NvbnZlcnNpb24nLCAncmV0ZW50aW9uJ10gYXMgY29uc3Q7XG4gICAgICBjb25zdCBwaGFzZUluZGV4ID0gTWF0aC5mbG9vcigod2VlayAtIDEpIC8gKGR1cmF0aW9uIC8gcGhhc2VzLmxlbmd0aCkpO1xuICAgICAgY29uc3QgcGhhc2UgPSBwaGFzZXNbTWF0aC5taW4ocGhhc2VJbmRleCwgcGhhc2VzLmxlbmd0aCAtIDEpXTtcbiAgICAgIFxuICAgICAgLy8gRGV0ZXJtaW5lIGNvbnRlbnQgdHlwZSBjeWNsaWNhbGx5XG4gICAgICBjb25zdCBjb250ZW50VHlwZXMgPSBbJ2VkdWNhdGlvbmFsJywgJ3Byb21vdGlvbmFsJywgJ2VuZ2FnZW1lbnQnLCAnYW5ub3VuY2VtZW50J10gYXMgY29uc3Q7XG4gICAgICBjb25zdCBjb250ZW50VHlwZSA9IGNvbnRlbnRUeXBlc1tpICUgY29udGVudFR5cGVzLmxlbmd0aF07XG4gICAgICBcbiAgICAgIC8vIEdlbmVyYXRlIGNvbnRlbnRcbiAgICAgIGNvbnN0IGNvbnRlbnQgPSB0aGlzLmdlbmVyYXRlUGxhdGZvcm1Db250ZW50KHBsYXRmb3JtLCBwaGFzZSwgY29udGVudFR5cGUsIGluc3RydWN0aW9ucywgd2VlaywgZGF5KTtcbiAgICAgIFxuICAgICAgcG9zdHMucHVzaCh7XG4gICAgICAgIHBsYXRmb3JtLFxuICAgICAgICBjb250ZW50LFxuICAgICAgICBzY2hlZHVsZWREYXRlOiBwb3N0RGF0ZS50b0lTT1N0cmluZygpLnNwbGl0KCdUJylbMF0sXG4gICAgICAgIHNjaGVkdWxlZFRpbWU6IHRpbWUsXG4gICAgICAgIG1ldGFkYXRhOiB7XG4gICAgICAgICAgd2VlayxcbiAgICAgICAgICBkYXlPZldlZWs6IGRheSxcbiAgICAgICAgICBjYW1wYWlnblBoYXNlOiBwaGFzZSxcbiAgICAgICAgICBjb250ZW50VHlwZSxcbiAgICAgICAgICBoYXNodGFnczogdGhpcy5nZW5lcmF0ZUhhc2h0YWdzKHBsYXRmb3JtLCBwaGFzZSwgY29udGVudFR5cGUpLFxuICAgICAgICAgIGNhbXBhaWduSWQsXG4gICAgICAgICAgYmF0Y2hJZDogYGJhdGNoXyR7TWF0aC5mbG9vcihpIC8gdGhpcy5CQVRDSF9TSVpFKX1gXG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gcG9zdHM7XG4gIH1cblxuICBwcml2YXRlIGdldE9wdGltYWxQb3N0VGltZShwbGF0Zm9ybTogc3RyaW5nLCBkYXlJbmRleDogbnVtYmVyKTogc3RyaW5nIHtcbiAgICBjb25zdCB0aW1lcyA9IHtcbiAgICAgIHR3aXR0ZXI6IFsnMDk6MDAnLCAnMTI6MDAnLCAnMTU6MDAnLCAnMTg6MDAnXSxcbiAgICAgIGxpbmtlZGluOiBbJzA4OjAwJywgJzEyOjAwJywgJzE3OjAwJ10sXG4gICAgICBpbnN0YWdyYW06IFsnMTE6MDAnLCAnMTQ6MDAnLCAnMTc6MDAnLCAnMTk6MDAnXSxcbiAgICAgIGZhY2Vib29rOiBbJzA5OjAwJywgJzEzOjAwJywgJzE1OjAwJ11cbiAgICB9O1xuICAgIFxuICAgIGNvbnN0IHBsYXRmb3JtVGltZXMgPSB0aW1lc1twbGF0Zm9ybSBhcyBrZXlvZiB0eXBlb2YgdGltZXNdIHx8IHRpbWVzLnR3aXR0ZXI7XG4gICAgcmV0dXJuIHBsYXRmb3JtVGltZXNbZGF5SW5kZXggJSBwbGF0Zm9ybVRpbWVzLmxlbmd0aF07XG4gIH1cblxuICBwcml2YXRlIGdlbmVyYXRlUGxhdGZvcm1Db250ZW50KHBsYXRmb3JtOiBzdHJpbmcsIHBoYXNlOiBzdHJpbmcsIGNvbnRlbnRUeXBlOiBzdHJpbmcsIGluc3RydWN0aW9uczogc3RyaW5nLCB3ZWVrOiBudW1iZXIsIGRheTogc3RyaW5nKTogc3RyaW5nIHtcbiAgICBjb25zdCBicmFuZFZvaWNlID0gdGhpcy5leHRyYWN0QnJhbmRWb2ljZShpbnN0cnVjdGlvbnMpO1xuICAgIGNvbnN0IGF1ZGllbmNlID0gdGhpcy5leHRyYWN0QXVkaWVuY2UoaW5zdHJ1Y3Rpb25zKTtcbiAgICBcbiAgICBjb25zdCBjb250ZW50ID0gYCR7YnJhbmRWb2ljZX0gY29udGVudCBmb3IgJHthdWRpZW5jZX0gLSBXZWVrICR7d2Vla30sICR7ZGF5fS4gUGhhc2U6ICR7cGhhc2V9LCBUeXBlOiAke2NvbnRlbnRUeXBlfS4gUGxhdGZvcm06ICR7cGxhdGZvcm19YDtcbiAgICBcbiAgICAvLyBQbGF0Zm9ybS1zcGVjaWZpYyBmb3JtYXR0aW5nXG4gICAgc3dpdGNoIChwbGF0Zm9ybSkge1xuICAgICAgY2FzZSAndHdpdHRlcic6XG4gICAgICAgIHJldHVybiBjb250ZW50Lmxlbmd0aCA+IDI1MCA/IGNvbnRlbnQuc3Vic3RyaW5nKDAsIDI0NykgKyAnLi4uJyA6IGNvbnRlbnQ7XG4gICAgICBjYXNlICdsaW5rZWRpbic6XG4gICAgICAgIHJldHVybiBgJHtjb250ZW50fVxcblxcbiNMaW5rZWRJbkVuZ2FnZW1lbnQgI1Byb2Zlc3Npb25hbEdyb3d0aGA7XG4gICAgICBjYXNlICdpbnN0YWdyYW0nOlxuICAgICAgICByZXR1cm4gYCR7Y29udGVudH0g4pyoXFxuXFxuI0luc3RhZ3JhbUJ1c2luZXNzICNWaXN1YWxDb250ZW50YDtcbiAgICAgIGNhc2UgJ2ZhY2Vib29rJzpcbiAgICAgICAgcmV0dXJuIGAke2NvbnRlbnR9XFxuXFxuV2hhdCBkbyB5b3UgdGhpbms/IFNoYXJlIHlvdXIgdGhvdWdodHMgYmVsb3chIPCfkYdgO1xuICAgICAgZGVmYXVsdDpcbiAgICAgICAgcmV0dXJuIGNvbnRlbnQ7XG4gICAgfVxuICB9XG5cbiAgcHJpdmF0ZSBleHRyYWN0QnJhbmRWb2ljZShpbnN0cnVjdGlvbnM6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3Qgdm9pY2VLZXl3b3JkcyA9IFsncHJvZmVzc2lvbmFsJywgJ2ZyaWVuZGx5JywgJ2lubm92YXRpdmUnLCAndHJ1c3RlZCcsICdleHBlcnQnLCAncmVsaWFibGUnXTtcbiAgICBjb25zdCBsb3dlckluc3RydWN0aW9ucyA9IGluc3RydWN0aW9ucy50b0xvd2VyQ2FzZSgpO1xuICAgIFxuICAgIGZvciAoY29uc3Qga2V5d29yZCBvZiB2b2ljZUtleXdvcmRzKSB7XG4gICAgICBpZiAobG93ZXJJbnN0cnVjdGlvbnMuaW5jbHVkZXMoa2V5d29yZCkpIHtcbiAgICAgICAgcmV0dXJuIGtleXdvcmQuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkgKyBrZXl3b3JkLnNsaWNlKDEpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gJ1Byb2Zlc3Npb25hbCc7XG4gIH1cblxuICBwcml2YXRlIGV4dHJhY3RBdWRpZW5jZShpbnN0cnVjdGlvbnM6IHN0cmluZyk6IHN0cmluZyB7XG4gICAgY29uc3QgYXVkaWVuY2VLZXl3b3JkcyA9IFsnYnVzaW5lc3NlcycsICdwcm9mZXNzaW9uYWxzJywgJ3RlYW1zJywgJ2NvbXBhbmllcycsICdvcmdhbml6YXRpb25zJywgJ3VzZXJzJ107XG4gICAgY29uc3QgbG93ZXJJbnN0cnVjdGlvbnMgPSBpbnN0cnVjdGlvbnMudG9Mb3dlckNhc2UoKTtcbiAgICBcbiAgICBmb3IgKGNvbnN0IGtleXdvcmQgb2YgYXVkaWVuY2VLZXl3b3Jkcykge1xuICAgICAgaWYgKGxvd2VySW5zdHJ1Y3Rpb25zLmluY2x1ZGVzKGtleXdvcmQpKSB7XG4gICAgICAgIHJldHVybiBrZXl3b3JkO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gJ3Byb2Zlc3Npb25hbHMnO1xuICB9XG5cbiAgcHJpdmF0ZSBnZW5lcmF0ZUhhc2h0YWdzKHBsYXRmb3JtOiBzdHJpbmcsIHBoYXNlOiBzdHJpbmcsIGNvbnRlbnRUeXBlOiBzdHJpbmcpOiBzdHJpbmdbXSB7XG4gICAgY29uc3QgYmFzZUhhc2h0YWdzID0gWydtYXJrZXRpbmcnLCAnYnVzaW5lc3MnLCAnZ3Jvd3RoJ107XG4gICAgY29uc3QgcGhhc2VIYXNodGFncyA9IHtcbiAgICAgIGF3YXJlbmVzczogWydicmFuZGF3YXJlbmVzcycsICdpbnRyb2R1Y3Rpb24nXSxcbiAgICAgIGNvbnNpZGVyYXRpb246IFsnc29sdXRpb25zJywgJ2V2YWx1YXRpb24nXSxcbiAgICAgIGNvbnZlcnNpb246IFsnZ2V0c3RhcnRlZCcsICdhY3Rpb24nXSxcbiAgICAgIHJldGVudGlvbjogWydjb21tdW5pdHknLCAnc3VjY2VzcyddXG4gICAgfTtcbiAgICBjb25zdCBjb250ZW50SGFzaHRhZ3MgPSB7XG4gICAgICBlZHVjYXRpb25hbDogWyd0aXBzJywgJ2xlYXJuaW5nJ10sXG4gICAgICBwcm9tb3Rpb25hbDogWydvZmZlcicsICdmZWF0dXJlZCddLFxuICAgICAgZW5nYWdlbWVudDogWydkaXNjdXNzaW9uJywgJ3F1ZXN0aW9uJ10sXG4gICAgICBhbm5vdW5jZW1lbnQ6IFsnbmV3cycsICd1cGRhdGUnXVxuICAgIH07XG4gICAgXG4gICAgcmV0dXJuIFtcbiAgICAgIC4uLmJhc2VIYXNodGFncyxcbiAgICAgIC4uLnBoYXNlSGFzaHRhZ3NbcGhhc2UgYXMga2V5b2YgdHlwZW9mIHBoYXNlSGFzaHRhZ3NdLFxuICAgICAgLi4uY29udGVudEhhc2h0YWdzW2NvbnRlbnRUeXBlIGFzIGtleW9mIHR5cGVvZiBjb250ZW50SGFzaHRhZ3NdXG4gICAgXS5zbGljZSgwLCA1KTtcbiAgfVxuXG4gIHByaXZhdGUgY3JlYXRlQmF0Y2hlcyhwb3N0czogQ2FtcGFpZ25Qb3N0W10sIGNhbXBhaWduSWQ6IHN0cmluZyk6IENhbXBhaWduQmF0Y2hbXSB7XG4gICAgY29uc3QgYmF0Y2hlczogQ2FtcGFpZ25CYXRjaFtdID0gW107XG4gICAgXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb3N0cy5sZW5ndGg7IGkgKz0gdGhpcy5CQVRDSF9TSVpFKSB7XG4gICAgICBjb25zdCBiYXRjaFBvc3RzID0gcG9zdHMuc2xpY2UoaSwgaSArIHRoaXMuQkFUQ0hfU0laRSk7XG4gICAgICBiYXRjaGVzLnB1c2goe1xuICAgICAgICBjYW1wYWlnbklkOiBgJHtjYW1wYWlnbklkfV9iYXRjaF8ke2JhdGNoZXMubGVuZ3RofWAsXG4gICAgICAgIHBvc3RzOiBiYXRjaFBvc3RzLFxuICAgICAgICBwcm9jZXNzaW5nU3RhdHVzOiAncGVuZGluZycsXG4gICAgICAgIHByb2Nlc3NlZENvdW50OiAwLFxuICAgICAgICB0b3RhbENvdW50OiBiYXRjaFBvc3RzLmxlbmd0aFxuICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiBiYXRjaGVzO1xuICB9XG5cbiAgcHJpdmF0ZSBhc3luYyBwcm9jZXNzQmF0Y2goYmF0Y2g6IENhbXBhaWduQmF0Y2gsIGNvbnZleE11dGF0aW9uczogQ29udmV4TXV0YXRpb25zLCBzZXNzaW9uSWQ6IHN0cmluZyk6IFByb21pc2U8dm9pZD4ge1xuICAgIGJhdGNoLnByb2Nlc3NpbmdTdGF0dXMgPSAncHJvY2Vzc2luZyc7XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIGNvbnN0IHBvc3RQcm9taXNlcyA9IGJhdGNoLnBvc3RzLm1hcChhc3luYyAocG9zdCkgPT4ge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIGF3YWl0IGNvbnZleE11dGF0aW9ucy51cHNlcnRQb3N0KHtcbiAgICAgICAgICAgIGZpbGVOYW1lOiBgJHtwb3N0LnBsYXRmb3JtfV8ke3Bvc3QubWV0YWRhdGEud2Vla31fJHtwb3N0Lm1ldGFkYXRhLmRheU9mV2Vla31fJHtEYXRlLm5vdygpfWAsXG4gICAgICAgICAgICBmaWxlVHlwZTogcG9zdC5wbGF0Zm9ybSBhcyBhbnksXG4gICAgICAgICAgICBjb250ZW50OiBwb3N0LmNvbnRlbnQsXG4gICAgICAgICAgICB0aXRsZTogYFdlZWsgJHtwb3N0Lm1ldGFkYXRhLndlZWt9IC0gJHtwb3N0Lm1ldGFkYXRhLmNhbXBhaWduUGhhc2V9YCxcbiAgICAgICAgICAgIHBsYXRmb3JtRGF0YTogSlNPTi5zdHJpbmdpZnkoe1xuICAgICAgICAgICAgICBzY2hlZHVsZWREYXRlOiBwb3N0LnNjaGVkdWxlZERhdGUsXG4gICAgICAgICAgICAgIHNjaGVkdWxlZFRpbWU6IHBvc3Quc2NoZWR1bGVkVGltZSxcbiAgICAgICAgICAgICAgaGFzaHRhZ3M6IHBvc3QubWV0YWRhdGEuaGFzaHRhZ3MsXG4gICAgICAgICAgICAgIGNhbXBhaWduSWQ6IHBvc3QubWV0YWRhdGEuY2FtcGFpZ25JZCxcbiAgICAgICAgICAgICAgYmF0Y2hJZDogcG9zdC5tZXRhZGF0YS5iYXRjaElkLFxuICAgICAgICAgICAgICB3ZWVrOiBwb3N0Lm1ldGFkYXRhLndlZWssXG4gICAgICAgICAgICAgIGRheU9mV2VlazogcG9zdC5tZXRhZGF0YS5kYXlPZldlZWssXG4gICAgICAgICAgICAgIGNhbXBhaWduUGhhc2U6IHBvc3QubWV0YWRhdGEuY2FtcGFpZ25QaGFzZSxcbiAgICAgICAgICAgICAgY29udGVudFR5cGU6IHBvc3QubWV0YWRhdGEuY29udGVudFR5cGVcbiAgICAgICAgICAgIH0pLFxuICAgICAgICAgICAgc3RhdHVzOiAnc2NoZWR1bGVkJyxcbiAgICAgICAgICAgIHNjaGVkdWxlZEZvcjogbmV3IERhdGUoYCR7cG9zdC5zY2hlZHVsZWREYXRlfVQke3Bvc3Quc2NoZWR1bGVkVGltZX1gKS5nZXRUaW1lKClcbiAgICAgICAgICB9KTtcbiAgICAgICAgICBcbiAgICAgICAgICBiYXRjaC5wcm9jZXNzZWRDb3VudCsrO1xuICAgICAgICAgIFxuICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgIGNvbnNvbGUuZXJyb3IoJ0Vycm9yIHByb2Nlc3NpbmcgcG9zdDonLCBlcnJvcik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgICAgXG4gICAgICBhd2FpdCBQcm9taXNlLmFsbChwb3N0UHJvbWlzZXMpO1xuICAgICAgYmF0Y2gucHJvY2Vzc2luZ1N0YXR1cyA9ICdjb21wbGV0ZWQnO1xuICAgICAgXG4gICAgfSBjYXRjaCAoZXJyb3IpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IoJ0JhdGNoIHByb2Nlc3NpbmcgZXJyb3I6JywgZXJyb3IpO1xuICAgICAgYmF0Y2gucHJvY2Vzc2luZ1N0YXR1cyA9ICdmYWlsZWQnO1xuICAgIH1cbiAgfVxuXG4gIHByaXZhdGUgaGFuZGxlQmF0Y2hDb21wbGV0aW9uKGlucHV0OiBzdHJpbmcsIHNlc3Npb246IERpcmVjdG9yU2Vzc2lvbik6IHN0cmluZyB7XG4gICAgY29uc3QgY29tcGxldGVkQmF0Y2hlcyA9IEFycmF5LmZyb20oc2Vzc2lvbi5hY3RpdmVDYW1wYWlnbnMudmFsdWVzKCkpXG4gICAgICAuZmlsdGVyKGJhdGNoID0+IGJhdGNoLnByb2Nlc3NpbmdTdGF0dXMgPT09ICdjb21wbGV0ZWQnKTtcbiAgICBcbiAgICBjb25zdCB0b3RhbEJhdGNoZXMgPSBzZXNzaW9uLmFjdGl2ZUNhbXBhaWducy5zaXplO1xuICAgIGNvbnN0IHRvdGFsUHJvY2Vzc2VkID0gY29tcGxldGVkQmF0Y2hlcy5yZWR1Y2UoKHN1bSwgYmF0Y2gpID0+IHN1bSArIGJhdGNoLnByb2Nlc3NlZENvdW50LCAwKTtcbiAgICBcbiAgICBpZiAoY29tcGxldGVkQmF0Y2hlcy5sZW5ndGggPT09IHRvdGFsQmF0Y2hlcykge1xuICAgICAgc2Vzc2lvbi5jdXJyZW50U3RlcCA9ICdjb21wbGV0ZSc7XG4gICAgICByZXR1cm4gYENhbXBhaWduIENvbXBsZXRlIVxcblxcbkFsbCAke3RvdGFsQmF0Y2hlc30gYmF0Y2hlcyBwcm9jZXNzZWQgc3VjY2Vzc2Z1bGx5LlxcblRvdGFsIHBvc3RzIGNyZWF0ZWQ6ICR7dG90YWxQcm9jZXNzZWR9XFxuQ2FtcGFpZ246ICR7c2Vzc2lvbi5jYW1wYWlnbk5hbWV9XFxuXFxuWW91ciBjb21wcmVoZW5zaXZlIG1hcmtldGluZyBjYW1wYWlnbiBpcyBub3cgc2NoZWR1bGVkIGFuZCByZWFkeSFgO1xuICAgIH1cbiAgICBcbiAgICByZXR1cm4gYFByb2dyZXNzIFVwZGF0ZTpcXG5Db21wbGV0ZWQ6ICR7Y29tcGxldGVkQmF0Y2hlcy5sZW5ndGh9LyR7dG90YWxCYXRjaGVzfSBiYXRjaGVzXFxuUG9zdHMgcHJvY2Vzc2VkOiAke3RvdGFsUHJvY2Vzc2VkfVxcbkNvbnRpbnVpbmcgY2FtcGFpZ24gZ2VuZXJhdGlvbi4uLmA7XG4gIH1cbn1cblxuZXhwb3J0IGNvbnN0IGRpcmVjdG9yQWdlbnQgPSBuZXcgRGlyZWN0b3JBZ2VudCgpO1xuIl0sIm5hbWVzIjpbIkJhc2VBZ2VudCIsIkRpcmVjdG9yQWdlbnQiLCJleGVjdXRlIiwidG9vbCIsImlucHV0IiwiY29udmV4TXV0YXRpb25zIiwic2Vzc2lvbklkIiwiY29uc29sZSIsImxvZyIsImV4aXN0aW5nU2Vzc2lvbiIsInNlc3Npb25zIiwiaGFzIiwic2V0IiwiY3VycmVudFN0ZXAiLCJhY3RpdmVDYW1wYWlnbnMiLCJNYXAiLCJzZXNzaW9uIiwiZ2V0IiwiaW5zdHJ1Y3Rpb25zRmlsZSIsInRyaW0iLCJpbmNsdWRlcyIsInN0YXJ0c1dpdGgiLCJjYW1wYWlnbk5hbWUiLCJwcm9qZWN0IiwiY3JlYXRlUHJvamVjdCIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsInN0YXR1cyIsImNhbXBhaWduUHJvamVjdElkIiwiX2lkIiwiY2FtcGFpZ25Qcm9qZWN0TmFtZSIsInN0b3JlQ2hhdE1lc3NhZ2UiLCJyb2xlIiwiY29udGVudCIsImludGVyYWN0aXZlQ29tcG9uZW50IiwidHlwZSIsImRhdGEiLCJmaWxlVHlwZSIsImZpbHRlckJ5RXh0ZW5zaW9uIiwicGxhY2Vob2xkZXIiLCJlcnJvciIsImZpbGVOYW1lIiwicmVwbGFjZSIsImZpbGVzIiwiZ2V0QWxsRmlsZXMiLCJsZW5ndGgiLCJtYXAiLCJmIiwiaW5zdHJ1Y3Rpb25GaWxlIiwiZmluZCIsImluc3RydWN0aW9uc0NvbnRlbnQiLCJkdXJhdGlvbiIsInBsYXRmb3JtcyIsInBvc3RzUGVyRGF5IiwiY2FtcGFpZ25Hb2FscyIsInJlc3VsdCIsImdlbmVyYXRlQ2FtcGFpZ24iLCJ0b0xvd2VyQ2FzZSIsInBhcnNlQ2FtcGFpZ25TZXR0aW5ncyIsImhhbmRsZUJhdGNoQ29tcGxldGlvbiIsImxpbmVzIiwic3BsaXQiLCJsaW5lIiwiZmlsdGVyIiwibG93ZXIiLCJtYXRjaCIsInBhcnNlSW50Iiwiam9pbiIsInRvdGFsRGF5cyIsInRvdGFsUG9zdHMiLCJjYW1wYWlnbklkIiwiY2FtcGFpZ24iLCJjcmVhdGVDYW1wYWlnbiIsInN0YXJ0RGF0ZSIsIkRhdGUiLCJ0b0lTT1N0cmluZyIsImVuZERhdGUiLCJub3ciLCJ0ZW1wbGF0ZSIsImFsbFBvc3RzIiwiZ2VuZXJhdGVCYXRjaGVzQXN5bmMiLCJiYXRjaGVzIiwiY3JlYXRlQmF0Y2hlcyIsImZvckVhY2giLCJiYXRjaCIsInByb2Nlc3NJbmRpY2F0b3IiLCJwcm9jZXNzVHlwZSIsImNvbG9yIiwiaSIsInBvc3RzIiwicHJvY2Vzc0JhdGNoIiwiUHJvbWlzZSIsInJlc29sdmUiLCJzZXRUaW1lb3V0IiwiRXJyb3IiLCJtZXNzYWdlIiwiaW5zdHJ1Y3Rpb25zIiwiZGF5cyIsInBsYXRmb3JtIiwid2VlayIsIk1hdGgiLCJmbG9vciIsImRheUluZGV4IiwiZGF5IiwidGltZSIsImdldE9wdGltYWxQb3N0VGltZSIsInBvc3REYXRlIiwic2V0RGF0ZSIsImdldERhdGUiLCJwaGFzZXMiLCJwaGFzZUluZGV4IiwicGhhc2UiLCJtaW4iLCJjb250ZW50VHlwZXMiLCJjb250ZW50VHlwZSIsImdlbmVyYXRlUGxhdGZvcm1Db250ZW50IiwicHVzaCIsInNjaGVkdWxlZERhdGUiLCJzY2hlZHVsZWRUaW1lIiwibWV0YWRhdGEiLCJkYXlPZldlZWsiLCJjYW1wYWlnblBoYXNlIiwiaGFzaHRhZ3MiLCJnZW5lcmF0ZUhhc2h0YWdzIiwiYmF0Y2hJZCIsIkJBVENIX1NJWkUiLCJ0aW1lcyIsInR3aXR0ZXIiLCJsaW5rZWRpbiIsImluc3RhZ3JhbSIsImZhY2Vib29rIiwicGxhdGZvcm1UaW1lcyIsImJyYW5kVm9pY2UiLCJleHRyYWN0QnJhbmRWb2ljZSIsImF1ZGllbmNlIiwiZXh0cmFjdEF1ZGllbmNlIiwic3Vic3RyaW5nIiwidm9pY2VLZXl3b3JkcyIsImxvd2VySW5zdHJ1Y3Rpb25zIiwia2V5d29yZCIsImNoYXJBdCIsInRvVXBwZXJDYXNlIiwic2xpY2UiLCJhdWRpZW5jZUtleXdvcmRzIiwiYmFzZUhhc2h0YWdzIiwicGhhc2VIYXNodGFncyIsImF3YXJlbmVzcyIsImNvbnNpZGVyYXRpb24iLCJjb252ZXJzaW9uIiwicmV0ZW50aW9uIiwiY29udGVudEhhc2h0YWdzIiwiZWR1Y2F0aW9uYWwiLCJwcm9tb3Rpb25hbCIsImVuZ2FnZW1lbnQiLCJhbm5vdW5jZW1lbnQiLCJiYXRjaFBvc3RzIiwicHJvY2Vzc2luZ1N0YXR1cyIsInByb2Nlc3NlZENvdW50IiwidG90YWxDb3VudCIsInBvc3RQcm9taXNlcyIsInBvc3QiLCJ1cHNlcnRQb3N0IiwidGl0bGUiLCJwbGF0Zm9ybURhdGEiLCJKU09OIiwic3RyaW5naWZ5Iiwic2NoZWR1bGVkRm9yIiwiZ2V0VGltZSIsImFsbCIsImNvbXBsZXRlZEJhdGNoZXMiLCJBcnJheSIsImZyb20iLCJ2YWx1ZXMiLCJ0b3RhbEJhdGNoZXMiLCJzaXplIiwidG90YWxQcm9jZXNzZWQiLCJyZWR1Y2UiLCJzdW0iLCJpZCIsImljb24iLCJNQVhfQ09OQ1VSUkVOVF9CQVRDSEVTIiwidG9vbHMiLCJjb21tYW5kIiwicGFyYW1ldGVycyIsImRpcmVjdG9yQWdlbnQiXSwiaWdub3JlTGlzdCI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(app-pages-browser)/./store/agents/directorAgent.ts\n"));

/***/ })

});