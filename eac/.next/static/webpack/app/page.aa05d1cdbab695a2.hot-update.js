"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./lib/api/openai-images.ts":
/*!**********************************!*\
  !*** ./lib/api/openai-images.ts ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   generateLogoBase64: () => (/* binding */ generateLogoBase64),\n/* harmony export */   generateLogoWithOpenAI: () => (/* binding */ generateLogoWithOpenAI),\n/* harmony export */   optimizeLogoPrompt: () => (/* binding */ optimizeLogoPrompt),\n/* harmony export */   validateOpenAIConfig: () => (/* binding */ validateOpenAIConfig)\n/* harmony export */ });\n/* harmony import */ var openai__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! openai */ \"(app-pages-browser)/../node_modules/.pnpm/openai@5.12.2_zod@3.25.76/node_modules/openai/index.mjs\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/../node_modules/.pnpm/next@15.3.5_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/polyfills/process.js\");\n// OpenAI DALL-E Logo Generation API\n// Consolidated image generation using OpenAI DALL-E\n// /Users/matthewsimon/Projects/eac/eac/lib/api/openai-images.ts\n\n/**\n * Create OpenAI client instance (server-side only)\n * This prevents client-side initialization errors\n */ function createOpenAIClient() {\n    if (!process.env.OPENAI_API_KEY) {\n        throw new Error('OPENAI_API_KEY environment variable is missing or empty');\n    }\n    return new openai__WEBPACK_IMPORTED_MODULE_0__[\"default\"]({\n        apiKey: process.env.OPENAI_API_KEY\n    });\n}\n/**\n * Generate a logo using OpenAI DALL-E 3\n * Consolidated system with unified prompts and optimizations\n */ async function generateLogoWithOpenAI(options) {\n    try {\n        console.log('üé® OpenAI DALL-E logo generation started:', {\n            prompt: options.prompt,\n            style: options.style || 'vivid',\n            size: options.size || '1024x1024',\n            quality: options.quality || 'standard'\n        });\n        // Create OpenAI client (server-side only)\n        const openai1 = createOpenAIClient();\n        // Optimize the prompt for logo generation\n        const optimizedPrompt = optimizeLogoPrompt(options.prompt);\n        const response = await openai1.images.generate({\n            model: \"dall-e-3\",\n            prompt: optimizedPrompt,\n            n: 1,\n            size: options.size || '1024x1024',\n            quality: options.quality || 'standard',\n            style: options.style || 'vivid',\n            response_format: 'url'\n        });\n        if (!response.data || response.data.length === 0) {\n            throw new Error('No image data returned from OpenAI');\n        }\n        const imageData = response.data[0];\n        if (!(imageData === null || imageData === void 0 ? void 0 : imageData.url)) {\n            throw new Error('No image URL returned from OpenAI');\n        }\n        console.log('‚úÖ OpenAI DALL-E logo generation successful:', {\n            hasUrl: !!imageData.url,\n            revisedPrompt: imageData.revised_prompt ? 'Yes' : 'No'\n        });\n        return {\n            success: true,\n            imageUrl: imageData.url,\n            revisedPrompt: imageData.revised_prompt || options.prompt,\n            metadata: {\n                model: 'dall-e-3',\n                style: options.style || 'vivid',\n                size: options.size || '1024x1024',\n                quality: options.quality || 'standard',\n                generatedAt: new Date().toISOString()\n            }\n        };\n    } catch (error) {\n        console.error('‚ùå OpenAI DALL-E logo generation failed:', error);\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : 'Unknown error occurred'\n        };\n    }\n}\n/**\n * Optimize prompt for professional logo generation with DALL-E 3\n * Consolidated system prompt engineering for consistent results\n */ function optimizeLogoPrompt(userPrompt) {\n    // Clean and prepare the user input\n    const cleanPrompt = userPrompt.trim();\n    // If the prompt already contains logo-specific language, use it as-is\n    if (cleanPrompt.toLowerCase().includes('logo') || cleanPrompt.toLowerCase().includes('brand') || cleanPrompt.toLowerCase().includes('symbol')) {\n        return enhanceLogoPrompt(cleanPrompt);\n    }\n    // Otherwise, add logo-specific context\n    const logoPrompt = \"Professional logo design for \".concat(cleanPrompt);\n    return enhanceLogoPrompt(logoPrompt);\n}\n/**\n * Enhanced logo prompt with professional design specifications\n * Unified system prompt for consistent branding results\n */ function enhanceLogoPrompt(basePrompt) {\n    return \"\".concat(basePrompt, \", clean modern design, vector style illustration, high contrast, scalable, professional branding, minimalist aesthetic, suitable for business use, white or transparent background, crisp lines, bold colors, memorable visual identity\");\n}\n/**\n * Alternative: Generate logo with base64 response for direct embedding\n */ async function generateLogoBase64(options) {\n    try {\n        const optimizedPrompt = optimizeLogoPrompt(options.prompt);\n        const response = await openai.images.generate({\n            model: \"dall-e-3\",\n            prompt: optimizedPrompt,\n            n: 1,\n            size: options.size || '1024x1024',\n            quality: options.quality || 'standard',\n            style: options.style || 'vivid',\n            response_format: 'b64_json'\n        });\n        if (!response.data || response.data.length === 0) {\n            throw new Error('No image data returned from OpenAI');\n        }\n        const imageData = response.data[0];\n        if (!(imageData === null || imageData === void 0 ? void 0 : imageData.b64_json)) {\n            throw new Error('No image data returned from OpenAI');\n        }\n        return {\n            success: true,\n            imageData: imageData.b64_json,\n            revisedPrompt: imageData.revised_prompt || options.prompt,\n            metadata: {\n                model: 'dall-e-3',\n                style: options.style || 'vivid',\n                size: options.size || '1024x1024',\n                quality: options.quality || 'standard',\n                generatedAt: new Date().toISOString()\n            }\n        };\n    } catch (error) {\n        console.error('‚ùå OpenAI DALL-E base64 generation failed:', error);\n        return {\n            success: false,\n            error: error instanceof Error ? error.message : 'Unknown error occurred'\n        };\n    }\n}\n/**\n * Validate OpenAI API configuration\n */ function validateOpenAIConfig() {\n    if (!process.env.OPENAI_API_KEY) {\n        return {\n            isValid: false,\n            error: 'OPENAI_API_KEY environment variable is not set'\n        };\n    }\n    if (!process.env.OPENAI_API_KEY.startsWith('sk-')) {\n        return {\n            isValid: false,\n            error: 'Invalid OPENAI_API_KEY format (should start with sk-)'\n        };\n    }\n    return {\n        isValid: true\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/api/openai-images.ts\n"));

/***/ })

});