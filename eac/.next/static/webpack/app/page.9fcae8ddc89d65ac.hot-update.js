"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./store/agents/twitterAgent.ts":
/*!**************************************!*\
  !*** ./store/agents/twitterAgent.ts ***!
  \**************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   TwitterAgent: () => (/* binding */ TwitterAgent),\n/* harmony export */   twitterAgent: () => (/* binding */ twitterAgent)\n/* harmony export */ });\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ \"(app-pages-browser)/./store/agents/base.ts\");\n/* provided dependency */ var process = __webpack_require__(/*! process */ \"(app-pages-browser)/../node_modules/.pnpm/next@15.3.5_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/build/polyfills/process.js\");\n// Twitter Agent\n// /Users/matthewsimon/Projects/eac/eac/store/agents/twitterAgent.ts\n\nclass TwitterAgent extends _base__WEBPACK_IMPORTED_MODULE_0__.BaseAgent {\n    async execute(tool, input, convexMutations) {\n        if (tool.id === \"create-twitter-post\") {\n            return await this.createTwitterPost(input, convexMutations);\n        }\n        throw new Error(\"Unknown tool: \".concat(tool.id));\n    }\n    async createTwitterPost(input, convexMutations) {\n        try {\n            console.log('\\uD83D\\uDC26 Twitter Agent: Processing request: \"'.concat(input, '\"'));\n            console.log(\"üåç Execution environment:\",  true ? 'client' : 0);\n            console.log(\"üìÅ Current working directory:\", process.cwd ? process.cwd() : 'N/A');\n            // Clean the input by removing the command\n            let cleanInput = input.trim();\n            // Remove the /twitter command if present\n            if (cleanInput.startsWith(\"/twitter\")) {\n                cleanInput = cleanInput.replace(\"/twitter\", \"\").trim();\n            }\n            if (!cleanInput) {\n                return \"‚ùå Please provide content for your Twitter post. Example: /twitter Check out our new dashboard!\";\n            }\n            try {\n                // Parse parameters from input first\n                const params = this.parseTwitterParameters(cleanInput);\n                // Try to import the modular tools first\n                let processTwitterRequest;\n                let useEditorStore;\n                console.log(\"üîç Attempting to import advanced Twitter tools...\");\n                try {\n                    console.log(\"ÔøΩ Trying multiple import paths for Twitter tools...\");\n                    let twitterTools;\n                    try {\n                        console.log(\"ÔøΩüîó Attempt 1: ../../lib/twitter-tools/index.mjs\");\n                        twitterTools = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_lib_twitter-tools_index_mjs\").then(__webpack_require__.bind(__webpack_require__, /*! ../../lib/twitter-tools/index.mjs */ \"(app-pages-browser)/./lib/twitter-tools/index.mjs\"));\n                    } catch (e1) {\n                        console.log(\"‚ùå Attempt 1 failed:\", e1 instanceof Error ? e1.message : String(e1));\n                        try {\n                            console.log(\"üîó Attempt 2: ../../lib/twitter-tools/index.js\");\n                            twitterTools = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_lib_twitter-tools_index_js\").then(__webpack_require__.t.bind(__webpack_require__, /*! ../../lib/twitter-tools/index.js */ \"(app-pages-browser)/./lib/twitter-tools/index.js\", 23));\n                        } catch (e2) {\n                            console.log(\"‚ùå Attempt 2 failed:\", e2 instanceof Error ? e2.message : String(e2));\n                            try {\n                                console.log(\"üîó Attempt 3: ../../lib/twitter-tools\");\n                                twitterTools = await __webpack_require__.e(/*! import() */ \"_app-pages-browser_lib_twitter-tools_index_js\").then(__webpack_require__.t.bind(__webpack_require__, /*! ../../lib/twitter-tools */ \"(app-pages-browser)/./lib/twitter-tools/index.js\", 23));\n                            } catch (e3) {\n                                console.log(\"‚ùå Attempt 3 failed:\", e3 instanceof Error ? e3.message : String(e3));\n                                const e1Msg = e1 instanceof Error ? e1.message : String(e1);\n                                const e2Msg = e2 instanceof Error ? e2.message : String(e2);\n                                const e3Msg = e3 instanceof Error ? e3.message : String(e3);\n                                throw new Error(\"All import attempts failed: \".concat(e1Msg, \", \").concat(e2Msg, \", \").concat(e3Msg));\n                            }\n                        }\n                    }\n                    console.log(\"‚úÖ Twitter tools imported successfully:\", Object.keys(twitterTools));\n                    processTwitterRequest = twitterTools.processTwitterRequest;\n                    console.log(\"üîó Importing editor store...\");\n                    const editorModule = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../ */ \"(app-pages-browser)/./store/index.ts\"));\n                    useEditorStore = editorModule.useEditorStore;\n                    console.log(\"‚úÖ Editor store imported successfully\");\n                } catch (importError) {\n                    console.warn(\"‚ö†Ô∏è Could not import advanced Twitter tools, using simplified implementation:\", importError);\n                    // Fallback to create a basic implementation\n                    return await this.createSimpleTwitterPost(cleanInput, params);\n                }\n                console.log(\"üöÄ Using advanced Twitter tools to process request...\");\n                // Use the modular tools processor\n                const result = await processTwitterRequest({\n                    userInput: params.content,\n                    suggestedProject: params.project,\n                    schedule: params.schedule,\n                    settings: params.settings\n                }, useEditorStore.getState() // Pass the store state, not the hook\n                );\n                console.log(\"üìã Advanced tools result:\", result);\n                if (!result.success) {\n                    return \"‚ùå Error processing Twitter request: \".concat(result.message);\n                }\n                // Step 1: Create project folder if it's a new project\n                if (result.project.isNewProject) {\n                    const { useEditorStore } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../ */ \"(app-pages-browser)/./store/index.ts\"));\n                    const editorStore = useEditorStore.getState();\n                    await editorStore.createFolder(result.project.projectName, \"project\");\n                }\n                // Step 2: Create the .x file in the selected project with full content\n                const fileName = await this.createTwitterFile(result, convexMutations);\n                // Step 3: Fill form fields and apply default settings\n                const formData = this.prepareTwitterFormData({\n                    content: result.content.content,\n                    project: result.project.projectName,\n                    schedule: params.schedule,\n                    settings: params.settings\n                });\n                // Step 3.1: Actually populate the form fields with the processed data\n                await this.fillTwitterFormFieldsWithData(fileName, result.content.content, formData);\n                // Step 4: Handle scheduling if requested\n                let schedulingResult = \"\";\n                if (params.schedule) {\n                    schedulingResult = await this.handleTwitterScheduling(params.schedule, result.content.content, result.project.projectName);\n                }\n                // Success response\n                return '\\uD83D\\uDC26 **Twitter Post Created Successfully!**\\n\\n**Content:** \"'.concat(result.content.content.substring(0, 100)).concat(result.content.content.length > 100 ? '...' : '', '\"\\n**Project:** ').concat(result.project.projectName, \"\\n**File:** `\").concat(fileName, \"`\\n**Topic:** \").concat(result.content.detectedTopic, \"\\n**Style:** \").concat(result.content.style, \"\\n\\n**Form Status:** ‚úÖ Pre-filled and ready to post\\n**Reply Settings:** Applied (\").concat(formData.replySettings, \")\\n\\n\").concat(schedulingResult, \"\\n\\n*The Twitter post form has been populated and is ready for review. Open the file to make any final edits before posting.*\");\n            } catch (error) {\n                console.error(\"‚ùå Twitter post creation failed:\", error);\n                return '‚ùå **Error Creating Twitter Post**\\n\\nFailed to process: \"'.concat(input, '\"\\n\\nError: ').concat(error instanceof Error ? error.message : 'Unknown error', \"\\n\\nPlease try again or check if:\\n- The content is appropriate for Twitter\\n- The project name is valid\\n- The scheduling format is correct (e.g., 'tomorrow 2pm', 'Dec 25 9am')\");\n            }\n        } catch (error) {\n            console.error(\"‚ùå Twitter agent execution failed:\", error);\n            return '‚ùå **Twitter Agent Error**\\n\\nFailed to execute Twitter agent for: \"'.concat(input, '\"\\n\\nError: ').concat(error instanceof Error ? error.message : 'Unknown error', \"\\n\\nPlease try again with a different approach or contact support.\");\n        }\n    }\n    parseTwitterParameters(input) {\n        const params = {\n            content: input,\n            project: undefined,\n            schedule: undefined,\n            settings: undefined\n        };\n        // Extract project parameter\n        const projectMatch = input.match(/--project[=\\s]+([^\\s]+)/i);\n        if (projectMatch) {\n            params.project = projectMatch[1];\n            params.content = params.content.replace(projectMatch[0], '').trim();\n        }\n        // Extract schedule parameter\n        const scheduleMatch = input.match(/--schedule[=\\s]+\"([^\"]+)\"|--schedule[=\\s]+([^\\s]+)/i);\n        if (scheduleMatch) {\n            params.schedule = scheduleMatch[1] || scheduleMatch[2];\n            params.content = params.content.replace(scheduleMatch[0], '').trim();\n        }\n        // Extract settings parameter\n        const settingsMatch = input.match(/--settings[=\\s]+([^\\s]+)/i);\n        if (settingsMatch) {\n            params.settings = settingsMatch[1];\n            params.content = params.content.replace(settingsMatch[0], '').trim();\n        }\n        return params;\n    }\n    async createTwitterFile(content, projectName, convexMutations) {\n        try {\n            const { useEditorStore } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../ */ \"(app-pages-browser)/./store/index.ts\"));\n            const editorStore = useEditorStore.getState();\n            // Generate unique filename\n            const timestamp = new Date().toISOString().split('T')[0];\n            const hash = Math.random().toString(36).substring(2, 8);\n            const fileName = \"twitter-post-\".concat(timestamp, \"-\").concat(hash, \".x\");\n            // Find the project folder\n            const projectFolder = editorStore.projectFolders.find((folder)=>folder.name === projectName);\n            if (projectFolder) {\n                // Create file in the project\n                editorStore.createNewFile(fileName, \"x\", \"project\", projectFolder.id);\n            } else {\n                // Create file at root level if project not found\n                editorStore.createNewFile(fileName, \"x\", \"project\");\n            }\n            // Save to database\n            try {\n                await convexMutations.upsertPost({\n                    fileName: fileName,\n                    fileType: 'twitter',\n                    content: content,\n                    status: 'draft'\n                });\n                console.log(\"‚úÖ Twitter post saved to database:\", fileName);\n            } catch (dbError) {\n                console.warn(\"‚ö†Ô∏è Failed to save to database:\", dbError);\n            // Continue anyway - file was created locally\n            }\n            return fileName;\n        } catch (error) {\n            console.error(\"‚ùå Failed to create Twitter file:\", error);\n            throw new Error(\"Failed to create Twitter file: \".concat(error instanceof Error ? error.message : 'Unknown error'));\n        }\n    }\n    async createTwitterFileSimple(content, projectName) {\n        try {\n            const { useEditorStore } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../ */ \"(app-pages-browser)/./store/index.ts\"));\n            const editorStore = useEditorStore.getState();\n            // Generate unique filename\n            const timestamp = new Date().toISOString().split('T')[0];\n            const hash = Math.random().toString(36).substring(2, 8);\n            const fileName = \"twitter-post-\".concat(timestamp, \"-\").concat(hash, \".x\");\n            // Find the project folder\n            const projectFolder = editorStore.projectFolders.find((folder)=>folder.name === projectName);\n            if (projectFolder) {\n                // Create file in the project\n                editorStore.createNewFile(fileName, \"x\", \"project\", projectFolder.id);\n            } else {\n                // Create file at root level if project not found\n                editorStore.createNewFile(fileName, \"x\", \"project\");\n            }\n            return fileName;\n        } catch (error) {\n            console.error(\"‚ùå Failed to create Twitter file:\", error);\n            throw new Error(\"Failed to create Twitter file: \".concat(error instanceof Error ? error.message : 'Unknown error'));\n        }\n    }\n    prepareTwitterFormData(params) {\n        return {\n            replySettings: this.mapTwitterSettingsToAPI(params.settings),\n            scheduledDate: params.schedule ? this.parseScheduleDateComponent(params.schedule) : \"\",\n            scheduledTime: params.schedule ? this.parseScheduleTimeComponent(params.schedule) : \"\",\n            isThread: this.detectThreadIntent(params.content),\n            threadTweets: this.splitIntoThreadTweets(params.content),\n            hasPoll: false,\n            pollOptions: [\n                \"\",\n                \"\"\n            ],\n            pollDuration: 1440\n        };\n    }\n    async fillTwitterFormFieldsWithData(fileName, content, preparedFormData) {\n        try {\n            // Use the already prepared platform data\n            const platformData = {\n                replySettings: preparedFormData.replySettings,\n                scheduledDate: \"\",\n                scheduledTime: \"\",\n                isThread: preparedFormData.isThread,\n                threadTweets: preparedFormData.threadTweets,\n                hasPoll: preparedFormData.hasPoll,\n                pollOptions: preparedFormData.pollOptions,\n                pollDuration: preparedFormData.pollDuration\n            };\n            // Log what we're doing for debugging\n            console.log(\"\\uD83D\\uDCDD Filling Twitter form fields for \".concat(fileName, \":\"), {\n                content: content.substring(0, 50) + \"...\",\n                replySettings: platformData.replySettings,\n                status: \"draft\"\n            });\n            // Instead of trying to use Convex directly (which fails in server context),\n            // let's create a temporary storage mechanism that the client can pick up\n            try {\n                // Store the form data in localStorage for the client to pick up\n                if (true) {\n                    const formDataKey = \"twitter-form-\".concat(fileName);\n                    const formDataToStore = {\n                        content: content,\n                        platformData: platformData,\n                        timestamp: Date.now(),\n                        status: 'draft'\n                    };\n                    localStorage.setItem(formDataKey, JSON.stringify(formDataToStore));\n                    console.log(\"‚úÖ Twitter form data stored in localStorage for \".concat(fileName));\n                } else {}\n            } catch (storageError) {\n                console.warn(\"‚ö†Ô∏è Could not store form data:\", storageError);\n                console.log(\"üìù Form data will be loaded from file content when editor opens\");\n            }\n        } catch (error) {\n            console.error(\"‚ùå Failed to prepare Twitter form fields:\", error);\n        }\n    }\n    // Helper methods\n    mapTwitterSettingsToAPI(settings) {\n        if (!settings) return \"following\";\n        switch(settings.toLowerCase()){\n            case \"everyone\":\n                return \"following\";\n            case \"followers\":\n                return \"following\";\n            case \"mentioned-users\":\n                return \"mentionedUsers\";\n            case \"verified-accounts\":\n                return \"verified\";\n            default:\n                return \"following\";\n        }\n    }\n    parseScheduleDateComponent(schedule) {\n        const date = this.parseScheduleString(schedule);\n        if (!date) return \"\";\n        // Return YYYY-MM-DD format for HTML date input\n        return date.toISOString().split(\"T\")[0];\n    }\n    parseScheduleTimeComponent(schedule) {\n        const date = this.parseScheduleString(schedule);\n        if (!date) return \"\";\n        // Return HH:MM format for HTML time input\n        return date.toTimeString().slice(0, 5);\n    }\n    parseScheduleString(schedule) {\n        // Implementation would parse natural language dates\n        // For now, return null to indicate no valid date\n        return null;\n    }\n    detectThreadIntent(content) {\n        // Simple thread detection logic\n        return content.length > 280 || content.includes('\\n\\n') || content.includes('1/');\n    }\n    splitIntoThreadTweets(content) {\n        if (!this.detectThreadIntent(content)) {\n            return [\n                content\n            ];\n        }\n        // Simple thread splitting logic\n        const parts = content.split('\\n\\n').filter((part)=>part.trim());\n        return parts.length > 1 ? parts : [\n            content\n        ];\n    }\n    async handleTwitterScheduling(schedule, content, projectName) {\n        // Placeholder for scheduling logic\n        return '\\uD83D\\uDCC5 **Scheduling:** Post will be scheduled for \"'.concat(schedule, '\" (feature coming soon)');\n    }\n    async createSimpleTwitterPost(content, params) {\n        try {\n            // Simple implementation when advanced tools can't be loaded\n            const { useEditorStore } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! ../ */ \"(app-pages-browser)/./store/index.ts\"));\n            const editorStore = useEditorStore.getState();\n            const projectName = params.project || \"Twitter Posts\";\n            // Create project folder if needed\n            const existingProject = editorStore.projectFolders.find((folder)=>folder.name === projectName);\n            if (!existingProject) {\n                await editorStore.createFolder(projectName, \"project\");\n            }\n            // Create the file (simple version without database save)\n            const fileName = await this.createTwitterFileSimple(content, projectName);\n            return '\\uD83D\\uDC26 **Twitter Post Created Successfully!**\\n\\n**Content:** \"'.concat(content.substring(0, 100)).concat(content.length > 100 ? '...' : '', '\"\\n**Project:** ').concat(projectName, \"\\n**File:** `\").concat(fileName, \"`\\n**Status:** Draft\\n\\n*This is a basic implementation. The full Twitter agent with form population will be available when you're signed in and using the editor interface.*\\n\\n**Next Steps:**\\n1. Sign in to access the full editor\\n2. Open the Twitter post file to edit and publish\\n3. Use the form interface for advanced scheduling and settings\");\n        } catch (error) {\n            console.error(\"‚ùå Simple Twitter post creation failed:\", error);\n            return '‚ùå **Error Creating Twitter Post**\\n\\nFailed to process: \"'.concat(content, '\"\\n\\nError: ').concat(error instanceof Error ? error.message : 'Unknown error', \"\\n\\nPlease try again or contact support.\");\n        }\n    }\n    constructor(...args){\n        super(...args), this.id = \"twitter-post\", this.name = \"Twitter Post\", this.description = \"Create, schedule, and post Twitter/X content with full workflow automation\", this.icon = \"AtSign\", this.tools = [\n            {\n                id: \"create-twitter-post\",\n                name: \"Create Twitter Post\",\n                command: \"/twitter\",\n                description: \"Generate and publish Twitter/X content with smart project selection\",\n                parameters: [\n                    {\n                        name: \"content\",\n                        type: \"string\",\n                        description: \"The content for your Twitter post\",\n                        required: true\n                    },\n                    {\n                        name: \"project\",\n                        type: \"string\",\n                        description: \"Target project (optional - will auto-select if not specified)\",\n                        required: false\n                    },\n                    {\n                        name: \"schedule\",\n                        type: \"string\",\n                        description: \"Schedule the post (e.g., 'tomorrow 2pm', 'Dec 25 9am')\",\n                        required: false\n                    },\n                    {\n                        name: \"settings\",\n                        type: \"select\",\n                        description: \"Reply settings for the post\",\n                        required: false,\n                        options: [\n                            \"everyone\",\n                            \"followers\",\n                            \"mentioned-users\",\n                            \"verified-accounts\"\n                        ]\n                    }\n                ]\n            }\n        ];\n    }\n}\n// Export singleton instance\nconst twitterAgent = new TwitterAgent();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./store/agents/twitterAgent.ts\n"));

/***/ })

});