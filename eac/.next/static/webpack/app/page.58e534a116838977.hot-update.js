"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./store/agents/projectCreatorAgent.ts":
/*!*********************************************!*\
  !*** ./store/agents/projectCreatorAgent.ts ***!
  \*********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ProjectCreatorAgent: () => (/* binding */ ProjectCreatorAgent),\n/* harmony export */   projectCreatorAgent: () => (/* binding */ projectCreatorAgent)\n/* harmony export */ });\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ \"(app-pages-browser)/./store/agents/base.ts\");\n// Project Creator Agent\n// Creates projects and files on behalf of users using natural language input\n\nclass ProjectCreatorAgent extends _base__WEBPACK_IMPORTED_MODULE_0__.BaseAgent {\n    async execute(tool, input, convexMutations) {\n        console.log('üöÄ ProjectCreatorAgent executing with input:', input);\n        try {\n            return await this.processNaturalLanguageRequest(input, convexMutations);\n        } catch (error) {\n            console.error('‚ùå ProjectCreatorAgent error:', error);\n            return \"‚ùå Failed to process request: \".concat(error instanceof Error ? error.message : 'Unknown error');\n        }\n    }\n    /**\n   * Process natural language requests to create projects and files\n   */ async processNaturalLanguageRequest(input, convexMutations) {\n        const normalizedInput = input.toLowerCase().trim();\n        console.log('üîç Processing natural language input:', normalizedInput);\n        console.log('üîç Has pending project creation:', !!ProjectCreatorAgent.pendingProjectCreation);\n        // Check for pending project creation (project name input response)\n        if (ProjectCreatorAgent.pendingProjectCreation) {\n            const pendingAge = Date.now() - ProjectCreatorAgent.pendingProjectCreation.timestamp;\n            console.log('‚è∞ Pending project creation age (ms):', pendingAge);\n            // If pending request is less than 5 minutes old, try to handle as project name input\n            if (pendingAge < 5 * 60 * 1000) {\n                console.log('üîÑ Trying to handle as project name input...');\n                const projectNameResult = await this.handleProjectNameInput(input, convexMutations);\n                console.log('üìã Project name input result:', projectNameResult);\n                if (projectNameResult) {\n                    console.log('‚úÖ Returning project name input result');\n                    return projectNameResult;\n                } else {\n                    console.log('‚ùå Project name input returned null');\n                    // Don't continue with normal processing - remind user to use the input\n                    return \"‚ö†Ô∏è **Please use the project name input above** to specify the project name.\\n\\nI'm still waiting for you to enter a project name.\\n\\n_To start a new project creation, wait for the current one to complete or cancel it first._\";\n                }\n            } else {\n                // Clear expired pending request\n                console.log('‚è∞ Clearing expired pending request');\n                ProjectCreatorAgent.pendingProjectCreation = null;\n            }\n        }\n        // Detect if this is a project creation request\n        if (this.isProjectCreationRequest(normalizedInput)) {\n            return await this.handleProjectCreation(input, convexMutations);\n        }\n        // Detect if this is a file creation request\n        if (this.isFileCreationRequest(normalizedInput)) {\n            return await this.handleFileCreation(input, convexMutations);\n        }\n        // Detect if this is a template setup request\n        if (this.isTemplateRequest(normalizedInput)) {\n            return await this.handleTemplateSetup(input, convexMutations);\n        }\n        // If we can't determine the intent, provide helpful guidance\n        return this.getHelpMessage();\n    }\n    /**\n   * Check if input is requesting project creation\n   */ isProjectCreationRequest(input) {\n        const projectPatterns = [\n            /create.*project/,\n            /new.*project/,\n            /make.*project/,\n            /start.*project/,\n            /build.*project/,\n            /setup.*project/\n        ];\n        return projectPatterns.some((pattern)=>pattern.test(input));\n    }\n    /**\n   * Check if input is requesting file creation\n   */ isFileCreationRequest(input) {\n        const filePatterns = [\n            /create.*file/,\n            /new.*file/,\n            /make.*file/,\n            /add.*file/,\n            /generate.*file/\n        ];\n        return filePatterns.some((pattern)=>pattern.test(input));\n    }\n    /**\n   * Check if input is requesting template setup\n   */ isTemplateRequest(input) {\n        const templatePatterns = [\n            /template/,\n            /scaffold/,\n            /boilerplate/,\n            /starter/,\n            /preset/\n        ];\n        return templatePatterns.some((pattern)=>pattern.test(input));\n    }\n    /**\n   * Handle project creation from natural language\n   */ async handleProjectCreation(input, convexMutations) {\n        try {\n            // Extract project details from natural language\n            const projectDetails = this.extractProjectDetails(input);\n            console.log('üìä Extracted project details:', projectDetails);\n            // If no specific project name was extracted or it's generic, show the input component\n            if (!projectDetails.name || projectDetails.name === '' || projectDetails.name === 'New Project' || projectDetails.name.length < 3) {\n                return await this.getProjectNameInputPrompt(projectDetails, convexMutations);\n            }\n            if (!convexMutations.createProject) {\n                return '‚ùå Project creation is not available. Please check system configuration.';\n            }\n            // Create the project\n            const newProject = await convexMutations.createProject({\n                name: projectDetails.name,\n                description: projectDetails.description,\n                status: 'active',\n                budget: projectDetails.budget\n            });\n            let result = \"‚úÖ **Project Created Successfully!**\\n\\n\";\n            result += \"\\uD83D\\uDCC1 **Project Name:** \".concat((newProject === null || newProject === void 0 ? void 0 : newProject.name) || projectDetails.name, \"\\n\");\n            if (newProject === null || newProject === void 0 ? void 0 : newProject.projectNumber) {\n                result += \"\\uD83D\\uDD22 **Project Number:** #\".concat(newProject.projectNumber, \"\\n\");\n            }\n            if (projectDetails.description) {\n                result += \"\\uD83D\\uDCDD **Description:** \".concat(projectDetails.description, \"\\n\");\n            }\n            result += \"\\uD83D\\uDCC5 **Created:** \".concat(new Date().toLocaleDateString(), \"\\n\");\n            result += \"\\uD83D\\uDCCA **Status:** Active\\n\\n\";\n            // Create initial files if requested\n            if (projectDetails.createFiles && convexMutations.createFile) {\n                const fileResults = await this.createInitialFiles(newProject, convexMutations);\n                result += \"\\n\\uD83D\\uDCC4 **Initial Files Created:**\\n\".concat(fileResults);\n            }\n            result += \"\\n\\uD83C\\uDF89 Your project is ready! You can now start adding files and managing your project.\";\n            return result;\n        } catch (error) {\n            console.error('‚ùå Project creation failed:', error);\n            return \"‚ùå **Project creation failed:** \".concat(error instanceof Error ? error.message : 'Unknown error');\n        }\n    }\n    /**\n   * Handle project name input response\n   */ async handleProjectNameInput(input, convexMutations) {\n        console.log('üéØ Handling project name input with input:', input);\n        console.log('üìÅ Pending project creation:', ProjectCreatorAgent.pendingProjectCreation);\n        if (!ProjectCreatorAgent.pendingProjectCreation) {\n            console.log('‚ùå No pending project creation found');\n            return null;\n        }\n        const { projectDetails } = ProjectCreatorAgent.pendingProjectCreation;\n        const projectName = input.trim();\n        console.log('üîç Project name input:', projectName);\n        if (!projectName || projectName.length < 2) {\n            return '‚ùå **Please enter a valid project name**\\n\\nProject names should be at least 2 characters long.\\n\\n**Examples:**\\n‚Ä¢ \"Marketing Campaign\"\\n‚Ä¢ \"Website Redesign\"\\n‚Ä¢ \"Q1 Budget Planning\"';\n        }\n        // Clear pending state\n        ProjectCreatorAgent.pendingProjectCreation = null;\n        console.log('‚úÖ Cleared pending project creation');\n        // Create the project with the provided name\n        const updatedProjectDetails = {\n            ...projectDetails,\n            name: projectName\n        };\n        console.log('üìÑ Creating project with details:', updatedProjectDetails);\n        if (!convexMutations.createProject) {\n            return '‚ùå Project creation is not available. Please check system configuration.';\n        }\n        try {\n            // Create the project\n            const newProject = await convexMutations.createProject({\n                name: updatedProjectDetails.name,\n                description: updatedProjectDetails.description,\n                status: 'active',\n                budget: updatedProjectDetails.budget\n            });\n            let result = \"‚úÖ **Project Created Successfully!**\\n\\n\";\n            result += \"\\uD83D\\uDCC1 **Project Name:** \".concat((newProject === null || newProject === void 0 ? void 0 : newProject.name) || updatedProjectDetails.name, \"\\n\");\n            if (newProject === null || newProject === void 0 ? void 0 : newProject.projectNumber) {\n                result += \"\\uD83D\\uDD22 **Project Number:** #\".concat(newProject.projectNumber, \"\\n\");\n            }\n            if (updatedProjectDetails.description) {\n                result += \"\\uD83D\\uDCDD **Description:** \".concat(updatedProjectDetails.description, \"\\n\");\n            }\n            result += \"\\uD83D\\uDCC5 **Created:** \".concat(new Date().toLocaleDateString(), \"\\n\");\n            result += \"\\uD83D\\uDCCA **Status:** Active\\n\\n\";\n            // Create initial files if requested\n            if (updatedProjectDetails.createFiles && convexMutations.createFile) {\n                const fileResults = await this.createInitialFiles(newProject, convexMutations);\n                result += \"\\n\\uD83D\\uDCC4 **Initial Files Created:**\\n\".concat(fileResults);\n            }\n            result += \"\\n\\uD83C\\uDF89 Your project is ready! You can now start adding files and managing your project.\";\n            console.log('üìù Create project result:', result);\n            return result;\n        } catch (error) {\n            console.error('‚ùå Project creation failed:', error);\n            return \"‚ùå **Project creation failed:** \".concat(error instanceof Error ? error.message : 'Unknown error');\n        }\n    }\n    /**\n   * Handle file creation from natural language\n   */ async handleFileCreation(input, convexMutations) {\n        try {\n            const fileDetails = this.extractFileDetails(input);\n            if (!fileDetails.fileName) {\n                return '‚ùå **Could not determine file name**\\n\\nPlease specify what file you want to create.\\n\\n**Examples:**\\n‚Ä¢ \"Create a budget spreadsheet\"\\n‚Ä¢ \"Add a meeting notes file\"\\n‚Ä¢ \"Make a project plan document\"';\n            }\n            if (!fileDetails.projectName) {\n                return '‚ùå **Could not determine project**\\n\\nPlease specify which project to add the file to.\\n\\n**Examples:**\\n‚Ä¢ \"Create a budget file for Marketing Campaign\"\\n‚Ä¢ \"Add notes to the Development Project\"';\n            }\n            if (!convexMutations.createFile) {\n                return '‚ùå File creation is not available. Please check system configuration.';\n            }\n            const content = this.generateFileContent(fileDetails.fileType, fileDetails.fileName);\n            // TODO: Need to look up project by name to get the projectId\n            // For now, this functionality is incomplete without project lookup\n            throw new Error('File creation requires a valid project. Project \"'.concat(fileDetails.projectName, '\" lookup not implemented yet.'));\n            let result = \"‚úÖ **File Created Successfully!**\\n\\n\";\n            result += \"\\uD83D\\uDCC4 **File Name:** \".concat(fileDetails.fileName, \"\\n\");\n            result += \"\\uD83D\\uDCC1 **Project:** \".concat(fileDetails.projectName, \"\\n\");\n            result += \"\\uD83C\\uDFF7Ô∏è **Type:** \".concat(fileDetails.fileType, \"\\n\");\n            result += \"\\uD83D\\uDCC5 **Created:** \".concat(new Date().toLocaleDateString(), \"\\n\\n\");\n            result += \"\\uD83D\\uDCA1 You can now find and edit this file in the sidebar!\";\n            return result;\n        } catch (error) {\n            console.error('‚ùå File creation failed:', error);\n            return \"‚ùå **File creation failed:** \".concat(error instanceof Error ? error.message : 'Unknown error');\n        }\n    }\n    /**\n   * Handle template setup from natural language\n   */ async handleTemplateSetup(input, convexMutations) {\n        try {\n            const templateDetails = this.extractTemplateDetails(input);\n            if (!convexMutations.createProject) {\n                return '‚ùå Project creation is not available. Please check system configuration.';\n            }\n            const projectName = templateDetails.name || \"\".concat(templateDetails.type.charAt(0).toUpperCase() + templateDetails.type.slice(1), \" Project\");\n            const newProject = await convexMutations.createProject({\n                name: projectName,\n                description: this.getTemplateDescription(templateDetails.type),\n                status: 'active',\n                budget: this.getTemplateBudget(templateDetails.type)\n            });\n            // Create template-specific files\n            let templateFiles = '';\n            if (convexMutations.createFile) {\n                templateFiles = await this.createTemplateFiles(newProject, templateDetails.type, convexMutations);\n            }\n            let result = \"‚úÖ **Template Applied Successfully!**\\n\\n\";\n            result += \"\\uD83D\\uDCC1 **Project Name:** \".concat((newProject === null || newProject === void 0 ? void 0 : newProject.name) || projectName, \"\\n\");\n            result += \"\\uD83C\\uDFA8 **Template Type:** \".concat(templateDetails.type.charAt(0).toUpperCase() + templateDetails.type.slice(1), \"\\n\");\n            if (newProject === null || newProject === void 0 ? void 0 : newProject.projectNumber) {\n                result += \"\\uD83D\\uDD22 **Project Number:** #\".concat(newProject.projectNumber, \"\\n\");\n            }\n            if (templateFiles) {\n                result += \"\\n\\uD83D\\uDCC4 **Template Files:**\\n\".concat(templateFiles, \"\\n\");\n            } else {\n                result += \"\\n\";\n            }\n            result += \"\\uD83C\\uDF89 Your template project is ready to use!\";\n            return result;\n        } catch (error) {\n            console.error('‚ùå Template setup failed:', error);\n            return \"‚ùå **Template setup failed:** \".concat(error instanceof Error ? error.message : 'Unknown error');\n        }\n    }\n    /**\n   * Extract project details from natural language input\n   */ extractProjectDetails(input) {\n        const normalizedInput = input.toLowerCase();\n        // Extract project name - more specific patterns that capture actual project names\n        const namePatterns = [\n            // Pattern for \"create project called [name]\" or \"create project named [name]\"\n            /(?:create|new|make|start|build|setup)\\s+(?:a\\s+)?project\\s+(?:called|named)\\s+[\\\"\\']?([^\\\"\\']+?)[\\\"\\']?(?:\\s+for|\\s+with|$)/i,\n            // Pattern for quoted names: \"project name\" or 'project name'\n            /[\\\"\\']([^\\\"\\']{2,})[\\\"\\']/,\n            // Pattern for specific project names after \"create\" (but not generic words)\n            /(?:create|new|make|start|build|setup)\\s+(?:a\\s+)?(?:project\\s+)?[\\\"\\']?([a-zA-Z][a-zA-Z0-9\\s\\-_]{2,})[\\\"\\']?(?:\\s+for|\\s+with|$)/i\n        ];\n        let name = '';\n        for (const pattern of namePatterns){\n            const match = input.match(pattern);\n            if (match && match[1]) {\n                const extractedName = match[1].trim();\n                // Reject generic/vague names that should trigger input prompt\n                const genericNames = [\n                    'project',\n                    'new project',\n                    'a project',\n                    'new',\n                    'it',\n                    'this',\n                    'that',\n                    'one'\n                ];\n                if (!genericNames.includes(extractedName.toLowerCase()) && extractedName.length > 2) {\n                    name = extractedName;\n                    break;\n                }\n            }\n        }\n        // If no specific name found, return empty string to trigger input component\n        if (!name) {\n            name = '';\n        }\n        // Extract description (words after \"for\", \"about\", \"to\")\n        const descriptionMatch = input.match(/(?:for|about|to)\\s+(.+)/i);\n        const description = descriptionMatch ? descriptionMatch[1].trim() : undefined;\n        // Detect project type from keywords\n        const typeKeywords = {\n            marketing: [\n                'marketing',\n                'campaign',\n                'promotion',\n                'advertising',\n                'brand'\n            ],\n            development: [\n                'development',\n                'dev',\n                'app',\n                'website',\n                'software',\n                'code'\n            ],\n            content: [\n                'content',\n                'blog',\n                'article',\n                'writing',\n                'editorial'\n            ],\n            financial: [\n                'financial',\n                'budget',\n                'finance',\n                'accounting',\n                'money'\n            ],\n            social: [\n                'social',\n                'instagram',\n                'twitter',\n                'facebook',\n                'media'\n            ]\n        };\n        let type;\n        for (const [projectType, keywords] of Object.entries(typeKeywords)){\n            if (keywords.some((keyword)=>normalizedInput.includes(keyword))) {\n                type = projectType;\n                break;\n            }\n        }\n        // Extract budget if mentioned\n        const budgetMatch = input.match(/\\$?([\\d,]+)/);\n        const budget = budgetMatch ? parseInt(budgetMatch[1].replace(/,/g, '')) : this.getDefaultBudget(type);\n        // Check if user wants initial files\n        const createFiles = /(?:with|include)\\s+(?:files|documents|templates)/i.test(input);\n        return {\n            name,\n            description,\n            type,\n            budget,\n            createFiles\n        };\n    }\n    /**\n   * Extract file details from natural language input\n   */ extractFileDetails(input) {\n        const normalizedInput = input.toLowerCase();\n        // Extract file name and type\n        let fileName = '';\n        let fileType = 'text';\n        // Common file patterns\n        const filePatterns = [\n            {\n                pattern: /(?:spreadsheet|excel|\\.xlsx?)/,\n                type: 'spreadsheet',\n                extension: '.xlsx'\n            },\n            {\n                pattern: /(?:document|doc|\\.docx?)/,\n                type: 'document',\n                extension: '.docx'\n            },\n            {\n                pattern: /(?:notes|\\.md|markdown)/,\n                type: 'markdown',\n                extension: '.md'\n            },\n            {\n                pattern: /(?:plan|planning)/,\n                type: 'document',\n                extension: '.md'\n            },\n            {\n                pattern: /(?:budget|financial)/,\n                type: 'spreadsheet',\n                extension: '.xlsx'\n            },\n            {\n                pattern: /(?:presentation|\\.pptx?)/,\n                type: 'presentation',\n                extension: '.pptx'\n            }\n        ];\n        for (const { pattern, type, extension } of filePatterns){\n            if (pattern.test(normalizedInput)) {\n                fileType = type;\n                // Extract specific file name if mentioned\n                const nameMatch = input.match(/(?:create|add|make)\\s+(?:a\\s+)?(.+?)(?:\\s+for|\\s+in|\\s+to|$)/i);\n                if (nameMatch && nameMatch[1]) {\n                    fileName = nameMatch[1].trim();\n                    if (!fileName.includes('.')) {\n                        fileName += extension;\n                    }\n                } else {\n                    fileName = \"\".concat(type).concat(extension);\n                }\n                break;\n            }\n        }\n        // Extract project name\n        const projectMatch = input.match(/(?:for|in|to)\\s+(?:the\\s+)?(.+?)(?:\\s+project)?$/i);\n        const projectName = projectMatch ? projectMatch[1].trim() : '';\n        return {\n            fileName: fileName || 'new-file.txt',\n            projectName,\n            fileType,\n            content: ''\n        };\n    }\n    /**\n   * Extract template details from natural language input\n   */ extractTemplateDetails(input) {\n        const normalizedInput = input.toLowerCase();\n        const templateTypes = [\n            'marketing',\n            'development',\n            'content',\n            'financial',\n            'social'\n        ];\n        let type = 'development'; // default\n        for (const templateType of templateTypes){\n            if (normalizedInput.includes(templateType)) {\n                type = templateType;\n                break;\n            }\n        }\n        // Extract custom name if provided\n        const nameMatch = input.match(/(?:template|scaffold)\\s+(?:for\\s+)?(.+)/i);\n        const name = nameMatch ? nameMatch[1].trim() : undefined;\n        return {\n            name,\n            type\n        };\n    }\n    /**\n   * Get default budget based on project type\n   */ getDefaultBudget(type) {\n        const budgets = {\n            marketing: 5000,\n            development: 15000,\n            content: 3000,\n            financial: 10000,\n            social: 2000\n        };\n        return budgets[type] || 10000;\n    }\n    /**\n   * Get template budget based on type\n   */ getTemplateBudget(type) {\n        return this.getDefaultBudget(type);\n    }\n    /**\n   * Get template description based on type\n   */ getTemplateDescription(type) {\n        const descriptions = {\n            marketing: 'Marketing campaign project with promotional materials and strategy planning',\n            development: 'Software development project with technical documentation and milestones',\n            content: 'Content creation project with editorial calendar and publishing workflow',\n            financial: 'Financial analysis project with budgets, forecasts, and reporting',\n            social: 'Social media project with content calendar and engagement strategies'\n        };\n        return descriptions[type] || 'General project template';\n    }\n    /**\n   * Create initial files for a project\n   */ async createInitialFiles(project, convexMutations) {\n        const files = [\n            {\n                name: 'README.md',\n                content: \"# \".concat((project === null || project === void 0 ? void 0 : project.name) || 'Project', \"\\n\\n\").concat((project === null || project === void 0 ? void 0 : project.description) || 'Project description', \"\\n\\n## Getting Started\\n\\nThis project was created using the EAC Project Creator Agent.\"),\n                type: 'note'\n            },\n            {\n                name: 'project-plan.md',\n                content: \"# Project Plan - \".concat((project === null || project === void 0 ? void 0 : project.name) || 'Project', \"\\n\\n## Objectives\\n\\n## Timeline\\n\\n## Resources\\n\\n## Milestones\\n\"),\n                type: 'note'\n            }\n        ];\n        const results = [];\n        for (const file of files){\n            try {\n                if (convexMutations.createFile) {\n                    await convexMutations.createFile({\n                        name: file.name,\n                        content: file.content,\n                        type: file.type,\n                        projectId: project === null || project === void 0 ? void 0 : project._id\n                    });\n                    results.push(\"‚úÖ \".concat(file.name));\n                }\n            } catch (error) {\n                results.push(\"‚ùå \".concat(file.name, \" (failed)\"));\n            }\n        }\n        return results.join('\\n');\n    }\n    /**\n   * Create template-specific files\n   */ async createTemplateFiles(project, templateType, convexMutations) {\n        const templateFiles = this.getTemplateFiles(templateType, (project === null || project === void 0 ? void 0 : project.name) || 'Project');\n        const results = [];\n        for (const file of templateFiles){\n            try {\n                if (convexMutations.createFile) {\n                    await convexMutations.createFile({\n                        name: file.name,\n                        content: file.content,\n                        type: file.type,\n                        projectId: project === null || project === void 0 ? void 0 : project._id\n                    });\n                    results.push(\"‚úÖ \".concat(file.name));\n                }\n            } catch (error) {\n                results.push(\"‚ùå \".concat(file.name, \" (failed)\"));\n            }\n        }\n        return results.join('\\n');\n    }\n    /**\n   * Get template files based on type\n   */ getTemplateFiles(type, projectName) {\n        const templates = {\n            marketing: [\n                {\n                    name: 'campaign-brief.md',\n                    content: \"# Campaign Brief - \".concat(projectName, \"\\n\\n## Objectives\\n\\n## Target Audience\\n\\n## Key Messages\\n\\n## Timeline\\n\"),\n                    type: 'note'\n                },\n                {\n                    name: 'budget.md',\n                    content: \"# Budget - \".concat(projectName, \"\\n\\n## Campaign Budget\\n\\n| Item | Amount |\\n|------|--------|\\n| Total | $0 |\\n\"),\n                    type: 'note'\n                }\n            ],\n            development: [\n                {\n                    name: 'README.md',\n                    content: \"# \".concat(projectName, \"\\n\\n## Setup\\n\\n## Development\\n\\n## Deployment\\n\"),\n                    type: 'note'\n                },\n                {\n                    name: 'requirements.md',\n                    content: \"# Requirements - \".concat(projectName, \"\\n\\n## Functional Requirements\\n\\n## Technical Requirements\\n\"),\n                    type: 'note'\n                }\n            ],\n            content: [\n                {\n                    name: 'content-calendar.md',\n                    content: \"# Content Calendar - \".concat(projectName, \"\\n\\n## Editorial Schedule\\n\\n## Content Topics\\n\"),\n                    type: 'note'\n                },\n                {\n                    name: 'style-guide.md',\n                    content: \"# Style Guide - \".concat(projectName, \"\\n\\n## Voice & Tone\\n\\n## Guidelines\\n\"),\n                    type: 'note'\n                }\n            ],\n            financial: [\n                {\n                    name: 'budget.md',\n                    content: \"# Budget - \".concat(projectName, \"\\n\\n## Revenue Projections\\n\\n## Expense Planning\\n\"),\n                    type: 'note'\n                },\n                {\n                    name: 'forecast.md',\n                    content: \"# Financial Forecast - \".concat(projectName, \"\\n\\n## Revenue Projections\\n\\n## Expense Planning\\n\"),\n                    type: 'note'\n                }\n            ],\n            social: [\n                {\n                    name: 'social-calendar.md',\n                    content: \"# Social Media Calendar - \".concat(projectName, \"\\n\\n## Content Schedule\\n\\n## Platform Strategy\\n\"),\n                    type: 'note'\n                },\n                {\n                    name: 'engagement-plan.md',\n                    content: \"# Engagement Plan - \".concat(projectName, \"\\n\\n## Community Guidelines\\n\\n## Response Templates\\n\"),\n                    type: 'note'\n                }\n            ]\n        };\n        return templates[type] || templates.development;\n    }\n    /**\n   * Generate file content based on type and name\n   */ generateFileContent(fileType, fileName) {\n        const baseContent = {\n            spreadsheet: \"# \".concat(fileName.replace(/\\.[^/.]+$/, \"\"), \"\\n\\n| Item | Amount |\\n|------|--------|\\n| Total | $0 |\\n\"),\n            document: \"# \".concat(fileName, \"\\n\\nDocument created on \").concat(new Date().toLocaleDateString(), \"\\n\\n## Section 1\\n\\n## Section 2\\n\"),\n            markdown: \"# \".concat(fileName.replace(/\\.[^/.]+$/, \"\"), \"\\n\\nCreated: \").concat(new Date().toLocaleDateString(), \"\\n\\n## Overview\\n\\n## Details\\n\"),\n            text: \"\".concat(fileName, \"\\n\\nCreated: \").concat(new Date().toLocaleDateString(), \"\\n\\nContent goes here...\")\n        };\n        return baseContent[fileType] || baseContent.text;\n    }\n    /**\n   * Map file type to Convex expected type\n   */ mapToConvexFileType(fileType) {\n        const typeMap = {\n            text: 'note',\n            markdown: 'note',\n            spreadsheet: 'document',\n            document: 'document',\n            presentation: 'document'\n        };\n        return typeMap[fileType] || 'note';\n    }\n    /**\n   * Get project name input prompt when project name is not specified or generic\n   */ async getProjectNameInputPrompt(projectDetails, convexMutations) {\n        try {\n            // Check if there's already a pending project creation\n            if (ProjectCreatorAgent.pendingProjectCreation) {\n                const pendingAge = Date.now() - ProjectCreatorAgent.pendingProjectCreation.timestamp;\n                // If pending request is less than 5 minutes old, remind user to use existing input\n                if (pendingAge < 5 * 60 * 1000) {\n                    return \"‚ö†Ô∏è **Please use the project name input above** to complete your previous project creation request.\\n\\nI'm still waiting for you to enter a project name.\\n\\n_To start a new project creation, wait for the current one to complete or cancel it first._\";\n                } else {\n                    // Clear expired pending request\n                    ProjectCreatorAgent.pendingProjectCreation = null;\n                }\n            }\n            // Store pending project creation state\n            ProjectCreatorAgent.pendingProjectCreation = {\n                projectDetails,\n                timestamp: Date.now()\n            };\n            // Store a message with interactive component for project name input\n            if (convexMutations.storeChatMessage) {\n                await convexMutations.storeChatMessage({\n                    role: 'assistant',\n                    content: \"\\uD83E\\uDD16 **Project Name Required**\\n\\nI'm ready to create your new project! Please enter a name for your project using the input below:\",\n                    processIndicator: {\n                        type: 'waiting',\n                        processType: 'project_name_input',\n                        color: 'green'\n                    },\n                    interactiveComponent: {\n                        type: 'project_selector',\n                        status: 'pending',\n                        data: {\n                            projectDetails,\n                            projectNameInput: true,\n                            placeholder: projectDetails.type ? \"\".concat(projectDetails.type.charAt(0).toUpperCase() + projectDetails.type.slice(1), \" Project\") : \"Enter project name...\"\n                        }\n                    }\n                });\n                // Return empty string since the interactive component will handle the response\n                return \"\";\n            } else {\n                // Fallback to text-based input if storeChatMessage is not available\n                let result = \"\\uD83E\\uDD16 **Project Name Required**\\n\\n\";\n                result += \"I'm ready to create your new project!\\n\\n\";\n                if (projectDetails.type) {\n                    result += \"**\\uD83C\\uDFAF Project Type:** \".concat(projectDetails.type.charAt(0).toUpperCase() + projectDetails.type.slice(1), \"\\n\");\n                }\n                if (projectDetails.description) {\n                    result += \"**\\uD83D\\uDCDD Description:** \".concat(projectDetails.description, \"\\n\");\n                }\n                if (projectDetails.budget) {\n                    result += \"**\\uD83D\\uDCB0 Budget:** $\".concat(projectDetails.budget.toLocaleString(), \"\\n\");\n                }\n                result += \"\\n**\\uD83D\\uDCDD Please provide a project name:**\\n\";\n                result += \"‚Ä¢ Type the project name in your next message\\n\";\n                result += '‚Ä¢ Examples: \"Marketing Campaign\", \"Website Redesign\", \"Q1 Budget Planning\"\\n\\n';\n                result += \"\\uD83D\\uDCA1 **Next message:** Just type your project name!\";\n                return result;\n            }\n        } catch (error) {\n            console.error('Error setting up project name input:', error);\n            return '\\uD83E\\uDD16 **Project Name Required**\\n\\nI\\'m ready to create your new project! Please provide a project name.\\n\\n**\\uD83D\\uDCA1 Tip:** You can say something like:\\n\"Marketing Campaign\" or \"Website Redesign Project\"';\n        }\n    }\n    /**\n   * Get help message for the agent\n   */ getHelpMessage() {\n        return '\\uD83E\\uDD16 **Project Creator Agent Help**\\n\\nI can help you create projects and files using natural language! Here are some examples:\\n\\n**\\uD83D\\uDCC1 Create Projects:**\\n‚Ä¢ \"Create a marketing project for Q1 campaign\"\\n‚Ä¢ \"Start a new development project called Mobile App\"\\n‚Ä¢ \"Make a content project with initial files\"\\n\\n**\\uD83D\\uDCC4 Create Files:**\\n‚Ä¢ \"Create a budget spreadsheet for Marketing Project\"\\n‚Ä¢ \"Add meeting notes to Development Project\"\\n‚Ä¢ \"Make a project plan document\"\\n\\n**\\uD83C\\uDFA8 Use Templates:**\\n‚Ä¢ \"Setup a marketing template\"\\n‚Ä¢ \"Create a development project from template\"\\n‚Ä¢ \"Apply financial template for Budget Analysis\"\\n\\nJust describe what you want to create and I\\'ll handle the rest! \\uD83D\\uDE80';\n    }\n    constructor(...args){\n        super(...args), this.id = 'project-creator', this.name = 'Project Creator', this.description = 'Creates projects and files on behalf of users using natural language', this.icon = 'FileText', this.tools = [\n            {\n                id: 'natural-language-creator',\n                name: 'Natural Language Creator',\n                command: 'create',\n                description: 'Create projects and files using natural language instructions',\n                parameters: []\n            }\n        ];\n    }\n}\n// State to track pending project creation\nProjectCreatorAgent.pendingProjectCreation = null;\n// Export an instance of the agent for use in the registry\nconst projectCreatorAgent = new ProjectCreatorAgent();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./store/agents/projectCreatorAgent.ts\n"));

/***/ })

});