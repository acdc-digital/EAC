"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./store/editor/index.ts":
/*!*******************************!*\
  !*** ./store/editor/index.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useEditorStore: () => (/* binding */ useEditorStore)\n/* harmony export */ });\n/* harmony import */ var _barrel_optimize_names_AtSign_Braces_Calendar_Camera_FileCode_FileSpreadsheet_FileText_FileType_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! __barrel_optimize__?names=AtSign,Braces,Calendar,Camera,FileCode,FileSpreadsheet,FileText,FileType,MessageSquare!=!lucide-react */ \"(app-pages-browser)/../node_modules/.pnpm/lucide-react@0.525.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/file-code.js\");\n/* harmony import */ var _barrel_optimize_names_AtSign_Braces_Calendar_Camera_FileCode_FileSpreadsheet_FileText_FileType_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! __barrel_optimize__?names=AtSign,Braces,Calendar,Camera,FileCode,FileSpreadsheet,FileText,FileType,MessageSquare!=!lucide-react */ \"(app-pages-browser)/../node_modules/.pnpm/lucide-react@0.525.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/braces.js\");\n/* harmony import */ var _barrel_optimize_names_AtSign_Braces_Calendar_Camera_FileCode_FileSpreadsheet_FileText_FileType_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! __barrel_optimize__?names=AtSign,Braces,Calendar,Camera,FileCode,FileSpreadsheet,FileText,FileType,MessageSquare!=!lucide-react */ \"(app-pages-browser)/../node_modules/.pnpm/lucide-react@0.525.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/file-spreadsheet.js\");\n/* harmony import */ var _barrel_optimize_names_AtSign_Braces_Calendar_Camera_FileCode_FileSpreadsheet_FileText_FileType_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=AtSign,Braces,Calendar,Camera,FileCode,FileSpreadsheet,FileText,FileType,MessageSquare!=!lucide-react */ \"(app-pages-browser)/../node_modules/.pnpm/lucide-react@0.525.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/file-text.js\");\n/* harmony import */ var _barrel_optimize_names_AtSign_Braces_Calendar_Camera_FileCode_FileSpreadsheet_FileText_FileType_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=AtSign,Braces,Calendar,Camera,FileCode,FileSpreadsheet,FileText,FileType,MessageSquare!=!lucide-react */ \"(app-pages-browser)/../node_modules/.pnpm/lucide-react@0.525.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/file-type.js\");\n/* harmony import */ var _barrel_optimize_names_AtSign_Braces_Calendar_Camera_FileCode_FileSpreadsheet_FileText_FileType_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=AtSign,Braces,Calendar,Camera,FileCode,FileSpreadsheet,FileText,FileType,MessageSquare!=!lucide-react */ \"(app-pages-browser)/../node_modules/.pnpm/lucide-react@0.525.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/message-square.js\");\n/* harmony import */ var _barrel_optimize_names_AtSign_Braces_Calendar_Camera_FileCode_FileSpreadsheet_FileText_FileType_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=AtSign,Braces,Calendar,Camera,FileCode,FileSpreadsheet,FileText,FileType,MessageSquare!=!lucide-react */ \"(app-pages-browser)/../node_modules/.pnpm/lucide-react@0.525.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/camera.js\");\n/* harmony import */ var _barrel_optimize_names_AtSign_Braces_Calendar_Camera_FileCode_FileSpreadsheet_FileText_FileType_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! __barrel_optimize__?names=AtSign,Braces,Calendar,Camera,FileCode,FileSpreadsheet,FileText,FileType,MessageSquare!=!lucide-react */ \"(app-pages-browser)/../node_modules/.pnpm/lucide-react@0.525.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/at-sign.js\");\n/* harmony import */ var _barrel_optimize_names_AtSign_Braces_Calendar_Camera_FileCode_FileSpreadsheet_FileText_FileType_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! __barrel_optimize__?names=AtSign,Braces,Calendar,Camera,FileCode,FileSpreadsheet,FileText,FileType,MessageSquare!=!lucide-react */ \"(app-pages-browser)/../node_modules/.pnpm/lucide-react@0.525.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/calendar.js\");\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/../node_modules/.pnpm/zustand@5.0.6_@types+react@19.1.8_react@18.3.1_use-sync-external-store@1.5.0_react@18.3.1_/node_modules/zustand/esm/react.mjs\");\n/* harmony import */ var zustand_middleware__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! zustand/middleware */ \"(app-pages-browser)/../node_modules/.pnpm/zustand@5.0.6_@types+react@19.1.8_react@18.3.1_use-sync-external-store@1.5.0_react@18.3.1_/node_modules/zustand/esm/middleware.mjs\");\n// Editor Store\n// /Users/matthewsimon/Projects/EAC/eac/store/editor/index.ts\n\n\n\n// Helper function to get icon based on file type\nconst getFileIcon = (type)=>{\n    switch(type){\n        case 'typescript':\n            return _barrel_optimize_names_AtSign_Braces_Calendar_Camera_FileCode_FileSpreadsheet_FileText_FileType_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n        case 'javascript':\n            return _barrel_optimize_names_AtSign_Braces_Calendar_Camera_FileCode_FileSpreadsheet_FileText_FileType_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n        case 'json':\n            return _barrel_optimize_names_AtSign_Braces_Calendar_Camera_FileCode_FileSpreadsheet_FileText_FileType_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\n        case 'excel':\n            return _barrel_optimize_names_AtSign_Braces_Calendar_Camera_FileCode_FileSpreadsheet_FileText_FileType_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\n        case 'markdown':\n            return _barrel_optimize_names_AtSign_Braces_Calendar_Camera_FileCode_FileSpreadsheet_FileText_FileType_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_3__[\"default\"];\n        case 'pdf':\n            return _barrel_optimize_names_AtSign_Braces_Calendar_Camera_FileCode_FileSpreadsheet_FileText_FileType_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n        case 'generals':\n            return _barrel_optimize_names_AtSign_Braces_Calendar_Camera_FileCode_FileSpreadsheet_FileText_FileType_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_3__[\"default\"];\n        case 'percent-complete':\n            return _barrel_optimize_names_AtSign_Braces_Calendar_Camera_FileCode_FileSpreadsheet_FileText_FileType_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\n        case 'schedule':\n            return _barrel_optimize_names_AtSign_Braces_Calendar_Camera_FileCode_FileSpreadsheet_FileText_FileType_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\n        case 'materials':\n            return _barrel_optimize_names_AtSign_Braces_Calendar_Camera_FileCode_FileSpreadsheet_FileText_FileType_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\n        case 'facebook':\n            return _barrel_optimize_names_AtSign_Braces_Calendar_Camera_FileCode_FileSpreadsheet_FileText_FileType_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_5__[\"default\"];\n        case 'reddit':\n            return 'r/'; // Changed from Hash to r/ text\n        case 'instagram':\n            return _barrel_optimize_names_AtSign_Braces_Calendar_Camera_FileCode_FileSpreadsheet_FileText_FileType_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_6__[\"default\"];\n        case 'x':\n            return _barrel_optimize_names_AtSign_Braces_Calendar_Camera_FileCode_FileSpreadsheet_FileText_FileType_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_7__[\"default\"];\n        case 'calendar':\n            return _barrel_optimize_names_AtSign_Braces_Calendar_Camera_FileCode_FileSpreadsheet_FileText_FileType_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_8__[\"default\"];\n        default:\n            return _barrel_optimize_names_AtSign_Braces_Calendar_Camera_FileCode_FileSpreadsheet_FileText_FileType_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    }\n};\n// Helper function to get file extension\n// Helper function to get file extension\nconst getFileExtension = (type)=>{\n    switch(type){\n        case 'typescript':\n            return '.ts';\n        case 'javascript':\n            return '.js';\n        case 'json':\n            return '.json';\n        case 'excel':\n            return '.xlsx';\n        case 'pdf':\n            return '.pdf';\n        case 'generals':\n            return '.generals';\n        case 'percent-complete':\n            return '.percent';\n        case 'schedule':\n            return '.schedule';\n        case 'materials':\n            return '.materials';\n        case 'facebook':\n            return '.facebook';\n        case 'reddit':\n            return '.reddit';\n        case 'instagram':\n            return '.instagram';\n        case 'x':\n            return '.x';\n        default:\n            return '.txt';\n    }\n};\n// Helper function to generate default content for new files\nconst getDefaultContent = (type, name)=>{\n    switch(type){\n        case 'typescript':\n            return \"// \".concat(name, \"\\n// Auto-generated TypeScript file\\n\\nimport React from 'react';\\n\\ninterface \").concat(name.replace(/[^a-zA-Z0-9]/g, ''), \"Props {\\n  // Define props here\\n}\\n\\nexport function \").concat(name.replace(/[^a-zA-Z0-9]/g, ''), \"({ }: \").concat(name.replace(/[^a-zA-Z0-9]/g, ''), 'Props) {\\n  return (\\n    <div className=\"p-4\">\\n      <h1 className=\"text-xl font-bold\">New Component: ').concat(name, '</h1>\\n      <p className=\"text-gray-600\">Start building your component here...</p>\\n    </div>\\n  );\\n}');\n        case 'javascript':\n            return \"// \".concat(name, \"\\n// Auto-generated JavaScript file\\n\\nexport function \").concat(name.replace(/[^a-zA-Z0-9]/g, ''), \"() {\\n  return {\\n    message: 'Hello from \").concat(name, \"!',\\n    data: []\\n  };\\n}\");\n        case 'json':\n            return '{\\n  \"name\": \"'.concat(name, '\",\\n  \"description\": \"Auto-generated JSON file\",\\n  \"version\": \"1.0.0\",\\n  \"data\": {}\\n}');\n        case 'markdown':\n            return \"Start writing your content here...\";\n        case 'generals':\n            return \"// \".concat(name, \" - Project General Information\\n// This file contains general project details and financial information\\n// Created on: \").concat(new Date().toISOString(), \"\\n\\nProject: \").concat(name, \"\\nStatus: Active\\nCreated: \").concat(new Date().toLocaleDateString(), \"\\n\\n// This file will display the project generals module interface\");\n        case 'percent-complete':\n            return \"// \".concat(name, \" - Percent Complete Tracker\\n// This file contains project completion tracking data\\n// Created on: \").concat(new Date().toISOString(), \"\\n\\nProject: \").concat(name, \"\\nType: Percent Complete Tracker\\nCreated: \").concat(new Date().toLocaleDateString(), \"\\n\\n// This file will display the percent complete tracking interface\");\n        case 'schedule':\n            return \"// \".concat(name, \" - Project Schedule\\n// This file contains project schedule and timeline data\\n// Created on: \").concat(new Date().toISOString(), \"\\n\\nProject: \").concat(name, \"\\nType: Project Schedule\\nCreated: \").concat(new Date().toLocaleDateString(), \"\\n\\n// This file will display the project schedule interface with Gantt chart\");\n        case 'materials':\n            return \"// \".concat(name, \" - Materials Management\\n// This file contains materials tracking and management data\\n// Created on: \").concat(new Date().toISOString(), \"\\n\\nProject: \").concat(name, \"\\nType: Materials Management\\nCreated: \").concat(new Date().toLocaleDateString(), \"\\n\\n// This file will display the materials management interface with manufactured and miscellaneous materials\");\n        case 'facebook':\n            return \"# \".concat(name, \" - Facebook Post\\nPlatform: Facebook\\nCreated: \").concat(new Date().toLocaleDateString(), \"\\n\\n## Post Content\\nWrite your Facebook post content here...\\n\\n## Settings\\n- Audience: Public\\n- Schedule: Now\\n- Hashtags: #example\\n\\n## Media\\n- Images: []\\n- Videos: []\\n\\n## Analytics\\n- Engagement: 0\\n- Reach: 0\\n- Clicks: 0\");\n        case 'reddit':\n            return \"# \".concat(name, \" - Reddit Post\\nPlatform: Reddit\\nCreated: \").concat(new Date().toLocaleDateString(), \"\\n\\n## Post Content\\nWrite your Reddit post content here...\\n\\n## Settings\\n- Subreddit: r/example\\n- Post Type: Text/Link/Image\\n- Flair: Discussion\\n- NSFW: No\\n\\n## Media\\n- Images: []\\n- Links: []\\n\\n## Analytics\\n- Upvotes: 0\\n- Comments: 0\\n- Awards: 0\");\n        case 'instagram':\n            return \"# \".concat(name, \" - Instagram Post\\nPlatform: Instagram\\nCreated: \").concat(new Date().toLocaleDateString(), \"\\n\\n## Post Content\\nWrite your Instagram post content here...\\n\\n## Settings\\n- Post Type: Feed/Story/Reel\\n- Location: City, Country\\n- Alt Text: Describe image\\n- Comment Settings: Public\\n\\n## Media\\n- Images: []\\n- Videos: []\\n\\n## Hashtags\\n#hashtag1 #hashtag2 #hashtag3\\n\\n## Analytics\\n- Likes: 0\\n- Comments: 0\\n- Shares: 0\\n- Reach: 0\");\n        case 'x':\n            return \"# \".concat(name, \" - X/Twitter Post\\nPlatform: X (Twitter)\\nCreated: \").concat(new Date().toLocaleDateString(), \"\\n\\n## Post Content\\nWrite your X post content here... (280 character limit)\\n\\n## Settings\\n- Reply Settings: Everyone\\n- Schedule: Now\\n- Thread: Single Tweet\\n\\n## Media\\n- Images: []\\n- Videos: []\\n- GIFs: []\\n\\n## Analytics\\n- Impressions: 0\\n- Engagements: 0\\n- Retweets: 0\\n- Likes: 0\\n- Replies: 0\");\n        default:\n            return \"# \".concat(name, \"\\n\\nThis is a new file created in the EAC Dashboard.\\nCreated on: \").concat(new Date().toISOString());\n    }\n};\n// Initial project files - empty by default, only created when needed\nconst initialProjectFiles = [];\n// Initial financial files - empty by default, only created when needed  \nconst initialFinancialFiles = [];\n// Initial project folders - only created when explicitly needed, not on storage clear\nconst initialProjectFolders = [];\nconst useEditorStore = (0,zustand__WEBPACK_IMPORTED_MODULE_9__.create)()((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_10__.devtools)((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_10__.persist)((set, get)=>({\n        // Initial state\n        openTabs: [],\n        activeTab: '',\n        projectFiles: initialProjectFiles,\n        financialFiles: initialFinancialFiles,\n        projectFolders: initialProjectFolders,\n        financialFolders: [],\n        trashItems: [],\n        showProjectsCategory: true,\n        showFinancialCategory: false,\n        isLoading: false,\n        error: null,\n        // Actions\n        openTab: (file)=>{\n            const { openTabs } = get();\n            // Check if tab is already open\n            const existingTab = openTabs.find((tab)=>tab.id === file.id);\n            if (existingTab) {\n                set({\n                    activeTab: existingTab.id\n                });\n                return;\n            }\n            // Create new tab with content\n            const newTab = {\n                id: file.id,\n                name: file.name,\n                modified: false,\n                content: file.content || getDefaultContent(file.type, file.name),\n                filePath: file.filePath,\n                type: file.type\n            };\n            set({\n                openTabs: [\n                    ...openTabs,\n                    newTab\n                ],\n                activeTab: newTab.id\n            });\n        },\n        openSpecialTab: (id, name, type)=>{\n            const { openTabs } = get();\n            // Check if tab is already open\n            const existingTab = openTabs.find((tab)=>tab.id === id);\n            if (existingTab) {\n                set({\n                    activeTab: existingTab.id\n                });\n                return;\n            }\n            // Create new special tab\n            const newTab = {\n                id,\n                name,\n                modified: false,\n                content: '',\n                filePath: \"/\".concat(type),\n                type\n            };\n            set({\n                openTabs: [\n                    ...openTabs,\n                    newTab\n                ],\n                activeTab: newTab.id\n            });\n        },\n        closeTab: (tabId)=>{\n            const { openTabs, activeTab } = get();\n            const tabIndex = openTabs.findIndex((tab)=>tab.id === tabId);\n            if (tabIndex === -1) return;\n            const newTabs = openTabs.filter((tab)=>tab.id !== tabId);\n            let newActiveTab = activeTab;\n            // If closing the active tab, switch to another tab\n            if (activeTab === tabId) {\n                if (newTabs.length > 0) {\n                    // Switch to the tab to the right, or the last tab if closing the last one\n                    const nextIndex = tabIndex < newTabs.length ? tabIndex : newTabs.length - 1;\n                    newActiveTab = newTabs[nextIndex].id;\n                } else {\n                    newActiveTab = '';\n                }\n            }\n            set({\n                openTabs: newTabs,\n                activeTab: newActiveTab\n            });\n        },\n        closeAllTabs: ()=>{\n            set({\n                openTabs: [],\n                activeTab: ''\n            });\n        },\n        setActiveTab: (tabId)=>{\n            const { openTabs } = get();\n            const tabExists = openTabs.some((tab)=>tab.id === tabId);\n            if (tabExists) {\n                set({\n                    activeTab: tabId\n                });\n            }\n        },\n        reorderTabs: (fromTabId, toTabId)=>{\n            const { openTabs } = get();\n            const fromIndex = openTabs.findIndex((tab)=>tab.id === fromTabId);\n            const toIndex = openTabs.findIndex((tab)=>tab.id === toTabId);\n            if (fromIndex !== -1 && toIndex !== -1 && fromIndex !== toIndex) {\n                const newTabs = [\n                    ...openTabs\n                ];\n                const [movedTab] = newTabs.splice(fromIndex, 1);\n                newTabs.splice(toIndex, 0, movedTab);\n                set({\n                    openTabs: newTabs\n                });\n            }\n        },\n        updateTabContent: (tabId, content)=>{\n            const { openTabs } = get();\n            const updatedTabs = openTabs.map((tab)=>tab.id === tabId ? {\n                    ...tab,\n                    content,\n                    modified: true\n                } : tab);\n            set({\n                openTabs: updatedTabs\n            });\n        },\n        updateFileContent: (tabId, content)=>{\n            const { openTabs } = get();\n            const updatedTabs = openTabs.map((tab)=>tab.id === tabId ? {\n                    ...tab,\n                    content,\n                    modified: true\n                } : tab);\n            set({\n                openTabs: updatedTabs\n            });\n        },\n        updateFileStatus: (fileId, status)=>{\n            const { projectFiles, financialFiles } = get();\n            // Update in project files\n            const updatedProjectFiles = projectFiles.map((file)=>file.id === fileId ? {\n                    ...file,\n                    status,\n                    modifiedAt: new Date()\n                } : file);\n            // Update in financial files\n            const updatedFinancialFiles = financialFiles.map((file)=>file.id === fileId ? {\n                    ...file,\n                    status,\n                    modifiedAt: new Date()\n                } : file);\n            set({\n                projectFiles: updatedProjectFiles,\n                financialFiles: updatedFinancialFiles\n            });\n        },\n        createNewFile: async function(name, type) {\n            let category = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 'project', folderId = arguments.length > 3 ? arguments[3] : void 0;\n            const { projectFiles, financialFiles } = get();\n            // Generate unique ID\n            const id = \"\".concat(name.toLowerCase().replace(/[^a-z0-9]/g, '-'), \"-\").concat(Date.now());\n            const fileName = \"\".concat(name).concat(getFileExtension(type));\n            const basePath = category === 'financial' ? '/financial-data' : '/eac-projects';\n            // Create new file\n            const newFile = {\n                id,\n                name: fileName,\n                icon: getFileIcon(type),\n                type,\n                category,\n                content: getDefaultContent(type, name),\n                filePath: \"\".concat(basePath, \"/\").concat(fileName),\n                createdAt: new Date(),\n                modifiedAt: new Date(),\n                folderId,\n                status: [\n                    'facebook',\n                    'reddit',\n                    'instagram',\n                    'x'\n                ].includes(type) ? 'draft' : undefined\n            };\n            // Add to appropriate file array and ensure category is visible\n            if (category === 'financial') {\n                set({\n                    financialFiles: [\n                        ...financialFiles,\n                        newFile\n                    ],\n                    showFinancialCategory: true\n                });\n            } else {\n                set({\n                    projectFiles: [\n                        ...projectFiles,\n                        newFile\n                    ],\n                    showProjectsCategory: true\n                });\n            }\n            // Automatically open the new file\n            get().openTab(newFile);\n            // Save to Convex database (async - don't block UI)\n            try {\n                // We need to import the Convex hooks here, which isn't ideal\n                // Better to handle this in the component level\n                console.log('File created locally:', newFile);\n                // Dispatch custom event that components can listen to\n                window.dispatchEvent(new CustomEvent('fileCreated', {\n                    detail: {\n                        file: newFile,\n                        projectId: folderId // Using folderId as projectId for now\n                    }\n                }));\n            } catch (error) {\n                console.error('Failed to save file to database:', error);\n            }\n        },\n        createFolder: (name, category, convexId)=>{\n            const { projectFolders, financialFolders } = get();\n            // Check if folder with this name already exists to prevent duplicates\n            const existingFolders = category === 'financial' ? financialFolders : projectFolders;\n            const folderExists = existingFolders.some((folder)=>folder.name.toLowerCase() === name.toLowerCase());\n            if (folderExists) {\n                console.log('Folder \"'.concat(name, '\" already exists in ').concat(category, \" category, skipping creation\"));\n                return;\n            }\n            // Generate truly unique ID using crypto if available, otherwise fallback to timestamp + random\n            let uniqueId;\n            if (typeof crypto !== 'undefined' && crypto.randomUUID) {\n                uniqueId = \"folder-\".concat(name.toLowerCase().replace(/[^a-z0-9]/g, '-'), \"-\").concat(crypto.randomUUID());\n            } else {\n                // Fallback for environments without crypto.randomUUID\n                const timestamp = Date.now();\n                const random = Math.random().toString(36).substring(2, 12);\n                const counter = Math.floor(Math.random() * 10000);\n                uniqueId = \"folder-\".concat(name.toLowerCase().replace(/[^a-z0-9]/g, '-'), \"-\").concat(timestamp, \"-\").concat(random, \"-\").concat(counter);\n            }\n            // Double-check uniqueness against all existing folder IDs\n            const allFolders = [\n                ...projectFolders,\n                ...financialFolders\n            ];\n            while(allFolders.some((folder)=>folder.id === uniqueId)){\n                const randomSuffix = Math.random().toString(36).substring(2, 8);\n                uniqueId = \"\".concat(uniqueId, \"-\").concat(randomSuffix);\n            }\n            // Create new folder\n            const newFolder = {\n                id: uniqueId,\n                name,\n                category,\n                createdAt: new Date(),\n                convexId\n            };\n            // Add to appropriate folder array and ensure category is visible\n            if (category === 'financial') {\n                set({\n                    financialFolders: [\n                        newFolder,\n                        ...financialFolders\n                    ],\n                    showFinancialCategory: true\n                });\n            } else {\n                set({\n                    projectFolders: [\n                        newFolder,\n                        ...projectFolders\n                    ],\n                    showProjectsCategory: true\n                });\n            }\n        },\n        // Emergency cleanup function for duplicate folder IDs\n        cleanupDuplicateFolders: ()=>{\n            const { projectFolders, financialFolders } = get();\n            // Function to remove duplicates and fix bad IDs\n            const cleanupFolders = (folders)=>{\n                const seen = new Set();\n                const cleaned = folders.filter((folder)=>{\n                    // Remove folders with the problematic key pattern\n                    if (folder.id.includes('folder-index-1753064508939')) {\n                        console.log(\"\\uD83E\\uDDF9 Removing problematic folder: \".concat(folder.id, \" (\").concat(folder.name, \")\"));\n                        return false;\n                    }\n                    // Remove duplicate IDs\n                    if (seen.has(folder.id)) {\n                        console.log(\"\\uD83E\\uDDF9 Removing duplicate folder: \".concat(folder.id, \" (\").concat(folder.name, \")\"));\n                        return false;\n                    }\n                    seen.add(folder.id);\n                    return true;\n                });\n                // Regenerate IDs for any remaining folders with old patterns\n                return cleaned.map((folder)=>{\n                    if (folder.id.startsWith('folder-index-') || folder.id.length < 20) {\n                        const newId = typeof crypto !== 'undefined' && crypto.randomUUID ? \"folder-\".concat(folder.name.toLowerCase().replace(/[^a-z0-9]/g, '-'), \"-\").concat(crypto.randomUUID()) : \"folder-\".concat(folder.name.toLowerCase().replace(/[^a-z0-9]/g, '-'), \"-\").concat(Date.now(), \"-\").concat(Math.random().toString(36).substring(2, 12));\n                        console.log(\"\\uD83D\\uDD04 Regenerating ID for folder: \".concat(folder.id, \" → \").concat(newId, \" (\").concat(folder.name, \")\"));\n                        return {\n                            ...folder,\n                            id: newId\n                        };\n                    }\n                    return folder;\n                });\n            };\n            const cleanedProjectFolders = cleanupFolders(projectFolders);\n            const cleanedFinancialFolders = cleanupFolders(financialFolders);\n            if (cleanedProjectFolders.length !== projectFolders.length || cleanedFinancialFolders.length !== financialFolders.length) {\n                console.log('🧹 Cleanup completed, updating store...');\n                set({\n                    projectFolders: cleanedProjectFolders,\n                    financialFolders: cleanedFinancialFolders\n                });\n            }\n        },\n        deleteFile: (fileId)=>{\n            const { projectFiles, financialFiles, openTabs } = get();\n            // Find and remove from appropriate array\n            const updatedProjectFiles = projectFiles.filter((file)=>file.id !== fileId);\n            const updatedFinancialFiles = financialFiles.filter((file)=>file.id !== fileId);\n            // Close tab if it's open\n            const tabToClose = openTabs.find((tab)=>tab.id === fileId);\n            if (tabToClose) {\n                get().closeTab(fileId);\n            }\n            set({\n                projectFiles: updatedProjectFiles,\n                financialFiles: updatedFinancialFiles\n            });\n        },\n        renameFile: (fileId, newName)=>{\n            const { projectFiles, financialFiles, openTabs } = get();\n            // Find the file to get its type and generate new filename with extension\n            const projectFile = projectFiles.find((file)=>file.id === fileId);\n            const financialFile = financialFiles.find((file)=>file.id === fileId);\n            const file = projectFile || financialFile;\n            if (!file) return;\n            // Generate new filename with appropriate extension\n            const newFileName = \"\".concat(newName).concat(getFileExtension(file.type));\n            const basePath = file.category === 'financial' ? '/financial-data' : '/eac-projects';\n            const newFilePath = \"\".concat(basePath, \"/\").concat(newFileName);\n            // Update the file in appropriate array\n            const updatedProjectFiles = projectFiles.map((f)=>f.id === fileId ? {\n                    ...f,\n                    name: newFileName,\n                    filePath: newFilePath,\n                    modifiedAt: new Date()\n                } : f);\n            const updatedFinancialFiles = financialFiles.map((f)=>f.id === fileId ? {\n                    ...f,\n                    name: newFileName,\n                    filePath: newFilePath,\n                    modifiedAt: new Date()\n                } : f);\n            // Update open tabs if the file is open\n            const updatedTabs = openTabs.map((tab)=>tab.id === fileId ? {\n                    ...tab,\n                    name: newFileName,\n                    filePath: newFilePath,\n                    modified: true\n                } : tab);\n            set({\n                projectFiles: updatedProjectFiles,\n                financialFiles: updatedFinancialFiles,\n                openTabs: updatedTabs\n            });\n        },\n        renameFolder: (folderId, newName)=>{\n            const { projectFolders, financialFolders } = get();\n            // Update the folder in appropriate array\n            const updatedProjectFolders = projectFolders.map((folder)=>folder.id === folderId ? {\n                    ...folder,\n                    name: newName\n                } : folder);\n            const updatedFinancialFolders = financialFolders.map((folder)=>folder.id === folderId ? {\n                    ...folder,\n                    name: newName\n                } : folder);\n            set({\n                projectFolders: updatedProjectFolders,\n                financialFolders: updatedFinancialFolders\n            });\n        },\n        deleteFolder: (folderId)=>{\n            const { projectFolders, financialFolders, projectFiles, financialFiles, openTabs } = get();\n            // Find all files that were in this folder\n            const filesToDelete = [\n                ...projectFiles.filter((file)=>file.folderId === folderId),\n                ...financialFiles.filter((file)=>file.folderId === folderId)\n            ];\n            // Close tabs for all files in this folder\n            filesToDelete.forEach((file)=>{\n                const tabToClose = openTabs.find((tab)=>tab.id === file.id);\n                if (tabToClose) {\n                    get().closeTab(file.id);\n                }\n            });\n            // Remove from appropriate folder array\n            const updatedProjectFolders = projectFolders.filter((folder)=>folder.id !== folderId);\n            const updatedFinancialFolders = financialFolders.filter((folder)=>folder.id !== folderId);\n            // Also remove any files that were in this folder\n            const updatedProjectFiles = projectFiles.filter((file)=>file.folderId !== folderId);\n            const updatedFinancialFiles = financialFiles.filter((file)=>file.folderId !== folderId);\n            set({\n                projectFolders: updatedProjectFolders,\n                financialFolders: updatedFinancialFolders,\n                projectFiles: updatedProjectFiles,\n                financialFiles: updatedFinancialFiles\n            });\n        },\n        moveToTrash: (item, type)=>{\n            const { trashItems, projectFiles, financialFiles, projectFolders, financialFolders, openTabs } = get();\n            // Create trash item\n            const trashItem = {\n                id: \"trash_\".concat(item.id, \"_\").concat(Date.now()),\n                name: item.name,\n                type,\n                originalData: item,\n                deletedAt: new Date(),\n                category: item.category\n            };\n            if (type === 'file') {\n                const file = item;\n                // Close tab if it's open\n                const tabToClose = openTabs.find((tab)=>tab.id === file.id);\n                if (tabToClose) {\n                    get().closeTab(file.id);\n                }\n                // Remove from appropriate file array\n                const updatedProjectFiles = projectFiles.filter((f)=>f.id !== file.id);\n                const updatedFinancialFiles = financialFiles.filter((f)=>f.id !== file.id);\n                set({\n                    trashItems: [\n                        ...trashItems,\n                        trashItem\n                    ],\n                    projectFiles: updatedProjectFiles,\n                    financialFiles: updatedFinancialFiles\n                });\n            } else {\n                const folder = item;\n                // Find all files that were in this folder and move them to trash too\n                const filesToTrash = [\n                    ...projectFiles.filter((file)=>file.folderId === folder.id),\n                    ...financialFiles.filter((file)=>file.folderId === folder.id)\n                ];\n                // Close tabs for all files in this folder\n                filesToTrash.forEach((file)=>{\n                    const tabToClose = openTabs.find((tab)=>tab.id === file.id);\n                    if (tabToClose) {\n                        get().closeTab(file.id);\n                    }\n                });\n                // Create trash items for all files in the folder\n                const fileTrashItems = filesToTrash.map((file)=>({\n                        id: \"trash_\".concat(file.id, \"_\").concat(Date.now()),\n                        name: file.name,\n                        type: 'file',\n                        originalData: file,\n                        deletedAt: new Date(),\n                        category: file.category\n                    }));\n                // Remove folder and its files from arrays\n                const updatedProjectFolders = projectFolders.filter((f)=>f.id !== folder.id);\n                const updatedFinancialFolders = financialFolders.filter((f)=>f.id !== folder.id);\n                const updatedProjectFiles = projectFiles.filter((file)=>file.folderId !== folder.id);\n                const updatedFinancialFiles = financialFiles.filter((file)=>file.folderId !== folder.id);\n                set({\n                    trashItems: [\n                        ...trashItems,\n                        trashItem,\n                        ...fileTrashItems\n                    ],\n                    projectFolders: updatedProjectFolders,\n                    financialFolders: updatedFinancialFolders,\n                    projectFiles: updatedProjectFiles,\n                    financialFiles: updatedFinancialFiles\n                });\n            }\n        },\n        restoreFromTrash: (trashItemId)=>{\n            const { trashItems, projectFiles, financialFiles, projectFolders, financialFolders } = get();\n            const trashItem = trashItems.find((item)=>item.id === trashItemId);\n            if (!trashItem) return;\n            // Remove from trash\n            const updatedTrashItems = trashItems.filter((item)=>item.id !== trashItemId);\n            // Restore to appropriate array\n            if (trashItem.type === 'file') {\n                const file = trashItem.originalData;\n                if (file.category === 'project') {\n                    set({\n                        trashItems: updatedTrashItems,\n                        projectFiles: [\n                            ...projectFiles,\n                            {\n                                ...file,\n                                modifiedAt: new Date()\n                            }\n                        ]\n                    });\n                } else {\n                    set({\n                        trashItems: updatedTrashItems,\n                        financialFiles: [\n                            ...financialFiles,\n                            {\n                                ...file,\n                                modifiedAt: new Date()\n                            }\n                        ]\n                    });\n                }\n            } else {\n                const folder = trashItem.originalData;\n                if (folder.category === 'project') {\n                    set({\n                        trashItems: updatedTrashItems,\n                        projectFolders: [\n                            ...projectFolders,\n                            folder\n                        ]\n                    });\n                } else {\n                    set({\n                        trashItems: updatedTrashItems,\n                        financialFolders: [\n                            ...financialFolders,\n                            folder\n                        ]\n                    });\n                }\n            }\n        },\n        permanentlyDelete: (trashItemId)=>{\n            const { trashItems } = get();\n            // Remove from trash permanently\n            const updatedTrashItems = trashItems.filter((item)=>item.id !== trashItemId);\n            set({\n                trashItems: updatedTrashItems\n            });\n        },\n        emptyTrash: ()=>{\n            set({\n                trashItems: []\n            });\n        },\n        clearProjectCategory: ()=>{\n            const { openTabs } = get();\n            // Close all project-related tabs\n            const projectTabIds = openTabs.filter((tab)=>{\n                // Find the corresponding file to check its category\n                const { projectFiles } = get();\n                const file = projectFiles.find((f)=>f.id === tab.id);\n                return (file === null || file === void 0 ? void 0 : file.category) === 'project';\n            }).map((tab)=>tab.id);\n            projectTabIds.forEach((tabId)=>get().closeTab(tabId));\n            // Clear all project files and folders\n            set({\n                projectFiles: [],\n                projectFolders: []\n            });\n        },\n        clearFinancialCategory: ()=>{\n            const { openTabs } = get();\n            // Close all financial-related tabs\n            const financialTabIds = openTabs.filter((tab)=>{\n                // Find the corresponding file to check its category\n                const { financialFiles } = get();\n                const file = financialFiles.find((f)=>f.id === tab.id);\n                return (file === null || file === void 0 ? void 0 : file.category) === 'financial';\n            }).map((tab)=>tab.id);\n            financialTabIds.forEach((tabId)=>get().closeTab(tabId));\n            // Clear all financial files and folders\n            set({\n                financialFiles: [],\n                financialFolders: []\n            });\n        },\n        deleteProjectsCategory: ()=>{\n            get().clearProjectCategory();\n            set({\n                showProjectsCategory: false\n            });\n        },\n        deleteFinancialCategory: ()=>{\n            get().clearFinancialCategory();\n            set({\n                showFinancialCategory: false\n            });\n        },\n        reorderProjectFolders: (fromIndex, toIndex)=>{\n            const { projectFolders } = get();\n            const newFolders = [\n                ...projectFolders\n            ];\n            const [movedFolder] = newFolders.splice(fromIndex, 1);\n            newFolders.splice(toIndex, 0, movedFolder);\n            set({\n                projectFolders: newFolders\n            });\n        },\n        updateProjectFolders: (folders)=>{\n            set({\n                projectFolders: folders\n            });\n        },\n        reorderFilesInFolder: (folderId, fromIndex, toIndex, category)=>{\n            const { projectFiles, financialFiles } = get();\n            if (category === 'project') {\n                // Filter files in the specific folder\n                const folderFiles = projectFiles.filter((file)=>file.folderId === folderId);\n                const otherFiles = projectFiles.filter((file)=>file.folderId !== folderId);\n                // Reorder files within the folder\n                const reorderedFolderFiles = [\n                    ...folderFiles\n                ];\n                const [movedFile] = reorderedFolderFiles.splice(fromIndex, 1);\n                reorderedFolderFiles.splice(toIndex, 0, movedFile);\n                // Combine with other files\n                const newProjectFiles = [\n                    ...otherFiles,\n                    ...reorderedFolderFiles\n                ];\n                set({\n                    projectFiles: newProjectFiles\n                });\n            } else {\n                // Similar logic for financial files\n                const folderFiles = financialFiles.filter((file)=>file.folderId === folderId);\n                const otherFiles = financialFiles.filter((file)=>file.folderId !== folderId);\n                const reorderedFolderFiles = [\n                    ...folderFiles\n                ];\n                const [movedFile] = reorderedFolderFiles.splice(fromIndex, 1);\n                reorderedFolderFiles.splice(toIndex, 0, movedFile);\n                const newFinancialFiles = [\n                    ...otherFiles,\n                    ...reorderedFolderFiles\n                ];\n                set({\n                    financialFiles: newFinancialFiles\n                });\n            }\n        },\n        saveFile: (tabId)=>{\n            const { openTabs, projectFiles, financialFiles } = get();\n            const tab = openTabs.find((t)=>t.id === tabId);\n            if (!tab) return;\n            // Update the file content in appropriate array\n            const updatedProjectFiles = projectFiles.map((file)=>file.id === tabId ? {\n                    ...file,\n                    content: tab.content,\n                    modifiedAt: new Date()\n                } : file);\n            const updatedFinancialFiles = financialFiles.map((file)=>file.id === tabId ? {\n                    ...file,\n                    content: tab.content,\n                    modifiedAt: new Date()\n                } : file);\n            const updatedTabs = openTabs.map((t)=>t.id === tabId ? {\n                    ...t,\n                    modified: false\n                } : t);\n            set({\n                projectFiles: updatedProjectFiles,\n                financialFiles: updatedFinancialFiles,\n                openTabs: updatedTabs\n            });\n        },\n        setError: (error)=>{\n            set({\n                error\n            });\n        },\n        // Fix files that don't have content\n        repairFilesWithoutContent: ()=>{\n            const { projectFiles, financialFiles } = get();\n            const repairedProjectFiles = projectFiles.map((file)=>{\n                if (!file.content || file.content.trim() === '') {\n                    return {\n                        ...file,\n                        content: getDefaultContent(file.type, file.name),\n                        modifiedAt: new Date()\n                    };\n                }\n                return file;\n            });\n            const repairedFinancialFiles = financialFiles.map((file)=>{\n                if (!file.content || file.content.trim() === '') {\n                    return {\n                        ...file,\n                        content: getDefaultContent(file.type, file.name),\n                        modifiedAt: new Date()\n                    };\n                }\n                return file;\n            });\n            set({\n                projectFiles: repairedProjectFiles,\n                financialFiles: repairedFinancialFiles\n            });\n        },\n        reset: ()=>{\n            set({\n                openTabs: [],\n                activeTab: '',\n                projectFiles: initialProjectFiles,\n                financialFiles: initialFinancialFiles,\n                projectFolders: [],\n                financialFolders: [],\n                showProjectsCategory: true,\n                showFinancialCategory: false,\n                isLoading: false,\n                error: null\n            });\n        }\n    }), {\n    name: 'editor-storage',\n    // Only persist specific fields\n    partialize: (state)=>({\n            openTabs: state.openTabs.map((tab)=>({\n                    id: tab.id,\n                    name: tab.name,\n                    modified: tab.modified,\n                    content: tab.content,\n                    filePath: tab.filePath,\n                    type: tab.type\n                })),\n            activeTab: state.activeTab,\n            projectFiles: state.projectFiles,\n            financialFiles: state.financialFiles,\n            projectFolders: state.projectFolders,\n            financialFolders: state.financialFolders,\n            showProjectsCategory: state.showProjectsCategory,\n            showFinancialCategory: state.showFinancialCategory\n        }),\n    // Custom storage to handle icon restoration\n    storage: {\n        getItem: (name)=>{\n            const str = localStorage.getItem(name);\n            if (!str) return null;\n            const { state } = JSON.parse(str);\n            // Restore icons based on file type\n            const restoredTabs = (state.openTabs || []).map((tab)=>{\n                let icon = _barrel_optimize_names_AtSign_Braces_Calendar_Camera_FileCode_FileSpreadsheet_FileText_FileType_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n                switch(tab.type){\n                    case 'typescript':\n                    case 'javascript':\n                        icon = _barrel_optimize_names_AtSign_Braces_Calendar_Camera_FileCode_FileSpreadsheet_FileText_FileType_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n                        break;\n                    case 'json':\n                        icon = _barrel_optimize_names_AtSign_Braces_Calendar_Camera_FileCode_FileSpreadsheet_FileText_FileType_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\n                        break;\n                    case 'excel':\n                        icon = _barrel_optimize_names_AtSign_Braces_Calendar_Camera_FileCode_FileSpreadsheet_FileText_FileType_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\n                        break;\n                    case 'markdown':\n                        icon = _barrel_optimize_names_AtSign_Braces_Calendar_Camera_FileCode_FileSpreadsheet_FileText_FileType_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_3__[\"default\"];\n                        break;\n                    case 'pdf':\n                        icon = _barrel_optimize_names_AtSign_Braces_Calendar_Camera_FileCode_FileSpreadsheet_FileText_FileType_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n                        break;\n                }\n                return {\n                    ...tab,\n                    icon\n                };\n            });\n            return {\n                state: {\n                    ...state,\n                    openTabs: restoredTabs\n                }\n            };\n        },\n        setItem: (name, value)=>{\n            localStorage.setItem(name, JSON.stringify(value));\n        },\n        removeItem: (name)=>localStorage.removeItem(name)\n    },\n    onRehydrateStorage: ()=>(state)=>{\n            if (state) {\n                // Repair any files that don't have content\n                if (state.projectFiles) {\n                    state.projectFiles = state.projectFiles.map((file)=>{\n                        if (!file.content || file.content.trim() === '') {\n                            return {\n                                ...file,\n                                content: getDefaultContent(file.type, file.name),\n                                modifiedAt: new Date()\n                            };\n                        }\n                        return file;\n                    });\n                }\n                if (state.financialFiles) {\n                    state.financialFiles = state.financialFiles.map((file)=>{\n                        if (!file.content || file.content.trim() === '') {\n                            return {\n                                ...file,\n                                content: getDefaultContent(file.type, file.name),\n                                modifiedAt: new Date()\n                            };\n                        }\n                        return file;\n                    });\n                }\n                // Ensure Instructions folder exists if there are project folders\n                if (state.projectFolders && state.projectFolders.length > 0) {\n                    // Only ensure the Instructions folder if there are already some project folders\n                    // This prevents auto-creation when storage is intentionally cleared\n                    const hasInstructionsFolder = state.projectFolders.some((folder)=>folder.id === 'instructions-folder' && folder.pinned);\n                    if (!hasInstructionsFolder) {\n                        state.projectFolders = [\n                            {\n                                id: 'instructions-folder',\n                                name: 'Instructions',\n                                category: 'project',\n                                createdAt: new Date(),\n                                pinned: true\n                            },\n                            ...state.projectFolders\n                        ];\n                    }\n                }\n            }\n        // If projectFolders is empty, respect that (don't auto-create anything)\n        }\n}), {\n    name: 'editor-store'\n}));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./store/editor/index.ts\n"));

/***/ })

});