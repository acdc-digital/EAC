"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./store/agents/index.ts":
/*!*******************************!*\
  !*** ./store/agents/index.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useAgentStore: () => (/* binding */ useAgentStore)\n/* harmony export */ });\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/../node_modules/.pnpm/zustand@5.0.6_@types+react@19.1.8_react@18.3.1_use-sync-external-store@1.5.0_react@18.3.1_/node_modules/zustand/esm/react.mjs\");\n/* harmony import */ var zustand_middleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zustand/middleware */ \"(app-pages-browser)/../node_modules/.pnpm/zustand@5.0.6_@types+react@19.1.8_react@18.3.1_use-sync-external-store@1.5.0_react@18.3.1_/node_modules/zustand/esm/middleware.mjs\");\n// Agent Store\n// /Users/matthewsimon/Projects/eac/eac/store/agents/index.ts\n\n\n// Initial agents - starting with the Instructions agent\nconst initialAgents = [\n    {\n        id: 'instructions',\n        name: 'Instructions',\n        description: 'Generate and maintain project instructions and documentation',\n        isActive: false,\n        icon: '📚',\n        tools: [\n            {\n                id: 'generate-instructions',\n                name: 'Generate Instructions',\n                command: '/instructions',\n                description: 'Create a new instruction document for the project',\n                parameters: [\n                    {\n                        name: 'topic',\n                        type: 'string',\n                        description: 'Topic or area to create instructions for',\n                        required: true\n                    },\n                    {\n                        name: 'audience',\n                        type: 'select',\n                        description: 'Target audience for the instructions',\n                        required: false,\n                        options: [\n                            'developers',\n                            'users',\n                            'administrators',\n                            'general'\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\n];\nconst useAgentStore = (0,zustand__WEBPACK_IMPORTED_MODULE_0__.create)()((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_1__.devtools)((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_1__.persist)((set, get)=>({\n        // Initial state\n        agents: initialAgents,\n        activeAgentId: null,\n        executions: [],\n        isLoading: false,\n        error: null,\n        // Actions\n        addAgent: (agentData)=>{\n            const newAgent = {\n                ...agentData,\n                id: crypto.randomUUID()\n            };\n            set((state)=>({\n                    agents: [\n                        ...state.agents,\n                        newAgent\n                    ]\n                }), false, 'addAgent');\n        },\n        updateAgent: (id, updates)=>{\n            set((state)=>({\n                    agents: state.agents.map((agent)=>agent.id === id ? {\n                            ...agent,\n                            ...updates\n                        } : agent)\n                }), false, 'updateAgent');\n        },\n        deleteAgent: (id)=>{\n            set((state)=>({\n                    agents: state.agents.filter((agent)=>agent.id !== id),\n                    activeAgentId: state.activeAgentId === id ? null : state.activeAgentId\n                }), false, 'deleteAgent');\n        },\n        setActiveAgent: (id)=>{\n            // First deactivate all agents\n            set((state)=>({\n                    agents: state.agents.map((agent)=>({\n                            ...agent,\n                            isActive: false\n                        })),\n                    activeAgentId: id\n                }), false, 'deactivateAllAgents');\n            // Then activate the selected agent if provided\n            if (id) {\n                set((state)=>({\n                        agents: state.agents.map((agent)=>agent.id === id ? {\n                                ...agent,\n                                isActive: true\n                            } : agent)\n                    }), false, 'activateAgent');\n            }\n        },\n        executeAgentTool: async (agentId, toolId, input, convexMutations)=>{\n            const { agents, addExecution } = get();\n            const agent = agents.find((a)=>a.id === agentId);\n            const tool = agent === null || agent === void 0 ? void 0 : agent.tools.find((t)=>t.id === toolId);\n            if (!agent || !tool) {\n                throw new Error(\"Agent or tool not found: \".concat(agentId, \"/\").concat(toolId));\n            }\n            set({\n                isLoading: true,\n                error: null\n            });\n            try {\n                // Add execution record\n                const executionId = crypto.randomUUID();\n                addExecution({\n                    agentId,\n                    toolId,\n                    input,\n                    status: 'pending'\n                });\n                // Execute the agent tool based on agent type\n                let result = '';\n                if (agent.id === 'instructions') {\n                    result = await executeInstructionsAgent(tool, input, convexMutations);\n                } else {\n                    throw new Error(\"Unknown agent type: \".concat(agent.id));\n                }\n                // Update execution with result\n                set((state)=>({\n                        executions: state.executions.map((exec)=>exec.id === executionId ? {\n                                ...exec,\n                                output: result,\n                                status: 'completed'\n                            } : exec),\n                        isLoading: false\n                    }));\n                return result;\n            } catch (error) {\n                const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n                // Update execution with error\n                set((state)=>({\n                        executions: state.executions.map((exec)=>exec.agentId === agentId && exec.toolId === toolId && exec.input === input ? {\n                                ...exec,\n                                status: 'error',\n                                error: errorMessage\n                            } : exec),\n                        isLoading: false,\n                        error: errorMessage\n                    }));\n                throw error;\n            }\n        },\n        addExecution: (executionData)=>{\n            const execution = {\n                ...executionData,\n                id: crypto.randomUUID(),\n                timestamp: new Date()\n            };\n            set((state)=>({\n                    executions: [\n                        execution,\n                        ...state.executions.slice(0, 99)\n                    ] // Keep last 100 executions\n                }), false, 'addExecution');\n        },\n        clearExecutions: ()=>{\n            set({\n                executions: []\n            }, false, 'clearExecutions');\n        },\n        setError: (error)=>{\n            set({\n                error\n            }, false, 'setError');\n        },\n        setLoading: (loading)=>{\n            set({\n                isLoading: loading\n            }, false, 'setLoading');\n        },\n        reset: ()=>{\n            set({\n                agents: initialAgents,\n                activeAgentId: null,\n                executions: [],\n                isLoading: false,\n                error: null\n            }, false, 'reset');\n        }\n    }), {\n    name: 'agent-storage',\n    partialize: (state)=>({\n            agents: state.agents,\n            activeAgentId: state.activeAgentId,\n            executions: state.executions.slice(0, 50) // Only persist last 50 executions\n        })\n}), {\n    name: 'agent-store'\n}));\n// Instructions Agent Tool Execution\nasync function executeInstructionsAgent(tool, input, convexMutations) {\n    if (tool.id === 'generate-instructions') {\n        var _topicMatch_, _audienceMatch_;\n        // Clean the input by removing the command and extracting the actual instruction\n        let cleanInput = input.trim();\n        // Remove the /instructions command if present\n        if (cleanInput.startsWith('/instructions')) {\n            cleanInput = cleanInput.replace('/instructions', '').trim();\n        }\n        // Extract topic and audience from cleaned input\n        const topicMatch = cleanInput.match(/topic:\\s*(.+?)(?:\\s+audience:|$)/i);\n        const audienceMatch = cleanInput.match(/audience:\\s*(.+?)$/i);\n        // If no explicit topic is provided, use the entire cleaned input as the topic\n        const topic = (topicMatch === null || topicMatch === void 0 ? void 0 : (_topicMatch_ = topicMatch[1]) === null || _topicMatch_ === void 0 ? void 0 : _topicMatch_.trim()) || cleanInput || 'General Instructions';\n        const audience = (audienceMatch === null || audienceMatch === void 0 ? void 0 : (_audienceMatch_ = audienceMatch[1]) === null || _audienceMatch_ === void 0 ? void 0 : _audienceMatch_.trim()) || 'developers';\n        // Generate instruction content based on topic and audience\n        const instructionContent = generateInstructionContent(topic, audience);\n        // Create a clean filename based on the topic (limit length and clean special chars)\n        const cleanTopic = topic.length > 50 ? topic.substring(0, 50) : topic;\n        const filename = \"\".concat(cleanTopic.toLowerCase().replace(/[^a-z0-9\\s]/g, '').replace(/\\s+/g, '-'), \"-instructions.md\");\n        try {\n            // Try to use Convex mutations if available\n            if (convexMutations) {\n                // Ensure Instructions project exists\n                await convexMutations.ensureInstructionsProject();\n                // Create the instruction file in Convex database ONLY (don't create new project)\n                await convexMutations.createInstructionFile({\n                    name: filename,\n                    content: instructionContent,\n                    topic: topic,\n                    audience: audience\n                });\n                // Store in local editor for immediate display in the existing Instructions folder\n                const { useEditorStore } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! @/store */ \"(app-pages-browser)/./store/index.ts\"));\n                const { createNewFile } = useEditorStore.getState();\n                // Create file in the Instructions folder (use 'instructions' as folder name, not project creation)\n                createNewFile(filename, 'markdown', 'project', 'instructions');\n                return \"✅ Instructions document created successfully!\\n\\n**File**: \".concat(filename, \"\\n**Topic**: \").concat(topic, \"\\n**Audience**: \").concat(audience, \"\\n**Location**: Instructions project folder (synced to database)\\n\\nThe instruction document has been added to your Instructions folder and saved to the database.\\n\\n**Content Preview**:\\n\").concat(instructionContent.substring(0, 200), \"...\\n\\nThis instruction will now be available as context for all future AI conversations.\");\n            } else {\n                // Fallback to local creation if Convex mutations not available\n                const { useEditorStore } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! @/store */ \"(app-pages-browser)/./store/index.ts\"));\n                const { createNewFile } = useEditorStore.getState();\n                createNewFile(filename, 'markdown', 'project', 'instructions');\n                return \"✅ Instructions document created locally!\\n\\n**File**: \".concat(filename, \"\\n**Topic**: \").concat(topic, \"\\n**Audience**: \").concat(audience, \"\\n**Location**: Instructions project folder\\n\\nThe instruction document has been added to your Instructions folder.\\n\\n**Note**: To enable database sync and cross-session persistence, use the Instructions agent from a connected React component.\\n\\n**Content Preview**:\\n\").concat(instructionContent.substring(0, 200), \"...\\n\\nThis instruction will be available as context for future AI conversations once database sync is enabled.\");\n            }\n        } catch (error) {\n            console.error('Error creating instruction file:', error);\n            return \"❌ Failed to create instruction document\\n\\n**Error**: \".concat(error instanceof Error ? error.message : 'Unknown error', \"\\n**Topic**: \").concat(topic, \"\\n**Audience**: \").concat(audience, \"\\n\\nPlease try again or contact support if the issue persists.\");\n        }\n    }\n    throw new Error(\"Unknown tool: \".concat(tool.id));\n}\n// Generate instruction content based on topic and audience\nfunction generateInstructionContent(topic, audience) {\n    const currentDate = new Date().toLocaleDateString();\n    return \"# \".concat(topic, \" Instructions\\n\\n**Created**: \").concat(currentDate, \"  \\n**Audience**: \").concat(audience, \"  \\n**Project**: EAC Financial Dashboard\\n\\n## Overview\\n\\nThis document provides comprehensive instructions for \").concat(topic.toLowerCase(), \" within the EAC Financial Dashboard project.\\n\\n## Prerequisites\\n\\n\").concat(audience === 'developers' ? \"\\n- Node.js 18+ installed\\n- pnpm package manager\\n- Basic understanding of Next.js and TypeScript\\n- Familiarity with Convex database operations\\n\" : audience === 'users' ? \"\\n- Access to the EAC Dashboard\\n- Basic understanding of project management concepts\\n- Familiarity with web applications\\n\" : \"\\n- Administrative access to the system\\n- Understanding of the project requirements\\n\", \"\\n\\n## Getting Started\\n\\n### Step 1: Understanding the Context\\n\\n\").concat(topic.toLowerCase().includes('component') ? \"\\nThis instruction covers component development within the EAC Dashboard. Components follow our established patterns using:\\n\\n- TypeScript with strict mode\\n- Tailwind CSS v4 with CSS variables\\n- ShadCN/UI component patterns\\n- Zustand for state management\\n\" : topic.toLowerCase().includes('database') ? \"\\nThis instruction covers database operations using Convex. Our database patterns include:\\n\\n- Real-time queries and mutations\\n- TypeScript-first schema definitions\\n- Automatic type generation\\n- Optimistic updates for better UX\\n\" : \"\\nThis instruction covers \".concat(topic.toLowerCase(), \" best practices for the EAC project.\\n\"), \"\\n\\n### Step 2: Implementation Guidelines\\n\\n\").concat(audience === 'developers' ? \"\\nFollow these coding standards:\\n\\n1. **File Organization**: Place files in appropriate directories following our structure\\n2. **TypeScript**: Use explicit types and interfaces\\n3. **Styling**: Use CSS variables for theming (`bg-background text-foreground`)\\n4. **State Management**: Use Zustand stores for complex state\\n5. **Error Handling**: Implement proper error boundaries and user feedback\\n\\n**Example Implementation**:\\n\\n```typescript\\n// Example component pattern\\ninterface \".concat(topic.replace(/[^a-zA-Z]/g, ''), \"Props {\\n  title: string;\\n  className?: string;\\n  children?: React.ReactNode;\\n}\\n\\nexport function \").concat(topic.replace(/[^a-zA-Z]/g, ''), \"({ className, ...props }: \").concat(topic.replace(/[^a-zA-Z]/g, ''), 'Props) {\\n  return (\\n    <div className={cn(\"default-styles\", className)} {...props}>\\n      {/* Implementation */}\\n    </div>\\n  );\\n}\\n```\\n') : \"\\nFollow these steps:\\n\\n1. **Planning**: Understand the requirements thoroughly\\n2. **Testing**: Test each step in a development environment first\\n3. **Documentation**: Keep notes of any changes made\\n4. **Backup**: Ensure proper backups before major changes\\n\", \"\\n\\n### Step 3: Best Practices\\n\\n- **Consistency**: Follow established patterns in the codebase\\n- **Documentation**: Document any complex logic or decisions\\n- **Testing**: Test thoroughly before deployment\\n- **Performance**: Consider performance implications of changes\\n- **Accessibility**: Ensure proper ARIA labels and keyboard navigation\\n\\n## Common Issues and Solutions\\n\\n### Issue 1: Styling Problems\\n- **Solution**: Ensure you're using CSS variables (`bg-background` not `bg-white`)\\n- **Check**: Verify Tailwind classes are applied correctly\\n\\n### Issue 2: State Management\\n- **Solution**: Use appropriate Zustand store for the feature\\n- **Check**: Ensure proper TypeScript interfaces are defined\\n\\n### Issue 3: Performance Issues\\n- **Solution**: Implement proper memoization and optimize re-renders\\n- **Check**: Use React DevTools to identify performance bottlenecks\\n\\n## Next Steps\\n\\n1. Review the generated content\\n2. Customize based on specific requirements\\n3. Test implementation thoroughly\\n4. Update documentation as needed\\n\\n## Resources\\n\\n- [EAC Project Documentation](../README.md)\\n- [Design System Guidelines](../docs/design-system.md)\\n- [State Management Guide](../docs/state-management.md)\\n- [Convex Documentation](https://docs.convex.dev)\\n\\n---\\n\\n*This document was generated by the EAC Instructions Agent. Update as needed for your specific use case.*\");\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./store/agents/index.ts\n"));

/***/ })

});