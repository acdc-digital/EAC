"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./store/agents/directorAgent.ts":
/*!***************************************!*\
  !*** ./store/agents/directorAgent.ts ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DirectorAgent: () => (/* binding */ DirectorAgent),\n/* harmony export */   directorAgent: () => (/* binding */ directorAgent)\n/* harmony export */ });\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ \"(app-pages-browser)/./store/agents/base.ts\");\n// Campaign Director Agent\n// Orchestrates large-scale marketing campaigns with 100+ posts across multiple platforms\n\nclass DirectorAgent extends _base__WEBPACK_IMPORTED_MODULE_0__.BaseAgent {\n    async execute(tool, input, convexMutations, sessionId) {\n        if (!sessionId) {\n            return 'Session ID is required for campaign orchestration';\n        }\n        // Initialize or get session\n        if (!this.sessions.has(sessionId)) {\n            this.sessions.set(sessionId, {\n                currentStep: 'instructions',\n                activeCampaigns: new Map()\n            });\n        }\n        const session = this.sessions.get(sessionId);\n        // Handle continuation from file selection\n        if (input.includes('file_selection') && session.currentStep === 'instructions') {\n            // This means the user has completed file selection, proceed to next step\n            if (session.instructionsFile && session.instructionsContent) {\n                session.currentStep = 'campaign-setup';\n                const contentPreview = session.instructionsContent ? \"\".concat(session.instructionsContent.substring(0, 200)).concat(session.instructionsContent.length > 200 ? '...' : '') : 'Content loaded successfully';\n                return \"Instructions Loaded: \".concat(session.instructionsFile, \"\\n\\nInstructions Content Preview:\\n\").concat(contentPreview, '\\n\\nStep 2: Campaign Configuration\\n\\nNow let me set up your campaign parameters based on your instructions. Please provide the following information:\\n\\n1. Campaign Name\\n2. Campaign Duration (in weeks)\\n3. Target Platforms (twitter, linkedin, facebook, instagram)\\n4. Posts per day\\n5. Campaign Goals\\n\\nType your campaign details or say \"generate default campaign\" to use standard settings.');\n            }\n        }\n        // Step 1: Request instructions file\n        if (session.currentStep === 'instructions' && !session.instructionsFile) {\n            if (convexMutations.storeChatMessage) {\n                await convexMutations.storeChatMessage({\n                    role: 'assistant',\n                    content: 'Campaign Director Agent\\n\\nI will help you orchestrate a comprehensive marketing campaign with 100+ posts across multiple platforms.\\n\\nStep 1: Select Instructions File\\n\\nFirst, I need to understand your campaign strategy. Please select an instructions file that contains your campaign guidelines, brand voice, or marketing strategy.\\n\\nWhat you can include in your instructions file:\\n- Brand voice and tone guidelines\\n- Target audience information\\n- Campaign objectives and KPIs\\n- Content themes and messaging\\n- Platform-specific requirements\\n- Hashtag strategies\\n- Visual guidelines\\n\\nSelect your instructions file:',\n                    sessionId,\n                    interactiveComponent: {\n                        type: 'file_selector',\n                        status: 'pending',\n                        data: {\n                            fileType: 'instructions',\n                            filterByExtension: [\n                                '.md',\n                                '.txt'\n                            ],\n                            placeholder: 'Select campaign instructions file...'\n                        }\n                    }\n                });\n            }\n            return 'Please select an instructions file to get started with your campaign.';\n        }\n        // Handle file selection input\n        if (input.includes('Selected file:') && session.currentStep === 'instructions') {\n            const fileName = input.replace('Selected file:', '').trim();\n            session.instructionsFile = fileName;\n            // Fetch the file content\n            try {\n                var _convexMutations_getAllFiles;\n                const files = await ((_convexMutations_getAllFiles = convexMutations.getAllFiles) === null || _convexMutations_getAllFiles === void 0 ? void 0 : _convexMutations_getAllFiles.call(convexMutations)) || [];\n                const instructionFile = files.find((f)=>f.name === fileName);\n                if (instructionFile) {\n                    session.instructionsContent = instructionFile.content;\n                    session.currentStep = 'campaign-setup';\n                    const contentPreview = session.instructionsContent ? \"\".concat(session.instructionsContent.substring(0, 200)).concat(session.instructionsContent.length > 200 ? '...' : '') : 'Content loaded successfully';\n                    return \"Instructions Loaded: \".concat(fileName, \"\\n\\nInstructions Content Preview:\\n\").concat(contentPreview, '\\n\\nStep 2: Campaign Configuration\\n\\nNow let me set up your campaign parameters based on your instructions. Please provide the following information:\\n\\n1. Campaign Name\\n2. Campaign Duration (in weeks)\\n3. Target Platforms (twitter, linkedin, facebook, instagram)\\n4. Posts per day\\n5. Campaign Goals\\n\\nType your campaign details or say \"generate default campaign\" to use standard settings.');\n                } else {\n                    return 'File \"'.concat(fileName, '\" not found. Please select a valid instructions file.');\n                }\n            } catch (error) {\n                console.error('Error loading instructions file:', error);\n                return 'Error loading instructions file. Please try again.';\n            }\n        }\n        // Handle campaign configuration\n        if (session.currentStep === 'campaign-setup') {\n            if (input.toLowerCase().includes('generate default campaign') || input.toLowerCase().includes('default')) {\n                // Use default campaign settings\n                session.campaignName = 'EAC Marketing Campaign';\n                session.duration = 4; // weeks\n                session.platforms = [\n                    'twitter',\n                    'linkedin',\n                    'instagram',\n                    'facebook'\n                ];\n                session.postsPerDay = 3;\n                session.campaignGoals = 'Brand awareness and lead generation';\n                session.currentStep = 'generating';\n                return await this.generateCampaign(session, convexMutations, sessionId);\n            } else {\n                // Parse custom campaign settings from user input\n                return this.parseCampaignSettings(input, session);\n            }\n        }\n        // Handle batch generation status updates\n        if (input.includes('batch completed') || input.includes('posts generated')) {\n            return this.handleBatchCompletion(input, session);\n        }\n        return 'Campaign orchestration in progress. Use /director to start a new campaign.';\n    }\n    parseCampaignSettings(input, session) {\n        var _session_platforms;\n        // Extract campaign settings from user input\n        const lines = input.split('\\n').map((line)=>line.trim()).filter((line)=>line.length > 0);\n        for (const line of lines){\n            const lower = line.toLowerCase();\n            if (lower.includes('name:') || lower.startsWith('1.')) {\n                var _line_split_;\n                session.campaignName = ((_line_split_ = line.split(':')[1]) === null || _line_split_ === void 0 ? void 0 : _line_split_.trim()) || line.replace(/^1\\./, '').trim();\n            } else if (lower.includes('duration:') || lower.includes('weeks') || lower.startsWith('2.')) {\n                const match = line.match(/(\\d+)/);\n                if (match) session.duration = parseInt(match[1]);\n            } else if (lower.includes('platform') || lower.startsWith('3.')) {\n                const platforms = line.toLowerCase().match(/(twitter|linkedin|facebook|instagram)/g);\n                if (platforms) session.platforms = platforms;\n            } else if (lower.includes('posts per day') || lower.startsWith('4.')) {\n                const match = line.match(/(\\d+)/);\n                if (match) session.postsPerDay = parseInt(match[1]);\n            } else if (lower.includes('goals:') || lower.startsWith('5.')) {\n                var _line_split_1;\n                session.campaignGoals = ((_line_split_1 = line.split(':')[1]) === null || _line_split_1 === void 0 ? void 0 : _line_split_1.trim()) || line.replace(/^5\\./, '').trim();\n            }\n        }\n        // Validate required fields\n        if (!session.campaignName || !session.duration || !((_session_platforms = session.platforms) === null || _session_platforms === void 0 ? void 0 : _session_platforms.length)) {\n            return 'Please provide all required campaign details:\\n\\n1. Campaign Name\\n2. Duration (weeks)\\n3. Platforms\\n4. Posts per day\\n5. Goals\\n\\nOr type \"generate default campaign\" to use standard settings.';\n        }\n        session.currentStep = 'generating';\n        return \"Campaign Configuration Set:\\n\\nName: \".concat(session.campaignName, \"\\nDuration: \").concat(session.duration, \" weeks\\nPlatforms: \").concat(session.platforms.join(', '), \"\\nPosts per day: \").concat(session.postsPerDay, \"\\nGoals: \").concat(session.campaignGoals, \"\\n\\nGenerating your comprehensive campaign...\");\n    }\n    async generateCampaign(session, convexMutations, sessionId) {\n        try {\n            // Calculate total posts needed\n            const totalDays = (session.duration || 4) * 7;\n            const postsPerDay = session.postsPerDay || 3;\n            const totalPosts = totalDays * postsPerDay;\n            const platforms = session.platforms || [\n                'twitter',\n                'linkedin',\n                'instagram',\n                'facebook'\n            ];\n            // Create campaign in database\n            let campaignId;\n            try {\n                var _convexMutations_createCampaign;\n                const campaign = await ((_convexMutations_createCampaign = convexMutations.createCampaign) === null || _convexMutations_createCampaign === void 0 ? void 0 : _convexMutations_createCampaign.call(convexMutations, {\n                    name: session.campaignName || 'Generated Campaign',\n                    description: \"Auto-generated campaign: \".concat(session.campaignGoals || 'Marketing campaign'),\n                    platforms,\n                    totalPosts,\n                    duration: session.duration || 4,\n                    instructionsContent: session.instructionsContent || '',\n                    status: 'generating'\n                }));\n                campaignId = (campaign === null || campaign === void 0 ? void 0 : campaign._id) || \"campaign_\".concat(Date.now());\n            } catch (error) {\n                console.log('Campaign creation not available, using fallback ID');\n                campaignId = \"campaign_\".concat(Date.now());\n            }\n            // Generate posts in batches\n            const allPosts = await this.generateBatchesAsync(totalPosts, platforms, session.instructionsContent || '', campaignId, session.duration || 4);\n            // Create batches for processing\n            const batches = this.createBatches(allPosts, campaignId);\n            // Store batches in session\n            batches.forEach((batch)=>{\n                session.activeCampaigns.set(batch.campaignId, batch);\n            });\n            // Process first batch\n            if (batches.length > 0) {\n                await this.processBatch(batches[0], convexMutations, sessionId);\n            }\n            session.currentStep = 'scheduling';\n            return \"Campaign Generation Complete!\\n\\nGenerated \".concat(totalPosts, \" posts across \").concat(platforms.length, \" platforms\\nOrganized into \").concat(batches.length, \" processing batches\\nStarting content creation and scheduling...\\n\\nCampaign ID: \").concat(campaignId, \"\\nTotal Posts: \").concat(totalPosts, \"\\nPlatforms: \").concat(platforms.join(', '), \"\\nDuration: \").concat(session.duration, \" weeks\");\n        } catch (error) {\n            console.error('Campaign generation error:', error);\n            return \"Error generating campaign: \".concat(error instanceof Error ? error.message : 'Unknown error');\n        }\n    }\n    async generateBatchesAsync(totalPosts, platforms, instructions, campaignId, duration) {\n        const posts = [];\n        const days = [\n            'Monday',\n            'Tuesday',\n            'Wednesday',\n            'Thursday',\n            'Friday',\n            'Saturday',\n            'Sunday'\n        ];\n        for(let i = 0; i < totalPosts; i++){\n            const platform = platforms[i % platforms.length];\n            const week = Math.floor(i / (totalPosts / duration)) + 1;\n            const dayIndex = i % 7;\n            const day = days[dayIndex];\n            // Determine optimal posting time based on platform\n            const time = this.getOptimalPostTime(platform, dayIndex);\n            // Calculate post date\n            const startDate = new Date();\n            const postDate = new Date(startDate);\n            postDate.setDate(startDate.getDate() + Math.floor(i / platforms.length));\n            // Determine campaign phase based on week\n            const phases = [\n                'awareness',\n                'consideration',\n                'conversion',\n                'retention'\n            ];\n            const phaseIndex = Math.floor((week - 1) / (duration / phases.length));\n            const phase = phases[Math.min(phaseIndex, phases.length - 1)];\n            // Determine content type cyclically\n            const contentTypes = [\n                'educational',\n                'promotional',\n                'engagement',\n                'announcement'\n            ];\n            const contentType = contentTypes[i % contentTypes.length];\n            // Generate content\n            const content = this.generatePlatformContent(platform, phase, contentType, instructions, week, day);\n            posts.push({\n                platform,\n                content,\n                scheduledDate: postDate.toISOString().split('T')[0],\n                scheduledTime: time,\n                metadata: {\n                    week,\n                    dayOfWeek: day,\n                    campaignPhase: phase,\n                    contentType,\n                    hashtags: this.generateHashtags(platform, phase, contentType),\n                    campaignId,\n                    batchId: \"batch_\".concat(Math.floor(i / this.BATCH_SIZE))\n                }\n            });\n        }\n        return posts;\n    }\n    getOptimalPostTime(platform, dayIndex) {\n        const times = {\n            twitter: [\n                '09:00',\n                '12:00',\n                '15:00',\n                '18:00'\n            ],\n            linkedin: [\n                '08:00',\n                '12:00',\n                '17:00'\n            ],\n            instagram: [\n                '11:00',\n                '14:00',\n                '17:00',\n                '19:00'\n            ],\n            facebook: [\n                '09:00',\n                '13:00',\n                '15:00'\n            ]\n        };\n        const platformTimes = times[platform] || times.twitter;\n        return platformTimes[dayIndex % platformTimes.length];\n    }\n    generatePlatformContent(platform, phase, contentType, instructions, week, day) {\n        const brandVoice = this.extractBrandVoice(instructions);\n        const audience = this.extractAudience(instructions);\n        const content = \"\".concat(brandVoice, \" content for \").concat(audience, \" - Week \").concat(week, \", \").concat(day, \". Phase: \").concat(phase, \", Type: \").concat(contentType, \". Platform: \").concat(platform);\n        // Platform-specific formatting\n        switch(platform){\n            case 'twitter':\n                return content.length > 250 ? content.substring(0, 247) + '...' : content;\n            case 'linkedin':\n                return \"\".concat(content, \"\\n\\n#LinkedInEngagement #ProfessionalGrowth\");\n            case 'instagram':\n                return \"\".concat(content, \" ✨\\n\\n#InstagramBusiness #VisualContent\");\n            case 'facebook':\n                return \"\".concat(content, \"\\n\\nWhat do you think? Share your thoughts below! \\uD83D\\uDC47\");\n            default:\n                return content;\n        }\n    }\n    extractBrandVoice(instructions) {\n        const voiceKeywords = [\n            'professional',\n            'friendly',\n            'innovative',\n            'trusted',\n            'expert',\n            'reliable'\n        ];\n        const lowerInstructions = instructions.toLowerCase();\n        for (const keyword of voiceKeywords){\n            if (lowerInstructions.includes(keyword)) {\n                return keyword.charAt(0).toUpperCase() + keyword.slice(1);\n            }\n        }\n        return 'Professional';\n    }\n    extractAudience(instructions) {\n        const audienceKeywords = [\n            'businesses',\n            'professionals',\n            'teams',\n            'companies',\n            'organizations',\n            'users'\n        ];\n        const lowerInstructions = instructions.toLowerCase();\n        for (const keyword of audienceKeywords){\n            if (lowerInstructions.includes(keyword)) {\n                return keyword;\n            }\n        }\n        return 'professionals';\n    }\n    generateHashtags(platform, phase, contentType) {\n        const baseHashtags = [\n            'marketing',\n            'business',\n            'growth'\n        ];\n        const phaseHashtags = {\n            awareness: [\n                'brandawareness',\n                'introduction'\n            ],\n            consideration: [\n                'solutions',\n                'evaluation'\n            ],\n            conversion: [\n                'getstarted',\n                'action'\n            ],\n            retention: [\n                'community',\n                'success'\n            ]\n        };\n        const contentHashtags = {\n            educational: [\n                'tips',\n                'learning'\n            ],\n            promotional: [\n                'offer',\n                'featured'\n            ],\n            engagement: [\n                'discussion',\n                'question'\n            ],\n            announcement: [\n                'news',\n                'update'\n            ]\n        };\n        return [\n            ...baseHashtags,\n            ...phaseHashtags[phase],\n            ...contentHashtags[contentType]\n        ].slice(0, 5);\n    }\n    createBatches(posts, campaignId) {\n        const batches = [];\n        for(let i = 0; i < posts.length; i += this.BATCH_SIZE){\n            const batchPosts = posts.slice(i, i + this.BATCH_SIZE);\n            batches.push({\n                campaignId: \"\".concat(campaignId, \"_batch_\").concat(batches.length),\n                posts: batchPosts,\n                processingStatus: 'pending',\n                processedCount: 0,\n                totalCount: batchPosts.length\n            });\n        }\n        return batches;\n    }\n    async processBatch(batch, convexMutations, sessionId) {\n        batch.processingStatus = 'processing';\n        try {\n            const postPromises = batch.posts.map(async (post)=>{\n                try {\n                    await convexMutations.upsertPost({\n                        fileName: \"\".concat(post.platform, \"_\").concat(post.metadata.week, \"_\").concat(post.metadata.dayOfWeek, \"_\").concat(Date.now()),\n                        fileType: post.platform,\n                        content: post.content,\n                        title: \"Week \".concat(post.metadata.week, \" - \").concat(post.metadata.campaignPhase),\n                        platformData: JSON.stringify({\n                            scheduledDate: post.scheduledDate,\n                            scheduledTime: post.scheduledTime,\n                            hashtags: post.metadata.hashtags,\n                            campaignId: post.metadata.campaignId,\n                            batchId: post.metadata.batchId\n                        }),\n                        status: 'scheduled',\n                        scheduledFor: new Date(\"\".concat(post.scheduledDate, \"T\").concat(post.scheduledTime)).getTime(),\n                        agentType: 'director',\n                        metadata: JSON.stringify(post.metadata)\n                    });\n                    batch.processedCount++;\n                } catch (error) {\n                    console.error('Error processing post:', error);\n                }\n            });\n            await Promise.all(postPromises);\n            batch.processingStatus = 'completed';\n        } catch (error) {\n            console.error('Batch processing error:', error);\n            batch.processingStatus = 'failed';\n        }\n    }\n    handleBatchCompletion(input, session) {\n        const completedBatches = Array.from(session.activeCampaigns.values()).filter((batch)=>batch.processingStatus === 'completed');\n        const totalBatches = session.activeCampaigns.size;\n        const totalProcessed = completedBatches.reduce((sum, batch)=>sum + batch.processedCount, 0);\n        if (completedBatches.length === totalBatches) {\n            session.currentStep = 'complete';\n            return \"Campaign Complete!\\n\\nAll \".concat(totalBatches, \" batches processed successfully.\\nTotal posts created: \").concat(totalProcessed, \"\\nCampaign: \").concat(session.campaignName, \"\\n\\nYour comprehensive marketing campaign is now scheduled and ready!\");\n        }\n        return \"Progress Update:\\nCompleted: \".concat(completedBatches.length, \"/\").concat(totalBatches, \" batches\\nPosts processed: \").concat(totalProcessed, \"\\nContinuing campaign generation...\");\n    }\n    constructor(...args){\n        super(...args), this.id = 'director', this.name = 'Campaign Director', this.description = 'Orchestrates large-scale marketing campaigns with 100+ posts across multiple platforms. Integrates instruction files for brand guidelines and generates comprehensive content strategies.', this.icon = '🎬', this.sessions = new Map(), this.BATCH_SIZE = 10, this.MAX_CONCURRENT_BATCHES = 3, this.tools = [\n            {\n                id: 'orchestrate-campaign',\n                name: 'Orchestrate Campaign',\n                command: '/director',\n                description: 'Create and schedule a complete marketing campaign with 100+ posts across multiple platforms',\n                parameters: []\n            }\n        ];\n    }\n}\nconst directorAgent = new DirectorAgent();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./store/agents/directorAgent.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./store/agents/registry.ts":
/*!**********************************!*\
  !*** ./store/agents/registry.ts ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AgentRegistry: () => (/* binding */ AgentRegistry),\n/* harmony export */   agentRegistry: () => (/* binding */ agentRegistry),\n/* harmony export */   executeCMOAgent: () => (/* binding */ executeCMOAgent),\n/* harmony export */   executeInstructionsAgent: () => (/* binding */ executeInstructionsAgent),\n/* harmony export */   executeProjectCreatorAgent: () => (/* binding */ executeProjectCreatorAgent),\n/* harmony export */   executeTwitterPostAgent: () => (/* binding */ executeTwitterPostAgent),\n/* harmony export */   getAvailableAgents: () => (/* binding */ getAvailableAgents),\n/* harmony export */   getAvailableCommands: () => (/* binding */ getAvailableCommands)\n/* harmony export */ });\n/* harmony import */ var _directorAgent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./directorAgent */ \"(app-pages-browser)/./store/agents/directorAgent.ts\");\n/* harmony import */ var _editorAgent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./editorAgent */ \"(app-pages-browser)/./store/agents/editorAgent.ts\");\n/* harmony import */ var _fileCreatorAgent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./fileCreatorAgent */ \"(app-pages-browser)/./store/agents/fileCreatorAgent.ts\");\n/* harmony import */ var _instructionsAgent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./instructionsAgent */ \"(app-pages-browser)/./store/agents/instructionsAgent.ts\");\n/* harmony import */ var _projectCreatorAgent__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./projectCreatorAgent */ \"(app-pages-browser)/./store/agents/projectCreatorAgent.ts\");\n/* harmony import */ var _schedulingAgent__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./schedulingAgent */ \"(app-pages-browser)/./store/agents/schedulingAgent.ts\");\n// Agent Registry\n// /Users/matthewsimon/Projects/eac/eac/store/agents/registry.ts\n\n\n\n\n\n\n/**\n * Central registry for all available agents\n */ class AgentRegistry {\n    /**\n   * Register a new agent\n   */ registerAgent(agent) {\n        this.agents.set(agent.id, agent);\n    }\n    /**\n   * Get an agent by ID\n   */ getAgent(id) {\n        return this.agents.get(id);\n    }\n    /**\n   * Get all available agents\n   */ getAllAgents() {\n        return Array.from(this.agents.values());\n    }\n    /**\n   * Get all agent tools (flattened)\n   */ getAllTools() {\n        const tools = [];\n        for (const agent of this.agents.values()){\n            for (const tool of agent.tools){\n                tools.push({\n                    agent,\n                    tool\n                });\n            }\n        }\n        return tools;\n    }\n    /**\n   * Find agent by tool command\n   */ findAgentByCommand(command) {\n        // Normalize legacy aliases first\n        const normalized = this.legacyCommandAliases[command] || command;\n        for (const agent of this.agents.values()){\n            const tool = agent.tools.find((t)=>t.command === normalized);\n            if (tool) return {\n                agent,\n                tool\n            };\n        }\n        return undefined;\n    }\n    /**\n   * Execute an agent tool\n   */ async executeAgent(agentId, toolId, input, convexMutations, sessionId) {\n        const agent = this.getAgent(agentId);\n        if (!agent) {\n            throw new Error(\"Agent not found: \".concat(agentId));\n        }\n        const tool = agent.tools.find((t)=>t.id === toolId);\n        if (!tool) {\n            throw new Error(\"Tool not found: \".concat(toolId, \" for agent \").concat(agentId));\n        }\n        return await agent.execute(tool, input, convexMutations, sessionId);\n    }\n    /**\n   * Execute agent by command (legacy support)\n   */ async executeByCommand(command, input, convexMutations) {\n        const result = this.findAgentByCommand(command);\n        if (!result) {\n            throw new Error(\"No agent found for command: \".concat(command));\n        }\n        return await result.agent.execute(result.tool, input, convexMutations);\n    }\n    constructor(){\n        this.agents = new Map();\n        // Legacy command aliases (to be removed after deprecation window)\n        this.legacyCommandAliases = {\n            'create': '/create-project',\n            'create-project': '/create-project',\n            'create-file': '/create-file'\n        };\n        console.log('🤖 Agent Registry: Initializing...');\n        this.registerAgent(_instructionsAgent__WEBPACK_IMPORTED_MODULE_3__.instructionsAgent);\n        console.log('🤖 Registered:', _instructionsAgent__WEBPACK_IMPORTED_MODULE_3__.instructionsAgent.id, _instructionsAgent__WEBPACK_IMPORTED_MODULE_3__.instructionsAgent.name);\n        this.registerAgent(_schedulingAgent__WEBPACK_IMPORTED_MODULE_5__.schedulingAgent);\n        console.log('🤖 Registered:', _schedulingAgent__WEBPACK_IMPORTED_MODULE_5__.schedulingAgent.id, _schedulingAgent__WEBPACK_IMPORTED_MODULE_5__.schedulingAgent.name);\n        this.registerAgent(_projectCreatorAgent__WEBPACK_IMPORTED_MODULE_4__.projectCreatorAgent);\n        console.log('🤖 Registered:', _projectCreatorAgent__WEBPACK_IMPORTED_MODULE_4__.projectCreatorAgent.id, _projectCreatorAgent__WEBPACK_IMPORTED_MODULE_4__.projectCreatorAgent.name);\n        this.registerAgent(_fileCreatorAgent__WEBPACK_IMPORTED_MODULE_2__.fileCreatorAgent);\n        console.log('🤖 Registered:', _fileCreatorAgent__WEBPACK_IMPORTED_MODULE_2__.fileCreatorAgent.id, _fileCreatorAgent__WEBPACK_IMPORTED_MODULE_2__.fileCreatorAgent.name);\n        this.registerAgent(_editorAgent__WEBPACK_IMPORTED_MODULE_1__.editorAgent);\n        console.log('🤖 Registered:', _editorAgent__WEBPACK_IMPORTED_MODULE_1__.editorAgent.id, _editorAgent__WEBPACK_IMPORTED_MODULE_1__.editorAgent.name);\n        this.registerAgent(_directorAgent__WEBPACK_IMPORTED_MODULE_0__.directorAgent);\n        console.log('🤖 Registered:', _directorAgent__WEBPACK_IMPORTED_MODULE_0__.directorAgent.id, _directorAgent__WEBPACK_IMPORTED_MODULE_0__.directorAgent.name);\n        console.log('🤖 Total agents registered:', this.agents.size);\n    }\n}\n/**\n * Singleton agent registry instance\n */ const agentRegistry = new AgentRegistry();\n/**\n * Legacy support functions for backward compatibility\n */ async function executeInstructionsAgent(input, convexMutations) {\n    return await agentRegistry.executeAgent('instructions', 'generate-instructions', input, convexMutations);\n}\nasync function executeTwitterPostAgent(input, convexMutations) {\n    return await agentRegistry.executeAgent('twitter-post', 'create-twitter-post', input, convexMutations);\n}\n/**\n * Get all available agents for UI display\n */ function getAvailableAgents() {\n    return agentRegistry.getAllAgents().map((agent)=>({\n            id: agent.id,\n            name: agent.name,\n            description: agent.description,\n            icon: agent.icon,\n            isActive: false,\n            tools: agent.tools.map((tool)=>({\n                    id: tool.id,\n                    name: tool.name,\n                    command: tool.command,\n                    description: tool.description,\n                    parameters: tool.parameters\n                }))\n        }));\n}\n/**\n * Get available commands for autocomplete\n */ function getAvailableCommands() {\n    const commands = [];\n    for (const agent of agentRegistry.getAllAgents()){\n        for (const tool of agent.tools){\n            commands.push(tool.command);\n        }\n    }\n    return commands;\n}\n/**\n * Legacy support function for project creator agent\n */ async function executeProjectCreatorAgent(input, convexMutations) {\n    return await agentRegistry.executeAgent('project-creator', 'create-project-with-files', input, convexMutations);\n}\n/**\n * Legacy support function for CMO agent\n */ async function executeCMOAgent(input, convexMutations, sessionId) {\n    return await agentRegistry.executeAgent('cmo', 'define-campaign', input, convexMutations, sessionId);\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./store/agents/registry.ts\n"));

/***/ })

});