"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./store/agents/directorAgent.ts":
/*!***************************************!*\
  !*** ./store/agents/directorAgent.ts ***!
  \***************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   DirectorAgent: () => (/* binding */ DirectorAgent),\n/* harmony export */   directorAgent: () => (/* binding */ directorAgent)\n/* harmony export */ });\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ \"(app-pages-browser)/./store/agents/base.ts\");\n// Campaign Director Agent\n// Orchestrates large-scale marketing campaigns with 100+ posts across multiple platforms\n\nclass DirectorAgent extends _base__WEBPACK_IMPORTED_MODULE_0__.BaseAgent {\n    async execute(tool, input, convexMutations, sessionId) {\n        if (!sessionId) {\n            return '❌ Session ID is required for campaign orchestration';\n        }\n        // Initialize or get session\n        if (!this.sessions.has(sessionId)) {\n            this.sessions.set(sessionId, {\n                currentStep: 'instructions',\n                activeCampaigns: new Map()\n            });\n        }\n        const session = this.sessions.get(sessionId);\n        // Step 1: Request instructions file\n        if (session.currentStep === 'instructions' && !session.instructionsFile) {\n            if (convexMutations.storeChatMessage) {\n                await convexMutations.storeChatMessage({\n                    role: 'assistant',\n                    content: \"\\uD83C\\uDFAC **Campaign Director Agent**\\n\\nI'll help you orchestrate a comprehensive marketing campaign with 100+ posts across multiple platforms.\\n\\n## Step 1: Select Instructions File\\n\\nFirst, I need to understand your campaign strategy. Please select an instructions file that contains your campaign guidelines, brand voice, or marketing strategy.\\n\\n**What you can include in your instructions file:**\\n- Brand voice and tone guidelines\\n- Target audience information\\n- Campaign objectives and KPIs\\n- Content themes and messaging\\n- Platform-specific requirements\\n- Hashtag strategies\\n- Visual guidelines\\n\\n**Select your instructions file:**\",\n                    sessionId,\n                    interactiveComponent: {\n                        type: 'file_selector',\n                        status: 'pending',\n                        data: {\n                            fileType: 'instructions',\n                            filterByExtension: [\n                                '.md',\n                                '.txt'\n                            ],\n                            placeholder: 'Select campaign instructions file...'\n                        }\n                    }\n                });\n            }\n            return '';\n        }\n        // Step 2: Process file selection\n        if (input.startsWith('Selected file:')) {\n            const fileName = input.replace('Selected file:', '').trim();\n            session.instructionsFile = fileName;\n            // Fetch the file content\n            try {\n                var _convexMutations_getAllUserFiles;\n                const files = await ((_convexMutations_getAllUserFiles = convexMutations.getAllUserFiles) === null || _convexMutations_getAllUserFiles === void 0 ? void 0 : _convexMutations_getAllUserFiles.call(convexMutations)) || [];\n                const instructionFile = files.find((f)=>f.name === fileName);\n                if (instructionFile) {\n                    session.instructionsContent = instructionFile.content;\n                    session.currentStep = 'campaign-setup';\n                    return \"✅ **Instructions Loaded:** \".concat(fileName, \"\\n\\n\\uD83D\\uDCCB **Instructions Content Preview:**\\n\").concat(session.instructionsContent.substring(0, 200)).concat(session.instructionsContent.length > 200 ? '...' : '', '\\n\\n## Step 2: Campaign Configuration\\n\\nNow let\\'s set up your campaign parameters based on your instructions. Please provide the following information:\\n\\n**Campaign Details:**\\n- **Campaign Name**: What should we call this campaign? (e.g., \"Q1 Product Launch\")\\n- **Duration**: How many weeks should the campaign run? (e.g., 4-12 weeks)\\n- **Platforms**: Which platforms to target? (twitter, linkedin, facebook, instagram)\\n- **Posts per Day**: How many posts per day per platform? (e.g., 2-5)\\n- **Campaign Goals**: What are the main objectives? (awareness, conversions, engagement)\\n\\n**Content Strategy:**\\n- **Content Mix**: What types of content to create? (educational, promotional, behind-the-scenes)\\n- **Themes**: Key themes or topics to cover\\n- **CTAs**: Primary calls-to-action\\n\\n**Example Configuration:**\\n```\\nCampaign: Q1 EAC Dashboard Launch\\nDuration: 6 weeks\\nPlatforms: twitter, linkedin\\nPosts per day: 3\\nGoals: Generate awareness and drive signups for our financial dashboard\\nContent Mix: 60% educational, 30% promotional, 10% engagement\\nThemes: Financial efficiency, Project management, Data visualization\\nCTAs: Free trial signup, Demo requests, Whitepaper downloads\\n```\\n\\nPlease provide your campaign configuration:');\n                } else {\n                    return '❌ Could not find the selected instructions file. Please try again.';\n                }\n            } catch (error) {\n                console.error('Error loading instructions:', error);\n                return '❌ Error loading instructions file. Please try again.';\n            }\n        }\n        // Step 3: Process campaign configuration\n        if (session.currentStep === 'campaign-setup' && session.instructionsContent) {\n            // Parse campaign configuration from input\n            const config = this.parseCampaignConfig(input);\n            if (!config.name || !config.duration || !config.platforms || config.platforms.length === 0) {\n                return \"⚠️ **Missing Required Information**\\n\\nPlease provide all required campaign details:\\n\\n**Required:**\\n- Campaign name (clear, descriptive title)\\n- Duration in weeks (recommended: 4-12 weeks)\\n- Platforms (at least one: twitter, linkedin, facebook, instagram)\\n- Posts per day (recommended: 2-5 per platform)\\n- Campaign goals (what do you want to achieve?)\\n\\n**Example:**\\n```\\nCampaign: Spring Product Launch\\nDuration: 8 weeks\\nPlatforms: twitter, linkedin\\nPosts per day: 3\\nGoals: Drive 1000 trial signups and 50 demo requests\\n```\\n\\nPlease provide the complete configuration:\";\n            }\n            // Store configuration\n            session.campaignName = config.name;\n            session.duration = config.duration;\n            session.platforms = config.platforms;\n            session.postsPerDay = config.postsPerDay;\n            session.campaignGoals = config.goals;\n            session.contentStrategy = config.contentMix || '';\n            session.currentStep = 'generating';\n            // Start campaign generation\n            return await this.generateAndScheduleCampaign(session, convexMutations, sessionId);\n        }\n        // Step 4: Handle campaign generation status updates\n        if (session.currentStep === 'generating' || session.currentStep === 'scheduling') {\n            return this.getCampaignStatus(session);\n        }\n        // Step 5: Handle completion\n        if (session.currentStep === 'complete') {\n            return '✅ **Campaign Complete!**\\n\\nYour campaign \"'.concat(session.campaignName, '\" has been successfully generated and scheduled.\\n\\n\\uD83D\\uDD0D **Review your campaign:**\\n- Check the Content Creation folder for all generated posts\\n- Review and edit posts as needed\\n- Approve for publishing when ready\\n\\n\\uD83D\\uDE80 **Next steps:**\\n1. Review the generated content\\n2. Make any necessary adjustments\\n3. Set up your social media connections\\n4. Monitor campaign performance\\n\\nType `/director` to start a new campaign anytime!');\n        }\n        return '❌ Unknown state. Please restart the campaign creation process by typing `/director`.';\n    }\n    parseCampaignConfig(input) {\n        const lines = input.toLowerCase().split('\\n');\n        const config = {};\n        for (const line of lines){\n            const trimmedLine = line.trim();\n            // Campaign name\n            if (trimmedLine.includes('campaign') && (trimmedLine.includes(':') || trimmedLine.includes('name'))) {\n                const match = trimmedLine.match(/(?:campaign|name)[:\\s]+(.+)/i);\n                if (match) config.name = match[1].trim();\n            }\n            // Duration\n            if (trimmedLine.includes('duration') || trimmedLine.includes('week')) {\n                const match = trimmedLine.match(/(\\d+)\\s*week/i);\n                if (match) config.duration = parseInt(match[1]);\n            }\n            // Platforms\n            if (trimmedLine.includes('platform')) {\n                const platforms = trimmedLine.match(/(?:platforms?)[:\\s]+(.+)/i);\n                if (platforms) {\n                    config.platforms = platforms[1].split(',').map((p)=>p.trim()).filter((p)=>[\n                            'twitter',\n                            'linkedin',\n                            'facebook',\n                            'instagram'\n                        ].includes(p));\n                }\n            } else if (trimmedLine.includes('twitter') || trimmedLine.includes('linkedin') || trimmedLine.includes('facebook') || trimmedLine.includes('instagram')) {\n                // Fallback platform detection\n                const platformsInLine = [\n                    'twitter',\n                    'linkedin',\n                    'facebook',\n                    'instagram'\n                ].filter((platform)=>trimmedLine.includes(platform));\n                if (platformsInLine.length > 0) {\n                    config.platforms = [\n                        ...config.platforms || [],\n                        ...platformsInLine\n                    ];\n                }\n            }\n            // Posts per day\n            if (trimmedLine.includes('post') && (trimmedLine.includes('day') || trimmedLine.includes('daily'))) {\n                const match = trimmedLine.match(/(\\d+)\\s*posts?\\s*(?:per|\\/|daily)/i);\n                if (match) config.postsPerDay = parseInt(match[1]);\n            }\n            // Goals\n            if (trimmedLine.includes('goal') || trimmedLine.includes('objective')) {\n                const match = trimmedLine.match(/(?:goals?|objectives?)[:\\s]+(.+)/i);\n                if (match) config.goals = match[1].trim();\n            }\n            // Content mix\n            if (trimmedLine.includes('content') && (trimmedLine.includes('mix') || trimmedLine.includes('type'))) {\n                const match = trimmedLine.match(/(?:content|mix|types?)[:\\s]+(.+)/i);\n                if (match) config.contentMix = match[1].trim();\n            }\n        }\n        // Set defaults\n        config.postsPerDay = config.postsPerDay || 3;\n        config.platforms = config.platforms || [];\n        // Remove duplicates from platforms\n        config.platforms = [\n            ...new Set(config.platforms)\n        ];\n        return config;\n    }\n    async generateAndScheduleCampaign(session, convexMutations, sessionId) {\n        var _session_platforms, _session_platforms1;\n        const totalPosts = (session.duration || 4) * 7 * (session.postsPerDay || 3) * (((_session_platforms = session.platforms) === null || _session_platforms === void 0 ? void 0 : _session_platforms.length) || 1);\n        // Create campaign in database\n        const campaignId = await this.createCampaign(session, convexMutations, totalPosts);\n        // Initialize campaign batch\n        const campaignBatch = {\n            campaignId,\n            posts: [],\n            processingStatus: 'processing',\n            processedCount: 0,\n            totalCount: totalPosts\n        };\n        session.activeCampaigns.set(campaignId, campaignBatch);\n        // Start async batch generation\n        this.generateBatchesAsync(session, campaignId, convexMutations, sessionId).catch((error)=>{\n            console.error('Campaign generation error:', error);\n            campaignBatch.processingStatus = 'failed';\n        });\n        return \"\\uD83D\\uDE80 **Campaign Generation Started**\\n\\n## Campaign: \".concat(session.campaignName, \"\\n\\n**Configuration:**\\n- **Duration**: \").concat(session.duration, \" weeks\\n- **Platforms**: \").concat((_session_platforms1 = session.platforms) === null || _session_platforms1 === void 0 ? void 0 : _session_platforms1.join(', '), \"\\n- **Total Posts**: \").concat(totalPosts, \"\\n- **Posts per Day**: \").concat(session.postsPerDay, \" per platform\\n- **Content Strategy**: \").concat(session.contentStrategy || 'Balanced mix', \"\\n\\n**Content Distribution:**\\n- **Educational**: Morning posts (building awareness)\\n- **Engagement**: Afternoon posts (driving interaction)\\n- **Promotional**: Evening posts (converting leads)\\n\\n**Progress**: Generating content batches...\\n\\n\\uD83D\\uDCCA **Status**: 0/\").concat(totalPosts, \" posts created\\n\\nThe campaign is being generated in the background using your instruction guidelines. I'll create:\\n\\n\\uD83C\\uDFAF **Platform-optimized content** for each channel\\n\\uD83D\\uDCC5 **Strategic scheduling** across \").concat(session.duration, \" weeks\\n\\uD83C\\uDFA8 **Varied content types** to maximize engagement\\n\\uD83D\\uDCC8 **Performance-focused messaging** aligned with your goals\\n\\n⏳ This will take a few moments. I'll update you as batches are completed.\");\n    }\n    async createCampaign(session, convexMutations, totalPosts) {\n        try {\n            // Try to create campaign if function exists\n            if (convexMutations.createCampaign) {\n                const campaign = await convexMutations.createCampaign({\n                    name: session.campaignName || 'Untitled Campaign',\n                    description: session.campaignGoals,\n                    startDate: new Date().toISOString().split('T')[0],\n                    endDate: new Date(Date.now() + (session.duration || 4) * 7 * 24 * 60 * 60 * 1000).toISOString().split('T')[0],\n                    totalPosts,\n                    platforms: session.platforms || [\n                        'twitter'\n                    ],\n                    template: session.instructionsContent\n                });\n                return (campaign === null || campaign === void 0 ? void 0 : campaign._id) || \"campaign_\".concat(Date.now());\n            }\n            // Fallback: Store campaign metadata in a chat message for tracking\n            if (convexMutations.storeChatMessage) {\n                await convexMutations.storeChatMessage({\n                    role: 'assistant',\n                    content: \"\\uD83D\\uDCCA **Campaign Created**: \".concat(session.campaignName),\n                    sessionId: 'campaign_tracking',\n                    operation: {\n                        type: 'campaign_created',\n                        details: {\n                            campaignId: \"campaign_\".concat(Date.now()),\n                            name: session.campaignName,\n                            totalPosts,\n                            platforms: session.platforms,\n                            duration: session.duration\n                        }\n                    }\n                });\n            }\n            return \"campaign_\".concat(Date.now());\n        } catch (error) {\n            console.error('Error creating campaign:', error);\n            return \"campaign_\".concat(Date.now());\n        }\n    }\n    async generateBatchesAsync(session, campaignId, convexMutations, sessionId) {\n        const campaign = session.activeCampaigns.get(campaignId);\n        if (!campaign) return;\n        const weeks = session.duration || 4;\n        const platforms = session.platforms || [\n            'twitter'\n        ];\n        const postsPerDay = session.postsPerDay || 3;\n        const allPosts = [];\n        const startDate = new Date();\n        // Generate posts for each week\n        for(let week = 0; week < weeks; week++){\n            for(let day = 0; day < 7; day++){\n                const currentDate = new Date(startDate);\n                currentDate.setDate(startDate.getDate() + week * 7 + day);\n                // Skip weekends for business content (optional)\n                const dayOfWeek = currentDate.getDay();\n                if (dayOfWeek === 0 || dayOfWeek === 6) continue; // Skip Sunday and Saturday\n                // Generate posts for each time slot\n                for(let postNum = 0; postNum < postsPerDay; postNum++){\n                    for (const platform of platforms){\n                        const post = await this.generatePost({\n                            platform: platform,\n                            week: week + 1,\n                            dayOfWeek: [\n                                'Sunday',\n                                'Monday',\n                                'Tuesday',\n                                'Wednesday',\n                                'Thursday',\n                                'Friday',\n                                'Saturday'\n                            ][dayOfWeek],\n                            date: currentDate,\n                            timeSlot: postNum === 0 ? 'morning' : postNum === 1 ? 'afternoon' : 'evening',\n                            contentType: postNum === 0 ? 'educational' : postNum === 1 ? 'engagement' : 'promotional',\n                            instructions: session.instructionsContent || '',\n                            campaignGoals: session.campaignGoals || '',\n                            campaignName: session.campaignName || '',\n                            campaignId\n                        });\n                        allPosts.push(post);\n                    }\n                }\n            }\n        }\n        // Process in batches\n        const batches = [];\n        for(let i = 0; i < allPosts.length; i += this.BATCH_SIZE){\n            batches.push(allPosts.slice(i, i + this.BATCH_SIZE));\n        }\n        // Process batches with concurrency control\n        for(let i = 0; i < batches.length; i += this.MAX_CONCURRENT_BATCHES){\n            const concurrentBatches = batches.slice(i, i + this.MAX_CONCURRENT_BATCHES);\n            await Promise.allSettled(concurrentBatches.map(async (batch, batchIndex)=>{\n                await this.processBatch(batch, campaignId, convexMutations, sessionId);\n                // Update progress\n                campaign.processedCount += batch.length;\n                // Send progress update every 20 posts or at completion\n                if (campaign.processedCount % 20 === 0 || campaign.processedCount === campaign.totalCount) {\n                    if (convexMutations.storeChatMessage) {\n                        await convexMutations.storeChatMessage({\n                            role: 'assistant',\n                            content: \"\\uD83D\\uDCCA **Campaign Progress Update**\\n\\n**\".concat(session.campaignName, \"**\\n- ✅ Posts Created: \").concat(campaign.processedCount, \"/\").concat(campaign.totalCount, \"\\n- \\uD83D\\uDCC8 Progress: \").concat(Math.round(campaign.processedCount / campaign.totalCount * 100), \"%\\n- ⏱️ Status: \").concat(campaign.processedCount === campaign.totalCount ? '🎉 Complete!' : '⚡ Processing...', \"\\n\\n\").concat(campaign.processedCount === campaign.totalCount ? '**All posts have been generated and are ready for review!**' : 'Continuing batch generation...'),\n                            sessionId\n                        });\n                    }\n                }\n            }));\n        }\n        // Mark campaign as complete\n        campaign.processingStatus = 'completed';\n        session.currentStep = 'complete';\n        // Send completion message with detailed summary\n        if (convexMutations.storeChatMessage) {\n            await convexMutations.storeChatMessage({\n                role: 'assistant',\n                content: \"\\uD83C\\uDF89 **Campaign Generation Complete!**\\n\\n## \".concat(session.campaignName, \"\\n\\n**\\uD83D\\uDCCA Final Statistics:**\\n- **Total Posts Created**: \").concat(campaign.totalCount, \"\\n- **Platforms**: \").concat(platforms.join(', '), \"\\n- **Duration**: \").concat(weeks, \" weeks\\n- **Start Date**: \").concat(startDate.toLocaleDateString(), \"\\n- **Posts per Platform**: \").concat(Math.round(campaign.totalCount / platforms.length), \"\\n\\n**\\uD83C\\uDFAF Content Distribution:**\\n- **Educational Content**: \").concat(Math.round(campaign.totalCount * 0.33), \" posts (Building awareness)\\n- **Engagement Content**: \").concat(Math.round(campaign.totalCount * 0.33), \" posts (Driving interaction)\\n- **Promotional Content**: \").concat(Math.round(campaign.totalCount * 0.34), \" posts (Converting leads)\\n\\n**\\uD83D\\uDCC1 File Organization:**\\nAll posts have been created in the Content Creation folder with the following structure:\\n- **File naming**: `{platform}_{date}_{time}.md`\\n- **Content sections**: Post content, scheduling details, hashtags, and analytics placeholders\\n- **Platform optimization**: Content tailored for each platform's best practices\\n\\n**\\uD83D\\uDE80 Next Steps:**\\n1. **Review Generated Content**: Check the Content Creation folder for all posts\\n2. **Edit and Customize**: Make any necessary adjustments to align with your brand\\n3. **Set Publishing Schedule**: Approve posts for publishing\\n4. **Monitor Performance**: Track engagement and adjust strategy as needed\\n\\n**\\uD83D\\uDCA1 Pro Tips:**\\n- Review posts in batches by week or platform\\n- Look for opportunities to add current events or trending topics\\n- Consider A/B testing different CTAs for promotional posts\\n- Set up analytics tracking for campaign performance\\n\\n\\uD83C\\uDFAC **Campaign Director ready for your next campaign!** Type `/director` anytime to start a new one.\"),\n                sessionId\n            });\n        }\n    }\n    async generatePost(params) {\n        const { platform, week, dayOfWeek, date, timeSlot, contentType, instructions, campaignGoals, campaignName, campaignId } = params;\n        // Generate time based on slot\n        const times = {\n            morning: '09:00',\n            afternoon: '14:00',\n            evening: '18:00'\n        };\n        // Generate platform-specific content\n        const content = this.generatePlatformContent(platform, contentType, week, instructions, campaignGoals, campaignName);\n        // Generate hashtags based on content type and platform\n        const hashtags = this.generateHashtags(platform, contentType, week);\n        return {\n            platform,\n            content,\n            scheduledDate: date.toISOString().split('T')[0],\n            scheduledTime: times[timeSlot] || '12:00',\n            metadata: {\n                week,\n                dayOfWeek,\n                campaignPhase: week <= 1 ? 'awareness' : week <= 2 ? 'consideration' : week <= 3 ? 'conversion' : 'retention',\n                contentType,\n                hashtags,\n                campaignId\n            }\n        };\n    }\n    generatePlatformContent(platform, contentType, week, instructions, goals, campaignName) {\n        // Extract key themes from instructions\n        const themes = this.extractThemes(instructions);\n        const tone = this.extractTone(instructions);\n        // Platform-specific templates with instruction integration\n        const templates = {\n            twitter: {\n                educational: [\n                    \"\\uD83C\\uDF93 Week \".concat(week, \" insight: \").concat(themes[0] || 'Financial tracking', \" can transform your business operations. Here's what industry leaders are saying about \").concat(themes[1] || 'automated reporting', \"...\"),\n                    \"\\uD83D\\uDCA1 Pro tip for \".concat(campaignName, \": \").concat(themes[0] || 'Real-time dashboards', \" help catch issues before they become problems. Thread on best practices \\uD83D\\uDC47\"),\n                    \"\\uD83D\\uDCCA Did you know? Companies using \".concat(themes[0] || 'financial intelligence', \" see 40% better project outcomes. Here's how to get started...\"),\n                    \"\\uD83D\\uDE80 \".concat(campaignName, \" spotlight: The difference between reactive and proactive \").concat(themes[1] || 'financial management', \" is game-changing.\")\n                ],\n                engagement: [\n                    \"What's your biggest challenge with \".concat(themes[0] || 'project finances', \"? \\uD83E\\uDD14 Drop your thoughts below!\"),\n                    \"Quick poll: How often does your team review \".concat(themes[1] || 'project metrics', \"?\\n\\n\\uD83D\\uDCCA Daily\\n\\uD83D\\uDCCA Weekly\\n\\uD83D\\uDCCA Monthly\\n\\uD83D\\uDCCA Only when problems arise\"),\n                    \"RT if you've ever discovered a \".concat(themes[0] || 'budget issue', \" too late to fix easily. We've all been there! \\uD83D\\uDCB8\"),\n                    \"Share your success story: How has better \".concat(themes[1] || 'financial tracking', \" improved your projects? \\uD83D\\uDC47\")\n                ],\n                promotional: [\n                    \"\\uD83C\\uDFAF Transform your \".concat(themes[0] || 'financial tracking', \" with \").concat(campaignName, \". See all your project data in one place. Start your free trial today!\"),\n                    \"Limited time: 30% off \".concat(campaignName, \" implementation for teams focused on \").concat(themes[0] || 'financial excellence', \". Don't miss out! \\uD83D\\uDE80\"),\n                    \"Ready to revolutionize your \".concat(themes[1] || 'project management', \"? \").concat(campaignName, \" delivers the insights you need. Learn more →\"),\n                    \"Stop waiting for month-end surprises. Get real-time \".concat(themes[0] || 'financial insights', \" with \").concat(campaignName, \". Book your demo! \\uD83D\\uDCC8\")\n                ]\n            },\n            linkedin: {\n                educational: [\n                    \"The future of \".concat(themes[0] || 'project financial management', \" is here.\\n\\nAs we progress through \").concat(campaignName, \", it's clear that real-time visibility is no longer a luxury—it's a necessity.\\n\\nHere are 5 ways modern \").concat(themes[1] || 'financial dashboards', \" are transforming project outcomes:\\n\\n1. Early warning systems for budget variances\\n2. Automated compliance reporting\\n3. Predictive analytics for resource allocation\\n4. Cross-project portfolio insights\\n5. Stakeholder transparency\\n\\nWhich of these resonates most with your current challenges?\"),\n                    \"Understanding \".concat(themes[0] || 'Earned Value Management', \" in the age of \").concat(campaignName, \".\\n\\nTraditional EVM calculations can be complex and time-consuming. But with the right tools, you can automate this process and get insights that actually drive decisions.\\n\\nKey benefits of automated EVM:\\n• Real-time schedule performance indices\\n• Instant cost performance tracking\\n• Predictive completion forecasting\\n• Trend analysis across projects\\n\\nHow is your organization currently handling EVM calculations?\"),\n                    \"\".concat(campaignName, \" best practice: Financial variance analysis shouldn't be a monthly surprise.\\n\\nWith proactive monitoring, you can:\\n✅ Detect variances as they happen\\n✅ Implement corrective actions quickly\\n✅ Maintain stakeholder confidence\\n✅ Improve future project estimates\\n\\nOur framework for proactive variance management has helped teams reduce overruns by 40%.\"),\n                    \"The evolution of \".concat(themes[0] || 'project intelligence', \" during \").concat(campaignName, \".\\n\\nFrom spreadsheets to AI-driven insights, we've come a long way. Modern project financial management combines:\\n\\n• Real-time data integration\\n• Predictive analytics\\n• Automated reporting\\n• Collaborative workflows\\n• Mobile accessibility\\n\\nWhat's been your experience with this evolution?\")\n                ],\n                engagement: [\n                    \"Project managers: What's your preferred method for tracking \".concat(themes[0] || 'project finances', \"?\\n\\nA) Traditional spreadsheets\\nB) Integrated ERP systems\\nC) Dedicated project dashboards\\nD) Multiple tools and manual consolidation\\n\\nShare your experience and any lessons learned in the comments. As we explore \").concat(campaignName, \", I'm curious about what's working (and what isn't) for teams today.\"),\n                    \"Question for the \".concat(campaignName, \" community: How has real-time financial tracking changed your project outcomes?\\n\\nI've seen everything from 50% reduction in overruns to completely transformed stakeholder relationships.\\n\\nWhat's been your most significant improvement? And what challenges are you still facing?\\n\\nLet's share insights and learn from each other's experiences.\"),\n                    \"Let's discuss: What KPIs do you consider essential for \".concat(themes[0] || 'project financial health', \" in today's environment?\\n\\nBeyond the traditional metrics, I'm seeing teams focus on:\\n• Velocity of variance detection\\n• Forecast accuracy trends\\n• Stakeholder satisfaction scores\\n• Resource utilization efficiency\\n\\nWhat metrics have been game-changers for your organization? Drop your must-have KPIs below.\"),\n                    \"\".concat(campaignName, \" insight: The best project financial system is the one your team actually uses.\\n\\nWhat makes the difference between adoption and abandonment?\\n\\nIn my experience:\\n✅ Intuitive interface design\\n✅ Mobile accessibility\\n✅ Integration with existing tools\\n✅ Clear ROI demonstration\\n✅ Ongoing training and support\\n\\nWhat factors have been critical for your team's tool adoption?\")\n                ],\n                promotional: [\n                    \"Introducing the next evolution in \".concat(themes[0] || 'project financial management', \": \").concat(campaignName, \".\\n\\nAfter working with hundreds of project teams, we've built a solution that addresses the most common challenges:\\n\\n✅ Real-time variance detection\\n✅ Automated compliance reporting\\n✅ Predictive cash flow forecasting\\n✅ Multi-project portfolio oversight\\n✅ Stakeholder-ready visualizations\\n\\nSee how leading organizations are transforming their project outcomes.\\n\\n\\uD83D\\uDD17 Schedule a personalized demo this week\"),\n                    \"Case Study: How \".concat(campaignName, \" helped TechCorp reduce project overruns by 45%.\\n\\nThe challenge: Manual financial tracking across 50+ concurrent projects led to late detection of budget issues and stakeholder surprises.\\n\\nThe solution: Real-time financial dashboard with predictive analytics and automated alerting.\\n\\nThe results:\\n• 45% reduction in cost overruns\\n• 60% faster variance detection\\n• 90% improvement in forecast accuracy\\n• 25% increase in project profitability\\n\\nRead the full case study and see if this approach could work for your organization.\"),\n                    \"\\uD83C\\uDFAF Limited opportunity for \".concat(campaignName, \" early adopters.\\n\\nWe're offering personalized implementation for teams serious about transforming their \").concat(themes[0] || 'project financial management', '.\\n\\nWhat you get:\\n• Comprehensive system setup\\n• Team training and onboarding\\n• 90-day success guarantee\\n• Dedicated support specialist\\n• Custom reporting configuration\\n\\nPlus: Our exclusive Project Financial Health Assessment (normally $2,500) included free.\\n\\nInterested? Comment \"EARLY ACCESS\" below or send me a DM.'),\n                    \"Ready to stop playing catch-up with your \".concat(themes[0] || 'project finances', \"?\\n\\n\").concat(campaignName, ' delivers the real-time insights your team needs to stay ahead of issues, not just react to them.\\n\\n\\uD83D\\uDE80 What you\\'ll achieve:\\n• Proactive budget management\\n• Confident stakeholder reporting\\n• Improved project profitability\\n• Reduced financial surprises\\n• Enhanced team productivity\\n\\n⏰ Book your 30-minute demo this week and see the difference real-time financial intelligence makes.\\n\\n\\uD83D\\uDD17 Schedule at [link] or comment \"DEMO\" below.')\n                ]\n            },\n            facebook: {\n                educational: [\n                    \"\\uD83D\\uDCBC Business insight for \".concat(campaignName, \": Understanding your \").concat(themes[0] || 'project finances', \" in real-time can be the difference between success and stress! Here's what smart business owners are doing... \\uD83D\\uDCCA\"),\n                    \"\\uD83C\\uDFAF Growing your business with \".concat(campaignName, \"? Don't let \").concat(themes[0] || 'budget surprises', \" derail your progress. Here are 3 simple ways to stay on track... \\uD83D\\uDCC8\"),\n                    \"\\uD83D\\uDE80 Success story: How one company transformed their \".concat(themes[1] || 'financial tracking', \" and increased profitability by 30%. The secret? It's simpler than you think! ✨\")\n                ],\n                engagement: [\n                    \"Business owners: What's your biggest frustration with \".concat(themes[0] || 'project budgets', \"? \\uD83D\\uDE24 Let us know in the comments!\"),\n                    \"Quick question: How confident are you in your current \".concat(themes[1] || 'financial reporting', \"? \\uD83E\\uDD14\\n\\n\\uD83D\\uDC4D Very confident\\n\\uD83D\\uDE10 Somewhat confident\\n\\uD83D\\uDE30 Not confident at all\\n\\nShare your experience!\"),\n                    \"Tag a business owner who needs better \".concat(themes[0] || 'financial visibility', \"! \\uD83D\\uDC47 They'll thank you later! \\uD83D\\uDCAA\")\n                ],\n                promotional: [\n                    \"\\uD83C\\uDF89 Exciting news! \".concat(campaignName, \" is now available to help businesses like yours achieve better \").concat(themes[0] || 'financial control', \". Special launch pricing available! \\uD83D\\uDE80\"),\n                    \"⏰ Limited time offer: Get \".concat(campaignName, \" with 30% off setup fees. Perfect for businesses serious about \").concat(themes[1] || 'financial success', \"! Don't wait! \\uD83D\\uDCB0\"),\n                    \"Ready to transform your \".concat(themes[0] || 'business finances', \"? \").concat(campaignName, \" makes it easy! Click to learn more and get started today! \\uD83D\\uDCF1\")\n                ]\n            },\n            instagram: {\n                educational: [\n                    \"\\uD83D\\uDCA1 Business tip: Real-time \".concat(themes[0] || 'financial insights', \" = Better decisions ✨ #\").concat(campaignName, \" #BusinessGrowth #FinancialSuccess\"),\n                    \"\\uD83D\\uDCCA The secret to successful \".concat(themes[1] || 'project management', \"? Know your numbers in real-time! \\uD83C\\uDFAF #BusinessTips #\").concat(campaignName),\n                    \"\\uD83D\\uDE80 Transform your business with smart \".concat(themes[0] || 'financial tracking', \"! Swipe for tips ➡️ #Entrepreneur #\").concat(campaignName)\n                ],\n                engagement: [\n                    \"\\uD83D\\uDCAD What's your biggest business financial challenge? Share below! \\uD83D\\uDC47 #\".concat(campaignName, \" #BusinessStruggles\"),\n                    \"\\uD83D\\uDE4B‍♀️ Raise your hand if you want better \".concat(themes[0] || 'financial control', \" in your business! \\uD83D\\uDE4C #\").concat(campaignName, \" #BusinessGoals\"),\n                    \"⭐ Double tap if you believe in the power of real-time \".concat(themes[1] || 'financial data', \"! ❤️ #\").concat(campaignName, \" #BusinessSuccess\")\n                ],\n                promotional: [\n                    \"\\uD83C\\uDFAF Ready for better \".concat(themes[0] || 'financial tracking', \"? \").concat(campaignName, \" is here! Link in bio \\uD83D\\uDD17 #BusinessSolution #\").concat(campaignName),\n                    \"✨ Transform your business today! \".concat(campaignName, \" special offer - limited time! \\uD83D\\uDCAB #BusinessGrowth #\").concat(campaignName),\n                    \"\\uD83D\\uDE80 Your business deserves better \".concat(themes[1] || 'financial insights', \"! Get \").concat(campaignName, \" now! Link in bio \\uD83D\\uDCF1 #BusinessSuccess\")\n                ]\n            }\n        };\n        const platformTemplates = templates[platform] || templates.twitter;\n        const contentTemplates = platformTemplates[contentType] || platformTemplates.educational;\n        const template = contentTemplates[(week - 1) % contentTemplates.length];\n        return template;\n    }\n    extractThemes(instructions) {\n        // Extract key themes from instructions using simple keyword matching\n        const defaultThemes = [\n            'financial tracking',\n            'project management',\n            'business intelligence'\n        ];\n        if (!instructions) return defaultThemes;\n        const lowerInstructions = instructions.toLowerCase();\n        const themes = [];\n        // Look for common business/financial themes\n        const themeKeywords = [\n            'financial dashboard',\n            'project management',\n            'budget tracking',\n            'reporting',\n            'analytics',\n            'business intelligence',\n            'forecasting',\n            'variance analysis',\n            'cost control',\n            'resource management',\n            'performance tracking',\n            'roi',\n            'profitability',\n            'cash flow',\n            'financial planning',\n            'data visualization'\n        ];\n        for (const keyword of themeKeywords){\n            if (lowerInstructions.includes(keyword)) {\n                themes.push(keyword);\n            }\n        }\n        return themes.length > 0 ? themes.slice(0, 3) : defaultThemes;\n    }\n    extractTone(instructions) {\n        if (!instructions) return 'professional';\n        const lowerInstructions = instructions.toLowerCase();\n        if (lowerInstructions.includes('casual') || lowerInstructions.includes('friendly')) {\n            return 'casual';\n        } else if (lowerInstructions.includes('formal') || lowerInstructions.includes('corporate')) {\n            return 'formal';\n        } else if (lowerInstructions.includes('energetic') || lowerInstructions.includes('enthusiastic')) {\n            return 'energetic';\n        }\n        return 'professional';\n    }\n    generateHashtags(platform, contentType, week) {\n        var _contentHashtags_contentType, _platformHashtags_platform;\n        const baseHashtags = [\n            '#ProjectManagement',\n            '#FinancialDashboard',\n            '#BusinessIntelligence'\n        ];\n        const contentHashtags = {\n            educational: [\n                '#ProjectFinance',\n                '#DataDriven',\n                '#BusinessTips',\n                '#LearnAndGrow'\n            ],\n            engagement: [\n                '#ProjectManagers',\n                '#FinanceTeam',\n                '#Community',\n                '#Discussion'\n            ],\n            promotional: [\n                '#SpecialOffer',\n                '#FreeTrial',\n                '#Innovation',\n                '#BusinessSolution'\n            ]\n        };\n        const platformHashtags = {\n            twitter: [\n                '#FinTech',\n                '#ProjectSuccess',\n                '#BusinessGrowth'\n            ],\n            linkedin: [\n                '#ProjectLeadership',\n                '#FinancialExcellence',\n                '#ProfessionalDevelopment'\n            ],\n            facebook: [\n                '#Business',\n                '#Success',\n                '#SmallBusiness',\n                '#Entrepreneurship'\n            ],\n            instagram: [\n                '#BusinessGrowth',\n                '#Entrepreneur',\n                '#SuccessStory',\n                '#BusinessLife'\n            ]\n        };\n        return [\n            ...baseHashtags.slice(0, 2),\n            ...((_contentHashtags_contentType = contentHashtags[contentType]) === null || _contentHashtags_contentType === void 0 ? void 0 : _contentHashtags_contentType.slice(0, 2)) || [],\n            ...((_platformHashtags_platform = platformHashtags[platform]) === null || _platformHashtags_platform === void 0 ? void 0 : _platformHashtags_platform.slice(0, 2)) || []\n        ];\n    }\n    async processBatch(batch, campaignId, convexMutations, sessionId) {\n        try {\n            // Create all posts in the batch\n            const promises = batch.map(async (post, index)=>{\n                // Create post in database\n                const dbPost = await convexMutations.upsertPost({\n                    fileName: \"\".concat(post.platform, \"_\").concat(post.scheduledDate, \"_\").concat(post.scheduledTime.replace(':', ''), \"_w\").concat(post.metadata.week, \".md\"),\n                    fileType: post.platform,\n                    content: post.content,\n                    platformData: JSON.stringify({\n                        scheduledDate: post.scheduledDate,\n                        scheduledTime: post.scheduledTime,\n                        hashtags: post.metadata.hashtags\n                    }),\n                    status: 'scheduled',\n                    campaignId,\n                    batchId: \"batch_\".concat(Date.now(), \"_\").concat(Math.random().toString(36).substr(2, 9)),\n                    metadata: JSON.stringify(post.metadata),\n                    scheduledFor: new Date(\"\".concat(post.scheduledDate, \"T\").concat(post.scheduledTime, \":00\")).getTime()\n                });\n                // Create file in content creation folder\n                const fileName = \"\".concat(post.platform, \"_\").concat(post.scheduledDate, \"_\").concat(post.scheduledTime.replace(':', ''), \"_w\").concat(post.metadata.week, \".md\");\n                const fileContent = this.formatPostAsFile(post);\n                await convexMutations.createContentCreationFile({\n                    name: fileName,\n                    content: fileContent,\n                    type: 'post',\n                    platform: post.platform,\n                    extension: 'md'\n                });\n                return dbPost;\n            });\n            await Promise.all(promises);\n        } catch (error) {\n            console.error('Error processing batch:', error);\n        // Continue processing even if some posts fail\n        }\n    }\n    formatPostAsFile(post) {\n        return \"# \".concat(post.platform.toUpperCase(), \" Post - Week \").concat(post.metadata.week, \"\\n\\n**Platform:** \").concat(post.platform.charAt(0).toUpperCase() + post.platform.slice(1), \"\\n**Content Type:** \").concat(post.metadata.contentType.charAt(0).toUpperCase() + post.metadata.contentType.slice(1), \"\\n**Campaign Phase:** \").concat(post.metadata.campaignPhase.charAt(0).toUpperCase() + post.metadata.campaignPhase.slice(1), \"\\n**Scheduled:** \").concat(post.scheduledDate, \" at \").concat(post.scheduledTime, \"\\n\\n## Post Content\\n\\n\").concat(post.content, \"\\n\\n## Hashtags\\n\\n\").concat(post.metadata.hashtags.join(' '), \"\\n\\n## Scheduling Details\\n\\n- **Date**: \").concat(post.scheduledDate, \" (\").concat(post.metadata.dayOfWeek, \")\\n- **Time**: \").concat(post.scheduledTime, \"\\n- **Week**: \").concat(post.metadata.week, \"\\n- **Phase**: \").concat(post.metadata.campaignPhase, \"\\n\\n## Performance Tracking\\n\\n- **Impressions**: 0 (will update after posting)\\n- **Engagements**: 0 (will update after posting)\\n- **Clicks**: 0 (will update after posting)\\n- **Shares**: 0 (will update after posting)\\n\\n## Notes\\n\\n- Created by Campaign Director Agent\\n- Part of multi-platform campaign strategy\\n- Optimized for \").concat(post.platform, \" best practices\\n- Ready for review and publishing\\n\\n---\\n\\n*Generated on \").concat(new Date().toLocaleDateString(), \" by EAC Campaign Director*\");\n    }\n    getCampaignStatus(session) {\n        const campaigns = Array.from(session.activeCampaigns.values());\n        if (campaigns.length === 0) {\n            return 'No active campaigns found.';\n        }\n        const campaign = campaigns[0];\n        const progress = Math.round(campaign.processedCount / campaign.totalCount * 100);\n        return \"\\uD83D\\uDCCA **Campaign Status Update**\\n\\n**\".concat(session.campaignName, \"**\\n- Posts Created: \").concat(campaign.processedCount, \"/\").concat(campaign.totalCount, \"\\n- Progress: \").concat(progress, \"%\\n- Status: \").concat(campaign.processingStatus, \"\\n\\nThe campaign is still being generated. Please wait for completion updates.\");\n    }\n    constructor(...args){\n        super(...args), this.id = 'director', this.name = 'Campaign Director', this.description = 'Orchestrates large-scale marketing campaigns with 100+ posts across multiple platforms. Integrates instruction files for brand guidelines and generates comprehensive content strategies.', this.icon = '🎬', this.sessions = new Map(), this.BATCH_SIZE = 10, this.MAX_CONCURRENT_BATCHES = 3, this.tools = [\n            {\n                id: 'orchestrate-campaign',\n                name: 'Orchestrate Campaign',\n                command: '/director',\n                description: 'Create and schedule a complete marketing campaign with 100+ posts across multiple platforms',\n                parameters: []\n            }\n        ];\n    }\n}\n// Export singleton instance\nconst directorAgent = new DirectorAgent();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./store/agents/directorAgent.ts\n"));

/***/ })

});