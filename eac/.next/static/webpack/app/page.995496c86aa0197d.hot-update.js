"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./store/agents/fileCreatorAgent.ts":
/*!******************************************!*\
  !*** ./store/agents/fileCreatorAgent.ts ***!
  \******************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FileCreatorAgent: () => (/* binding */ FileCreatorAgent),\n/* harmony export */   fileCreatorAgent: () => (/* binding */ fileCreatorAgent)\n/* harmony export */ });\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ \"(app-pages-browser)/./store/agents/base.ts\");\n// File Creator Agent\n// Creates files in existing projects using natural language input with project selection\n\nclass FileCreatorAgent extends _base__WEBPACK_IMPORTED_MODULE_0__.BaseAgent {\n    async execute(tool, input, convexMutations) {\n        console.log('🚀 FileCreatorAgent executing with input:', input);\n        try {\n            return await this.processFileCreationRequest(input, convexMutations);\n        } catch (error) {\n            console.error('❌ FileCreatorAgent error:', error);\n            return \"❌ Failed to process request: \".concat(error instanceof Error ? error.message : 'Unknown error');\n        }\n    }\n    /**\n   * Process natural language requests to create files\n   */ async processFileCreationRequest(input, convexMutations) {\n        const normalizedInput = input.toLowerCase().trim();\n        console.log('🔍 Processing file creation input:', normalizedInput);\n        // Check if this is a help request\n        if (this.isHelpRequest(normalizedInput)) {\n            return this.getHelpMessage();\n        }\n        // Check if this is a file type listing request\n        if (this.isFileTypeListRequest(normalizedInput)) {\n            return this.getFileTypeOptions();\n        }\n        // Extract file creation details\n        const fileDetails = this.extractFileDetails(input);\n        // If we couldn't extract enough details, provide guidance\n        if (!fileDetails.fileName && !fileDetails.fileType) {\n            return this.getCreationGuidance();\n        }\n        // If no project specified, ask for project selection\n        if (!fileDetails.projectName) {\n            return await this.getProjectSelectionPrompt(fileDetails, convexMutations);\n        }\n        // Create the file\n        return await this.createFile(fileDetails, convexMutations);\n    }\n    /**\n   * Check if input is requesting help\n   */ isHelpRequest(input) {\n        const helpPatterns = [\n            /help/,\n            /how.*work/,\n            /what.*do/,\n            /commands/,\n            /options/\n        ];\n        return helpPatterns.some((pattern)=>pattern.test(input));\n    }\n    /**\n   * Check if input is requesting file type list\n   */ isFileTypeListRequest(input) {\n        const listPatterns = [\n            /file.*types?/,\n            /what.*files?/,\n            /list.*files?/,\n            /show.*options/,\n            /available.*types?/\n        ];\n        return listPatterns.some((pattern)=>pattern.test(input));\n    }\n    /**\n   * Extract file creation details from natural language input\n   */ extractFileDetails(input) {\n        const normalizedInput = input.toLowerCase();\n        let fileName = '';\n        let fileType = '';\n        let extension = '.md'; // default\n        let projectName = '';\n        // Extract file name patterns\n        const fileNamePatterns = [\n            /(?:create|make|add|generate)\\s+(?:a\\s+)?(?:new\\s+)?(?:file\\s+)?(?:called\\s+)?[\\\"\\']?([^\\\"\\']+?)[\\\"\\']?(?:\\s+(?:for|in|to|as)|\\s*$)/i,\n            /(?:file\\s+)?[\\\"\\']([^\\\"\\']+)[\\\"\\']?/i\n        ];\n        for (const pattern of fileNamePatterns){\n            const match = input.match(pattern);\n            if (match && match[1]) {\n                fileName = match[1].trim();\n                break;\n            }\n        }\n        // Clean up fileName by removing file type words\n        fileName = fileName.replace(/\\b(file|document|spreadsheet|presentation|notes?|plan|brief|checklist)\\b/gi, '').trim();\n        // Detect file type from input\n        for (const option of this.fileTypeOptions){\n            const typePatterns = [\n                new RegExp(\"\\\\b\".concat(option.type, \"\\\\b\"), 'i'),\n                new RegExp(\"\\\\b\".concat(option.description.split(' ')[0], \"\\\\b\"), 'i')\n            ];\n            if (option.type === 'spreadsheet' && /\\b(excel|xlsx?|budget|financial|calculation)\\b/i.test(normalizedInput)) {\n                fileType = option.type;\n                extension = option.extension;\n                break;\n            } else if (option.type === 'document' && /\\b(document|docx?|report|proposal|word)\\b/i.test(normalizedInput)) {\n                fileType = option.type;\n                extension = option.extension;\n                break;\n            } else if (option.type === 'presentation' && /\\b(presentation|pptx?|slides?|powerpoint)\\b/i.test(normalizedInput)) {\n                fileType = option.type;\n                extension = option.extension;\n                break;\n            } else if (option.type === 'plan' && /\\b(plan|planning|strategy|roadmap)\\b/i.test(normalizedInput)) {\n                fileType = option.type;\n                extension = option.extension;\n                break;\n            } else if (option.type === 'notes' && /\\b(notes?|meeting|minutes)\\b/i.test(normalizedInput)) {\n                fileType = option.type;\n                extension = option.extension;\n                break;\n            } else if (option.type === 'brief' && /\\b(brief|overview|summary)\\b/i.test(normalizedInput)) {\n                fileType = option.type;\n                extension = option.extension;\n                break;\n            } else if (option.type === 'checklist' && /\\b(checklist|tasks?|todo|list)\\b/i.test(normalizedInput)) {\n                fileType = option.type;\n                extension = option.extension;\n                break;\n            } else if (typePatterns.some((pattern)=>pattern.test(normalizedInput))) {\n                fileType = option.type;\n                extension = option.extension;\n                break;\n            }\n        }\n        // If no specific type detected, default to markdown\n        if (!fileType) {\n            fileType = 'markdown';\n            extension = '.md';\n        }\n        // Extract project name (only very explicit project mentions)\n        const projectPatterns = [\n            /(?:for|in|to)\\s+(?:the\\s+)?project\\s+[\\\"\\']?([^\\\"\\']+?)[\\\"\\']?(?:\\s*$)/i,\n            /project\\s+[\\\"\\']([^\\\"\\']+)[\\\"\\']?/i,\n            /in\\s+[\\\"\\']([^\\\"\\']+)[\\\"\\']?\\s+project/i\n        ];\n        for (const pattern of projectPatterns){\n            const match = input.match(pattern);\n            if (match && match[1]) {\n                projectName = match[1].trim();\n                break;\n            }\n        }\n        // Generate default file name if not provided\n        if (!fileName) {\n            const typeWords = fileType.split(/(?=[A-Z])/).join(' ').toLowerCase();\n            fileName = \"new-\".concat(typeWords);\n        }\n        // Ensure fileName has extension\n        if (!fileName.includes('.')) {\n            fileName += extension;\n        }\n        return {\n            fileName,\n            fileType,\n            projectName,\n            extension,\n            content: ''\n        };\n    }\n    /**\n   * Create the file in the specified project\n   */ async createFile(fileDetails, convexMutations) {\n        try {\n            if (!convexMutations.createFile) {\n                return '❌ File creation is not available. Please check system configuration.';\n            }\n            if (!convexMutations.getProjects) {\n                return '❌ Project lookup is not available. Please check system configuration.';\n            }\n            // Look up the actual project ID by name\n            const projects = await convexMutations.getProjects();\n            const targetProject = projects.find((p)=>{\n                var _fileDetails_projectName;\n                return p.name.toLowerCase() === ((_fileDetails_projectName = fileDetails.projectName) === null || _fileDetails_projectName === void 0 ? void 0 : _fileDetails_projectName.toLowerCase());\n            });\n            if (!targetProject) {\n                return '❌ **Project Not Found**\\n\\nCould not find a project named \"'.concat(fileDetails.projectName, '\". Please check the project name and try again.\\n\\n**Available projects:**\\n').concat(projects.map((p)=>\"• \".concat(p.name)).join('\\n'));\n            }\n            // Find the file type option for content template\n            const fileTypeOption = this.fileTypeOptions.find((option)=>option.type === fileDetails.fileType);\n            // Generate content from template\n            const content = this.generateFileContent(fileDetails, fileTypeOption);\n            // Create the file with the actual project ID\n            const newFile = await convexMutations.createFile({\n                name: fileDetails.fileName,\n                content: content,\n                type: this.mapToConvexFileType(fileDetails.fileType),\n                projectId: targetProject._id // Use the actual project ID\n            });\n            let result = \"✅ **File Created Successfully!**\\n\\n\";\n            result += \"\\uD83D\\uDCC4 **File Name:** \".concat(fileDetails.fileName, \"\\n\");\n            result += \"\\uD83D\\uDCC1 **Project:** \".concat(fileDetails.projectName, \"\\n\");\n            result += \"\\uD83C\\uDFF7️ **Type:** \".concat(fileDetails.fileType, \"\\n\");\n            if (fileTypeOption) {\n                result += \"\\uD83D\\uDCDD **Description:** \".concat(fileTypeOption.description, \"\\n\");\n            }\n            result += \"\\uD83D\\uDCC5 **Created:** \".concat(new Date().toLocaleDateString(), \"\\n\\n\");\n            result += \"\\uD83D\\uDCA1 You can now find and edit this file in the sidebar!\\n\\n\";\n            result += \"\\uD83D\\uDD27 **Next Steps:**\\n\";\n            result += \"• Open the file to customize the content\\n\";\n            result += \"• Share with team members if needed\\n\";\n            result += \"• Add to your workflow or calendar\";\n            return result;\n        } catch (error) {\n            console.error('❌ File creation failed:', error);\n            return \"❌ **File creation failed:** \".concat(error instanceof Error ? error.message : 'Unknown error');\n        }\n    }\n    /**\n   * Generate file content based on template\n   */ generateFileContent(fileDetails, fileTypeOption) {\n        if (!fileTypeOption) {\n            // Default content if no template found\n            return \"# \".concat(fileDetails.fileName.replace(/\\.[^/.]+$/, \"\"), \"\\n\\nCreated: \").concat(new Date().toLocaleDateString(), \"\\n\\nContent goes here...\");\n        }\n        // Replace template variables\n        let content = fileTypeOption.contentTemplate;\n        content = content.replace(/\\{fileName\\}/g, fileDetails.fileName.replace(/\\.[^/.]+$/, \"\"));\n        content = content.replace(/\\{date\\}/g, new Date().toLocaleDateString());\n        return content;\n    }\n    /**\n   * Map file type to Convex expected type\n   */ mapToConvexFileType(fileType) {\n        const typeMap = {\n            markdown: 'note',\n            notes: 'note',\n            plan: 'note',\n            brief: 'note',\n            checklist: 'note',\n            spreadsheet: 'document',\n            document: 'document',\n            presentation: 'document'\n        };\n        return typeMap[fileType] || 'note';\n    }\n    /**\n   * Get creation guidance when details are insufficient\n   */ getCreationGuidance() {\n        return '\\uD83E\\uDD16 **File Creator - Let\\'s Get Started!**\\n\\nI need a bit more information to create your file. Here are some examples:\\n\\n**\\uD83D\\uDCC4 Quick Examples:**\\n• \"Create a budget spreadsheet for Marketing Project\"\\n• \"Make meeting notes for Development Team\"\\n• \"Add a project plan for Q1 Campaign\"\\n• \"Generate a presentation for Client Review\"\\n\\n**\\uD83C\\uDFAF What I need:**\\n1. **File type** (spreadsheet, notes, plan, etc.)\\n2. **File name** (optional - I\\'ll suggest one)\\n3. **Project name** (which project to add it to)\\n\\n**\\uD83D\\uDCA1 Pro tip:** Just describe what you want! \\nExample: \"I need a checklist for the product launch project\"\\n\\nType your request or say \"**file types**\" to see all available options! \\uD83D\\uDE80';\n    }\n    /**\n   * Get project selection prompt when project is not specified\n   */ async getProjectSelectionPrompt(fileDetails, convexMutations) {\n        try {\n            if (!convexMutations.getProjects) {\n                return \"\\uD83E\\uDD16 **Almost There! Which Project?**\\n\\nI'm ready to create your **\".concat(fileDetails.fileType, \"** file: `\").concat(fileDetails.fileName, '`\\n\\n**\\uD83D\\uDCC1 Please specify which project to add it to.**\\n\\n**\\uD83D\\uDCA1 Tip:** You can say something like:\\n\"Create ').concat(fileDetails.fileName, ' for [Your Project Name]\"');\n            }\n            // Fetch available projects\n            const projects = await convexMutations.getProjects();\n            let result = \"\\uD83E\\uDD16 **Almost There! Which Project?**\\n\\n\";\n            result += \"I'm ready to create your **\".concat(fileDetails.fileType, \"** file: `\").concat(fileDetails.fileName, \"`\\n\\n\");\n            result += \"**\\uD83D\\uDCC1 Available Projects:**\\n\";\n            if (projects && projects.length > 0) {\n                var _projects_, _projects_1;\n                projects.forEach((project, index)=>{\n                    result += \"\".concat(index + 1, \". **\").concat(project.name, \"**\\n\");\n                });\n                result += \"\\n**\\uD83C\\uDFAF Just tell me which project:**\\n\";\n                result += '• \"Add it to '.concat((_projects_ = projects[0]) === null || _projects_ === void 0 ? void 0 : _projects_.name, '\"\\n');\n                result += '• \"Put it in '.concat(((_projects_1 = projects[1]) === null || _projects_1 === void 0 ? void 0 : _projects_1.name) || 'Project Name', '\"\\n');\n                result += '• Or say: \"Create '.concat(fileDetails.fileName, ' for [Project Name]\"\\n');\n            } else {\n                result += \"No projects found. Please create a project first or specify a project name.\\n\";\n            }\n            return result;\n        } catch (error) {\n            console.error('Error fetching projects for selection:', error);\n            return \"\\uD83E\\uDD16 **Almost There! Which Project?**\\n\\nI'm ready to create your **\".concat(fileDetails.fileType, \"** file: `\").concat(fileDetails.fileName, '`\\n\\n**\\uD83D\\uDCC1 Please specify which project to add it to.**\\n\\n**\\uD83D\\uDCA1 Tip:** You can say something like:\\n\"Create ').concat(fileDetails.fileName, ' for [Your Project Name]\"');\n        }\n    }\n    /**\n   * Get available file type options\n   */ getFileTypeOptions() {\n        let result = \"\\uD83E\\uDD16 **Available File Types**\\n\\n\";\n        this.fileTypeOptions.forEach((option, index)=>{\n            result += \"**\".concat(index + 1, \". \").concat(option.type.charAt(0).toUpperCase() + option.type.slice(1), \"** (\").concat(option.extension, \")\\n\");\n            result += \"   \".concat(option.description, \"\\n\\n\");\n        });\n        result += \"**\\uD83D\\uDCA1 Usage Examples:**\\n\";\n        result += '• \"Create a spreadsheet for Budget Planning\"\\n';\n        result += '• \"Make meeting notes for Development Team\"\\n';\n        result += '• \"Add a project plan for Marketing Campaign\"\\n';\n        result += '• \"Generate a brief for Client Presentation\"\\n\\n';\n        result += \"**\\uD83D\\uDE80 Just describe what you need and I'll handle the rest!**\";\n        return result;\n    }\n    /**\n   * Get help message for the agent\n   */ getHelpMessage() {\n        return '\\uD83E\\uDD16 **File Creator Agent Help**\\n\\nI specialize in creating files for your existing projects! Here\\'s how I work:\\n\\n**\\uD83D\\uDCC4 Supported File Types:**\\n• **Spreadsheets** - Budgets, calculations, data tracking\\n• **Documents** - Reports, proposals, formal documents  \\n• **Presentations** - Meeting slides, proposals\\n• **Notes** - Meeting notes, general notes\\n• **Plans** - Project plans, strategies, roadmaps\\n• **Briefs** - Creative briefs, project overviews\\n• **Checklists** - Task lists, process checklists\\n• **Markdown** - General documentation\\n\\n**\\uD83C\\uDFAF How to Use:**\\n1. **Tell me what file you want:** \"Create a budget spreadsheet\"\\n2. **Specify the project:** \"for Marketing Campaign\"\\n3. **I\\'ll create it with a template!**\\n\\n**✨ Quick Examples:**\\n• \"Create a meeting notes file for Development Team\"\\n• \"Make a project plan for Q1 Launch\"\\n• \"Add a budget spreadsheet to Marketing Project\" \\n• \"Generate a presentation for Client Review\"\\n\\n**\\uD83D\\uDD27 Special Commands:**\\n• Type \"**file types**\" to see all available options\\n• Type \"**help**\" to see this message again\\n\\n**\\uD83D\\uDCA1 Pro Tips:**\\n• I\\'ll suggest file names if you don\\'t provide one\\n• All files come with helpful templates\\n• Just describe what you need in plain English!\\n\\nReady to create some files? \\uD83D\\uDE80';\n    }\n    constructor(...args){\n        super(...args), this.id = 'file-creator', this.name = 'File Creator', this.description = 'Creates files in existing projects using natural language with project selection', this.icon = 'FilePlus', // Predefined file type options\n        this.fileTypeOptions = [\n            {\n                type: 'markdown',\n                extension: '.md',\n                description: 'Markdown document for notes, documentation, or content',\n                contentTemplate: '# {fileName}\\n\\nCreated: {date}\\n\\n## Overview\\n\\n## Details\\n\\n## Notes\\n'\n            },\n            {\n                type: 'spreadsheet',\n                extension: '.xlsx',\n                description: 'Excel spreadsheet for budgets, calculations, or data',\n                contentTemplate: '# {fileName}\\n\\n| Item | Value | Notes |\\n|------|-------|-------|\\n| Example | 0 | Add your data here |\\n| Total | 0 | |\\n'\n            },\n            {\n                type: 'document',\n                extension: '.docx',\n                description: 'Word document for reports, proposals, or formal documents',\n                contentTemplate: '# {fileName}\\n\\nDocument created: {date}\\n\\n## Executive Summary\\n\\n## Main Content\\n\\n## Conclusion\\n'\n            },\n            {\n                type: 'presentation',\n                extension: '.pptx',\n                description: 'PowerPoint presentation for meetings or proposals',\n                contentTemplate: '# {fileName}\\n\\nPresentation Outline\\n\\n## Slide 1: Title\\n- {fileName}\\n- Date: {date}\\n\\n## Slide 2: Agenda\\n- Topic 1\\n- Topic 2\\n- Topic 3\\n\\n## Slide 3: Content\\n- Main points\\n'\n            },\n            {\n                type: 'plan',\n                extension: '.md',\n                description: 'Project plan or strategy document',\n                contentTemplate: '# {fileName}\\n\\nProject Plan - {date}\\n\\n## Objectives\\n- Primary goal\\n- Secondary goals\\n\\n## Timeline\\n- Phase 1:\\n- Phase 2:\\n- Phase 3:\\n\\n## Resources\\n- Team members\\n- Budget\\n- Tools\\n\\n## Milestones\\n- Milestone 1:\\n- Milestone 2:\\n- Final delivery:\\n'\n            },\n            {\n                type: 'notes',\n                extension: '.md',\n                description: 'Meeting notes or general notes',\n                contentTemplate: '# {fileName}\\n\\nMeeting Notes - {date}\\n\\n## Attendees\\n- \\n\\n## Agenda\\n- \\n\\n## Discussion Points\\n- \\n\\n## Action Items\\n- [ ] \\n\\n## Next Steps\\n- \\n'\n            },\n            {\n                type: 'brief',\n                extension: '.md',\n                description: 'Creative brief or project brief',\n                contentTemplate: '# {fileName}\\n\\nProject Brief - {date}\\n\\n## Project Overview\\n\\n## Objectives\\n- Primary:\\n- Secondary:\\n\\n## Target Audience\\n\\n## Key Messages\\n\\n## Deliverables\\n- \\n\\n## Timeline\\n- Start:\\n- End:\\n\\n## Budget\\n$\\n\\n## Success Metrics\\n- \\n'\n            },\n            {\n                type: 'checklist',\n                extension: '.md',\n                description: 'Task checklist or process checklist',\n                contentTemplate: '# {fileName}\\n\\nChecklist - {date}\\n\\n## Pre-Launch\\n- [ ] Task 1\\n- [ ] Task 2\\n- [ ] Task 3\\n\\n## Launch\\n- [ ] Task 1\\n- [ ] Task 2\\n\\n## Post-Launch\\n- [ ] Task 1\\n- [ ] Task 2\\n\\n## Notes\\n- \\n'\n            }\n        ], this.tools = [\n            {\n                id: 'natural-language-file-creator',\n                name: 'Natural Language File Creator',\n                command: 'create-file',\n                description: 'Create files in existing projects using natural language with guided project selection',\n                parameters: []\n            }\n        ];\n    }\n}\n// State to track pending file creation\nFileCreatorAgent.pendingFileCreation = null;\n// Export an instance of the agent for use in the registry\nconst fileCreatorAgent = new FileCreatorAgent();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./store/agents/fileCreatorAgent.ts\n"));

/***/ })

});