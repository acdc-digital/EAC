"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./store/agents/logoGeneratorAgent.ts":
/*!********************************************!*\
  !*** ./store/agents/logoGeneratorAgent.ts ***!
  \********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   LogoGeneratorAgent: () => (/* binding */ LogoGeneratorAgent),\n/* harmony export */   logoGeneratorAgent: () => (/* binding */ logoGeneratorAgent)\n/* harmony export */ });\n/* harmony import */ var _lib_api_openai_images__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/lib/api/openai-images */ \"(app-pages-browser)/./lib/api/openai-images.ts\");\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base */ \"(app-pages-browser)/./store/agents/base.ts\");\n// Logo Generator Agent - OpenAI DALL-E Integration\n// /Users/matthewsimon/Projects/eac/eac/store/agents/logoGeneratorAgent.ts\n\n\nclass LogoGeneratorAgent extends _base__WEBPACK_IMPORTED_MODULE_1__.BaseAgent {\n    async execute(tool, input, convexMutations, sessionId) {\n        try {\n            // For the logo generator, we always use the conversational flow\n            // The slash command '/logo' is handled within processInput\n            return await this.processInput(input, convexMutations, sessionId || '');\n        } catch (error) {\n            console.error('Logo Generator Agent error:', error);\n            return \"‚ùå **Error in Logo Generation**\\n\\nSomething went wrong: \".concat(error instanceof Error ? error.message : 'Unknown error');\n        }\n    }\n    getInitialPrompt() {\n        this.currentStep = 'welcome';\n        return \"\\uD83C\\uDFA8 **Welcome to the Logo Generator!**\\n\\nI'll help you create a professional logo using Google's Imagen AI. Let's start by learning about your business.\\n\\n**What's the name of your company or brand?**\\n\\n(This will be the primary text in your logo)\";\n    }\n    async processInput(input, convexMutations, sessionId) {\n        var _this_currentBrief;\n        const normalizedInput = input.toLowerCase().trim();\n        // Debug logging\n        console.log('üé® LogoGenerator processInput:', {\n            input: normalizedInput,\n            currentStep: this.currentStep,\n            briefExists: !!this.currentBrief,\n            companyName: (_this_currentBrief = this.currentBrief) === null || _this_currentBrief === void 0 ? void 0 : _this_currentBrief.companyName\n        });\n        // Handle slash commands first\n        if (normalizedInput.startsWith('/logo')) {\n            return this.handleLogoGeneration(input, convexMutations, sessionId);\n        }\n        // Handle conversation flow based on current step\n        switch(this.currentStep){\n            case 'welcome':\n                return this.handleWelcomeStep(input, convexMutations, sessionId);\n            case 'company':\n                return this.handleCompanyStep(input, convexMutations, sessionId);\n            case 'business':\n                return this.handleBusinessStep(input, convexMutations, sessionId);\n            case 'style':\n                return this.handleStyleStep(input, convexMutations, sessionId);\n            case 'colors':\n                return this.handleColorsStep(input, convexMutations, sessionId);\n            case 'type':\n                return this.handleTypeStep(input, convexMutations, sessionId);\n            case 'audience':\n                return this.handleAudienceStep(input, convexMutations, sessionId);\n            case 'instructions':\n                return this.handleInstructionsStep(input, convexMutations, sessionId);\n            case 'generate':\n                return this.handleGenerateStep(input, convexMutations, sessionId);\n            default:\n                return this.getInitialPrompt();\n        }\n    }\n    async handleWelcomeStep(input, convexMutations, sessionId) {\n        if (!this.currentBrief) {\n            this.currentBrief = {};\n        }\n        this.currentBrief.companyName = input.trim();\n        this.currentStep = 'business';\n        return \"Great! **\".concat(input.trim(), \"** is a wonderful name.\\n\\nNow, tell me about your business:\\n\\n**What industry are you in and what does \").concat(input.trim(), ' do?**\\n\\n(For example: \"We\\'re a sustainable fashion brand that creates eco-friendly clothing\" or \"We provide cloud-based accounting software for small businesses\")');\n    }\n    async handleCompanyStep(input, convexMutations, sessionId) {\n        this.currentBrief.companyName = input.trim();\n        this.currentStep = 'business';\n        return \"Perfect! Now let's learn about **\".concat(input.trim(), \"**.\\n\\n**What industry are you in and what does your business do?**\\n\\n(Be specific about your products, services, or mission. This helps me understand the right visual direction for your logo.)\");\n    }\n    async handleBusinessStep(input, convexMutations, sessionId) {\n        this.currentBrief.businessDescription = input.trim();\n        // Try to extract industry from the description\n        const businessDesc = input.toLowerCase();\n        let suggestedIndustry = '';\n        if (businessDesc.includes('tech') || businessDesc.includes('software') || businessDesc.includes('app')) {\n            suggestedIndustry = 'Technology';\n        } else if (businessDesc.includes('fashion') || businessDesc.includes('clothing') || businessDesc.includes('apparel')) {\n            suggestedIndustry = 'Fashion & Retail';\n        } else if (businessDesc.includes('food') || businessDesc.includes('restaurant') || businessDesc.includes('culinary')) {\n            suggestedIndustry = 'Food & Beverage';\n        } else if (businessDesc.includes('health') || businessDesc.includes('medical') || businessDesc.includes('wellness')) {\n            suggestedIndustry = 'Healthcare';\n        } else if (businessDesc.includes('finance') || businessDesc.includes('accounting') || businessDesc.includes('banking')) {\n            suggestedIndustry = 'Financial Services';\n        } else {\n            suggestedIndustry = 'Professional Services';\n        }\n        this.currentBrief.industry = suggestedIndustry;\n        this.currentStep = 'style';\n        return \"Excellent! I understand that \".concat(this.currentBrief.companyName, \" \").concat(input.trim().toLowerCase(), \".\\n\\nNow, what style direction appeals to you? Choose one:\\n\\n1. **Minimalist** - Clean, simple, timeless\\n2. **Modern** - Contemporary, sleek, geometric\\n3. **Traditional** - Classic, established, trustworthy\\n4. **Playful** - Fun, creative, approachable\\n5. **Elegant** - Sophisticated, refined, luxury\\n6. **Bold** - Strong, impactful, confident\\n\\n**Type the number or style name you prefer:**\");\n    }\n    async handleStyleStep(input, convexMutations, sessionId) {\n        const normalizedInput = input.toLowerCase().trim();\n        let selectedStyle;\n        // Map input to style preference\n        if (normalizedInput.includes('1') || normalizedInput.includes('minimalist')) {\n            selectedStyle = 'minimalist';\n        } else if (normalizedInput.includes('2') || normalizedInput.includes('modern')) {\n            selectedStyle = 'modern';\n        } else if (normalizedInput.includes('3') || normalizedInput.includes('traditional')) {\n            selectedStyle = 'traditional';\n        } else if (normalizedInput.includes('4') || normalizedInput.includes('playful')) {\n            selectedStyle = 'playful';\n        } else if (normalizedInput.includes('5') || normalizedInput.includes('elegant')) {\n            selectedStyle = 'elegant';\n        } else if (normalizedInput.includes('6') || normalizedInput.includes('bold')) {\n            selectedStyle = 'bold';\n        } else {\n            return \"I didn't understand that style choice. Please choose:\\n\\n1. **Minimalist** 2. **Modern** 3. **Traditional** 4. **Playful** 5. **Elegant** 6. **Bold**\\n\\n**Type the number or style name:**\";\n        }\n        this.currentBrief.stylePreference = selectedStyle;\n        this.currentStep = 'colors';\n        return \"Perfect! A **\".concat(selectedStyle, \"** style will work great for \").concat(this.currentBrief.companyName, '.\\n\\n**What color preferences do you have?**\\n\\nYou can mention:\\n- Specific colors (blue, green, red, etc.)\\n- Color themes (corporate, vibrant, earthy, etc.)  \\n- \"No preference\" if you want me to suggest colors based on your industry\\n\\n**Your color preference:**');\n    }\n    async handleColorsStep(input, convexMutations, sessionId) {\n        const colorInput = input.trim();\n        this.currentBrief.colorPreferences = [\n            colorInput\n        ];\n        this.currentStep = 'type';\n        return \"Great color choice! Now, what type of logo do you prefer?\\n\\n1. **Text-only** - Company name styled beautifully (like Google, Coca-Cola)\\n2. **Icon-only** - A symbol that represents your brand (like Apple, Nike swoosh)\\n3. **Combination** - Both text and icon together (like Adidas, McDonald's)\\n\\n**Type the number or logo type you prefer:**\";\n    }\n    async handleTypeStep(input, convexMutations, sessionId) {\n        const normalizedInput = input.toLowerCase().trim();\n        let logoType;\n        if (normalizedInput.includes('1') || normalizedInput.includes('text')) {\n            logoType = 'text';\n        } else if (normalizedInput.includes('2') || normalizedInput.includes('icon')) {\n            logoType = 'icon';\n        } else if (normalizedInput.includes('3') || normalizedInput.includes('combination')) {\n            logoType = 'combination';\n        } else {\n            return \"Please choose a logo type:\\n\\n1. **Text-only** 2. **Icon-only** 3. **Combination**\\n\\n**Type the number or logo type:**\";\n        }\n        this.currentBrief.logoType = logoType;\n        this.currentStep = 'audience';\n        return \"Excellent! A **\".concat(logoType, '** logo will be perfect.\\n\\n**Who is your target audience?**\\n\\n(For example: \"Young professionals\", \"Families with children\", \"Small business owners\", \"Tech startups\", etc. This helps inform the design approach.)');\n    }\n    async handleAudienceStep(input, convexMutations, sessionId) {\n        this.currentBrief.targetAudience = input.trim();\n        this.currentStep = 'instructions';\n        return 'Perfect! Understanding your audience helps create the right visual impact.\\n\\n**Any additional instructions or specific elements you\\'d like included?**\\n\\n(Optional - you can mention specific symbols, avoid certain elements, or say \"none\" to proceed)\\n\\n**Additional instructions:**';\n    }\n    async handleInstructionsStep(input, convexMutations, sessionId) {\n        var _brief_colorPreferences;\n        const instructions = input.trim();\n        if (instructions.toLowerCase() !== 'none') {\n            this.currentBrief.additionalInstructions = instructions;\n        }\n        this.currentStep = 'generate';\n        const brief = this.currentBrief;\n        return \"\\uD83C\\uDFAF **Logo Brief Complete!**\\n\\nHere's what I'll create for you:\\n\\n‚Ä¢ **Company:** \".concat(brief.companyName, \"\\n‚Ä¢ **Business:** \").concat(brief.businessDescription, \"\\n‚Ä¢ **Industry:** \").concat(brief.industry, \"\\n‚Ä¢ **Style:** \").concat(brief.stylePreference, \"\\n‚Ä¢ **Colors:** \").concat((_brief_colorPreferences = brief.colorPreferences) === null || _brief_colorPreferences === void 0 ? void 0 : _brief_colorPreferences[0], \"\\n‚Ä¢ **Type:** \").concat(brief.logoType, \"\\n‚Ä¢ **Audience:** \").concat(brief.targetAudience, \"\\n\").concat(brief.additionalInstructions ? \"‚Ä¢ **Special Instructions:** \".concat(brief.additionalInstructions) : '', '\\n\\n**Ready to generate your logo?**\\n\\nType \"yes\" to start generation or \"edit\" if you want to modify anything.');\n    }\n    async handleGenerateStep(input, convexMutations, sessionId) {\n        const normalizedInput = input.toLowerCase().trim();\n        if (normalizedInput.includes('edit') || normalizedInput.includes('modify')) {\n            this.currentStep = 'welcome';\n            this.currentBrief = {};\n            return \"No problem! Let's start over with any changes you'd like to make.\\n\\n**What's the name of your company or brand?**\";\n        }\n        if (normalizedInput.includes('yes') || normalizedInput.includes('generate') || normalizedInput.includes('create')) {\n            return this.handleLogoGeneration(input, convexMutations, sessionId);\n        }\n        return 'Please type \"yes\" to generate your logo or \"edit\" to make changes to your brief.';\n    }\n    async handleLogoGeneration(input, convexMutations, sessionId) {\n        const brief = this.currentBrief;\n        if (!brief || !brief.companyName) {\n            this.currentStep = 'welcome';\n            return \"I need more information to generate your logo. Let's start with your company name.\\n\\n**What's the name of your company or brand?**\";\n        }\n        try {\n            var _generationResult_imageUrl, _generationResult_imageUrl1;\n            // Create consolidated prompt from the brief using the new OpenAI system\n            const logoPrompt = this.createConsolidatedLogoPrompt(brief);\n            // Configure OpenAI generation options\n            const generationOptions = {\n                prompt: logoPrompt,\n                style: 'vivid',\n                size: '1024x1024',\n                quality: 'hd',\n                numberOfImages: 1\n            };\n            // Generate logo using OpenAI DALL-E\n            const generationResult = await (0,_lib_api_openai_images__WEBPACK_IMPORTED_MODULE_0__.generateLogoWithOpenAI)(generationOptions);\n            console.log('üé® Logo generation result:', {\n                success: generationResult.success,\n                hasImageUrl: !!generationResult.imageUrl,\n                imageUrlLength: (_generationResult_imageUrl = generationResult.imageUrl) === null || _generationResult_imageUrl === void 0 ? void 0 : _generationResult_imageUrl.length,\n                imageUrlPreview: (_generationResult_imageUrl1 = generationResult.imageUrl) === null || _generationResult_imageUrl1 === void 0 ? void 0 : _generationResult_imageUrl1.substring(0, 50),\n                revisedPrompt: generationResult.revisedPrompt,\n                error: generationResult.error\n            });\n            if (generationResult.success && generationResult.imageUrl) {\n                var _brief_colorPreferences;\n                // Store the generated logo in Convex database for persistence\n                if (sessionId && convexMutations.createLogoGeneration) {\n                    await convexMutations.createLogoGeneration({\n                        sessionId,\n                        logoSvg: generationResult.imageUrl,\n                        prompt: imagePrompt,\n                        brief: {\n                            companyName: brief.companyName || 'Unknown',\n                            business: brief.businessDescription || 'Unknown',\n                            stylePreference: brief.stylePreference || 'modern',\n                            colorPreferences: brief.colorPreferences || [\n                                'blue'\n                            ],\n                            logoType: brief.logoType || 'combination',\n                            targetAudience: brief.targetAudience || 'general',\n                            specialInstructions: brief.additionalInstructions\n                        },\n                        status: 'completed'\n                    });\n                }\n                // Store the generated logo in chat messages for display\n                if (sessionId && convexMutations.storeChatMessage) {\n                    var _brief_colorPreferences1;\n                    await convexMutations.storeChatMessage({\n                        role: \"assistant\",\n                        content: \"\\uD83C\\uDFA8 **Logo Generated Successfully!**\\n\\nHere's your custom logo for **\".concat(brief.companyName, \"**:\\n\\n![Generated Logo](\").concat(generationResult.imageUrl, \")\\n\\n**Generation Details:**\\n‚Ä¢ **Style:** \").concat(brief.stylePreference, \"\\n‚Ä¢ **Type:** \").concat(brief.logoType, \"\\n‚Ä¢ **Colors:** \").concat((_brief_colorPreferences1 = brief.colorPreferences) === null || _brief_colorPreferences1 === void 0 ? void 0 : _brief_colorPreferences1[0], \"\\n‚Ä¢ **Target Audience:** \").concat(brief.targetAudience, \"\\n\\n**Imagen Prompt Used:**\\n`\").concat(imagePrompt, \"`\\n\\n**What's Next?**\\n1. **Generate Variation** - Create another version\\n2. **Export Logo** - Download in different formats\\n3. **Start New Project** - Create another logo\\n\\nType your choice to continue!\"),\n                        sessionId,\n                        operation: {\n                            type: \"tool_executed\",\n                            details: {\n                                tool: \"logo_generation\",\n                                imageUrl: generationResult.imageUrl,\n                                imageData: generationResult.imageData,\n                                prompt: imagePrompt,\n                                brief: brief\n                            }\n                        }\n                    });\n                }\n                // Reset for next generation\n                this.reset();\n                return \"\\uD83C\\uDFA8 **Logo Generated Successfully!**\\n\\nYour custom logo for **\".concat(brief.companyName, \"** has been created and will appear in the Logo Generator tab.\\n\\n**Generation Details:**\\n‚Ä¢ **Style:** \").concat(brief.stylePreference, \"\\n‚Ä¢ **Type:** \").concat(brief.logoType, \"\\n‚Ä¢ **Colors:** \").concat((_brief_colorPreferences = brief.colorPreferences) === null || _brief_colorPreferences === void 0 ? void 0 : _brief_colorPreferences[0], \"\\n‚Ä¢ **Target Audience:** \").concat(brief.targetAudience, \"\\n\\nThe logo is now available in the preview panel. You can:\\n\\n1. **Generate Variation** - Create another version\\n2. **Export Logo** - Download in different formats  \\n3. **Start New Project** - Create another logo\\n\\nType your choice to continue!\");\n            } else {\n                return \"‚ùå **Logo Generation Failed**\\n\\nSorry, there was an issue generating your logo: \".concat(generationResult.error || 'Unknown error', '\\n\\nPlease try again or modify your requirements. Type \"restart\" to begin with a new brief.');\n            }\n        } catch (error) {\n            console.error('‚ùå Logo generation error:', error);\n            return \"‚ùå **Logo Generation Error**\\n\\nAn unexpected error occurred during logo generation. Please try again.\\n\\nError: \".concat(error instanceof Error ? error.message : 'Unknown error', '\\n\\nType \"restart\" to begin with a new brief.');\n        }\n    }\n    createImagenPrompt(brief) {\n        const { companyName, businessDescription, stylePreference, colorPreferences, logoType, targetAudience, additionalInstructions } = brief;\n        let prompt = 'Create a professional logo design for \"'.concat(companyName, '\"');\n        if (businessDescription) {\n            prompt += \", a company that \".concat(businessDescription.toLowerCase());\n        }\n        if (stylePreference) {\n            prompt += \". Style: \".concat(stylePreference);\n        }\n        if (logoType) {\n            if (logoType === 'text') {\n                prompt += '. Text-only logo with stylized typography';\n            } else if (logoType === 'icon') {\n                prompt += '. Icon-only logo, no text, symbolic design';\n            } else {\n                prompt += '. Combination logo with both text and icon elements';\n            }\n        }\n        if (colorPreferences && colorPreferences[0] && colorPreferences[0].toLowerCase() !== 'no preference') {\n            prompt += \". Color scheme: \".concat(colorPreferences[0]);\n        }\n        if (targetAudience) {\n            prompt += \". Target audience: \".concat(targetAudience);\n        }\n        if (additionalInstructions) {\n            prompt += \". Special requirements: \".concat(additionalInstructions);\n        }\n        prompt += '. High quality, professional, scalable vector design, clean background, suitable for business use.';\n        return prompt;\n    }\n    // Reset the agent state\n    reset() {\n        this.currentBrief = {};\n        this.currentStep = 'welcome';\n    }\n    constructor(){\n        super(), this.id = 'logo-generator', this.name = 'Logo Generator', this.description = 'AI-powered logo creation and brand identity generation using Google Imagen', this.icon = 'Puzzle', // Instance state to track the logo generation process\n        this.currentBrief = {}, this.currentStep = 'welcome', this.tools = [\n            {\n                id: 'logo-generation',\n                name: 'Logo Generation',\n                command: '/logo',\n                description: 'Generate professional logos with Google Imagen AI',\n                parameters: []\n            }\n        ];\n        // Initialize the brief when agent is created\n        this.currentBrief = {};\n        this.currentStep = 'welcome';\n    }\n}\n// Export the instantiated agent for registry\nconst logoGeneratorAgent = new LogoGeneratorAgent();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./store/agents/logoGeneratorAgent.ts\n"));

/***/ })

});