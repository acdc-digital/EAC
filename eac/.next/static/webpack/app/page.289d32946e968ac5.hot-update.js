"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./store/agents/index.ts":
/*!*******************************!*\
  !*** ./store/agents/index.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useAgentStore: () => (/* binding */ useAgentStore)\n/* harmony export */ });\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/../node_modules/.pnpm/zustand@5.0.6_@types+react@19.1.8_react@18.3.1_use-sync-external-store@1.5.0_react@18.3.1_/node_modules/zustand/esm/react.mjs\");\n/* harmony import */ var zustand_middleware__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! zustand/middleware */ \"(app-pages-browser)/../node_modules/.pnpm/zustand@5.0.6_@types+react@19.1.8_react@18.3.1_use-sync-external-store@1.5.0_react@18.3.1_/node_modules/zustand/esm/middleware.mjs\");\n// Agent Store\n// /Users/matthewsimon/Projects/eac/eac/store/agents/index.ts\n\n\n// Initial agents - starting with the Instructions agent\nconst initialAgents = [\n    {\n        id: 'instructions',\n        name: 'Instructions',\n        description: 'Generate and maintain project instructions and documentation',\n        isActive: false,\n        icon: '📚',\n        tools: [\n            {\n                id: 'generate-instructions',\n                name: 'Generate Instructions',\n                command: '/instructions',\n                description: 'Create a new instruction document for the project',\n                parameters: [\n                    {\n                        name: 'topic',\n                        type: 'string',\n                        description: 'Topic or area to create instructions for',\n                        required: true\n                    },\n                    {\n                        name: 'audience',\n                        type: 'select',\n                        description: 'Target audience for the instructions',\n                        required: false,\n                        options: [\n                            'developers',\n                            'users',\n                            'administrators',\n                            'general'\n                        ]\n                    }\n                ]\n            }\n        ]\n    }\n];\nconst useAgentStore = (0,zustand__WEBPACK_IMPORTED_MODULE_0__.create)()((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_1__.devtools)((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_1__.persist)((set, get)=>({\n        // Initial state\n        agents: initialAgents,\n        activeAgentId: null,\n        executions: [],\n        isLoading: false,\n        error: null,\n        // Actions\n        addAgent: (agentData)=>{\n            const newAgent = {\n                ...agentData,\n                id: crypto.randomUUID()\n            };\n            set((state)=>({\n                    agents: [\n                        ...state.agents,\n                        newAgent\n                    ]\n                }), false, 'addAgent');\n        },\n        updateAgent: (id, updates)=>{\n            set((state)=>({\n                    agents: state.agents.map((agent)=>agent.id === id ? {\n                            ...agent,\n                            ...updates\n                        } : agent)\n                }), false, 'updateAgent');\n        },\n        deleteAgent: (id)=>{\n            set((state)=>({\n                    agents: state.agents.filter((agent)=>agent.id !== id),\n                    activeAgentId: state.activeAgentId === id ? null : state.activeAgentId\n                }), false, 'deleteAgent');\n        },\n        setActiveAgent: (id)=>{\n            // First deactivate all agents\n            set((state)=>({\n                    agents: state.agents.map((agent)=>({\n                            ...agent,\n                            isActive: false\n                        })),\n                    activeAgentId: id\n                }), false, 'deactivateAllAgents');\n            // Then activate the selected agent if provided\n            if (id) {\n                set((state)=>({\n                        agents: state.agents.map((agent)=>agent.id === id ? {\n                                ...agent,\n                                isActive: true\n                            } : agent)\n                    }), false, 'activateAgent');\n            }\n        },\n        executeAgentTool: async (agentId, toolId, input, convexMutations)=>{\n            const { agents, addExecution } = get();\n            const agent = agents.find((a)=>a.id === agentId);\n            const tool = agent === null || agent === void 0 ? void 0 : agent.tools.find((t)=>t.id === toolId);\n            if (!agent || !tool) {\n                throw new Error(\"Agent or tool not found: \".concat(agentId, \"/\").concat(toolId));\n            }\n            set({\n                isLoading: true,\n                error: null\n            });\n            try {\n                // Add execution record\n                const executionId = crypto.randomUUID();\n                addExecution({\n                    agentId,\n                    toolId,\n                    input,\n                    status: 'pending'\n                });\n                // Execute the agent tool based on agent type\n                let result = '';\n                if (agent.id === 'instructions') {\n                    result = await executeInstructionsAgent(tool, input, convexMutations);\n                } else {\n                    throw new Error(\"Unknown agent type: \".concat(agent.id));\n                }\n                // Update execution with result\n                set((state)=>({\n                        executions: state.executions.map((exec)=>exec.id === executionId ? {\n                                ...exec,\n                                output: result,\n                                status: 'completed'\n                            } : exec),\n                        isLoading: false\n                    }));\n                return result;\n            } catch (error) {\n                const errorMessage = error instanceof Error ? error.message : 'Unknown error';\n                // Update execution with error\n                set((state)=>({\n                        executions: state.executions.map((exec)=>exec.agentId === agentId && exec.toolId === toolId && exec.input === input ? {\n                                ...exec,\n                                status: 'error',\n                                error: errorMessage\n                            } : exec),\n                        isLoading: false,\n                        error: errorMessage\n                    }));\n                throw error;\n            }\n        },\n        addExecution: (executionData)=>{\n            const execution = {\n                ...executionData,\n                id: crypto.randomUUID(),\n                timestamp: new Date()\n            };\n            set((state)=>({\n                    executions: [\n                        execution,\n                        ...state.executions.slice(0, 99)\n                    ] // Keep last 100 executions\n                }), false, 'addExecution');\n        },\n        clearExecutions: ()=>{\n            set({\n                executions: []\n            }, false, 'clearExecutions');\n        },\n        setError: (error)=>{\n            set({\n                error\n            }, false, 'setError');\n        },\n        setLoading: (loading)=>{\n            set({\n                isLoading: loading\n            }, false, 'setLoading');\n        },\n        reset: ()=>{\n            set({\n                agents: initialAgents,\n                activeAgentId: null,\n                executions: [],\n                isLoading: false,\n                error: null\n            }, false, 'reset');\n        }\n    }), {\n    name: 'agent-storage',\n    partialize: (state)=>({\n            agents: state.agents,\n            activeAgentId: state.activeAgentId,\n            executions: state.executions.slice(0, 50) // Only persist last 50 executions\n        })\n}), {\n    name: 'agent-store'\n}));\n// Instructions Agent Tool Execution\nasync function executeInstructionsAgent(tool, input, convexMutations) {\n    if (tool.id === 'generate-instructions') {\n        var _audienceMatch_;\n        // Clean the input by removing the command and extracting the actual instruction\n        let cleanInput = input.trim();\n        // Remove the /instructions command if present\n        if (cleanInput.startsWith('/instructions')) {\n            cleanInput = cleanInput.replace('/instructions', '').trim();\n        }\n        // Extract audience if specified\n        const audienceMatch = cleanInput.match(/audience:\\s*(.+?)$/i);\n        const audience = (audienceMatch === null || audienceMatch === void 0 ? void 0 : (_audienceMatch_ = audienceMatch[1]) === null || _audienceMatch_ === void 0 ? void 0 : _audienceMatch_.trim()) || 'all users';\n        // Remove audience specification from the instruction content\n        const instructionContent = cleanInput.replace(/\\s+audience:\\s*.+$/i, '').trim();\n        if (!instructionContent) {\n            return \"❌ Please provide instruction content. Example: /instructions always say welcome to the EAC\";\n        }\n        // Generate a brief filename (1-2 words) based on the actual user request\n        const briefTitle = generateBriefTitle(instructionContent);\n        const filename = \"\".concat(briefTitle, \".md\");\n        // Create the actual instruction document content\n        const documentContent = generateInstructionDocument(instructionContent, audience);\n        try {\n            // Try to use Convex mutations if available\n            if (convexMutations) {\n                // Ensure Instructions project exists\n                await convexMutations.ensureInstructionsProject();\n                // Create the instruction file in Convex database\n                await convexMutations.createInstructionFile({\n                    name: filename,\n                    content: documentContent,\n                    topic: briefTitle,\n                    audience: audience\n                });\n                // Store in local editor for immediate display in the existing Instructions folder\n                const { useEditorStore } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! @/store */ \"(app-pages-browser)/./store/index.ts\"));\n                const { createNewFile } = useEditorStore.getState();\n                // Create file in the Instructions folder using the correct folder ID\n                createNewFile(filename, 'markdown', 'project', 'instructions-folder');\n                return \"✅ Instructions document created successfully!\\n\\n**File**: \".concat(filename, \"\\n**Instruction**: \").concat(instructionContent, \"\\n**Audience**: \").concat(audience, \"\\n**Location**: Instructions project folder (synced to database)\\n\\nThe instruction has been added to your Instructions folder and will be used as context for all future AI conversations.\\n\\n**Preview**:\\n\").concat(documentContent.substring(0, 150), \"...\");\n            } else {\n                // Fallback to local creation if Convex mutations not available\n                const { useEditorStore } = await Promise.resolve(/*! import() */).then(__webpack_require__.bind(__webpack_require__, /*! @/store */ \"(app-pages-browser)/./store/index.ts\"));\n                const { createNewFile } = useEditorStore.getState();\n                createNewFile(filename, 'markdown', 'project', 'instructions-folder');\n                return \"✅ Instructions document created locally!\\n\\n**File**: \".concat(filename, \"\\n**Instruction**: \").concat(instructionContent, \"\\n**Audience**: \").concat(audience, \"\\n**Location**: Instructions project folder\\n\\nThe instruction has been added to your Instructions folder.\\n\\n**Note**: To enable database sync, use the Instructions agent from a connected component.\");\n            }\n        } catch (error) {\n            console.error('Error creating instruction file:', error);\n            return \"❌ Failed to create instruction document\\n\\n**Error**: \".concat(error instanceof Error ? error.message : 'Unknown error', \"\\n**Instruction**: \").concat(instructionContent, \"\\n\\nPlease try again or contact support if the issue persists.\");\n        }\n    }\n    throw new Error(\"Unknown tool: \".concat(tool.id));\n}\n// Generate a brief title (1-2 words) from instruction content\nfunction generateBriefTitle(instructionContent) {\n    const content = instructionContent.toLowerCase();\n    // Common patterns to extract key concepts\n    if (content.includes('welcome') || content.includes('greeting')) {\n        return 'welcome-greeting';\n    }\n    if (content.includes('say') && content.includes('hello')) {\n        return 'hello-greeting';\n    }\n    if (content.includes('professional') || content.includes('formal')) {\n        return 'professional-tone';\n    }\n    if (content.includes('friendly') || content.includes('casual')) {\n        return 'friendly-tone';\n    }\n    if (content.includes('detailed') || content.includes('explanation')) {\n        return 'detailed-responses';\n    }\n    if (content.includes('code') || content.includes('example')) {\n        return 'code-examples';\n    }\n    if (content.includes('typescript') || content.includes('react')) {\n        return 'tech-focus';\n    }\n    if (content.includes('mobile') || content.includes('responsive')) {\n        return 'mobile-first';\n    }\n    if (content.includes('error') || content.includes('debug')) {\n        return 'error-handling';\n    }\n    if (content.includes('security') || content.includes('safe')) {\n        return 'security-focus';\n    }\n    // Extract first meaningful word or phrase\n    const words = content.replace(/[^\\w\\s]/g, '').split(' ').filter((word)=>word.length > 2 && ![\n            'the',\n            'and',\n            'for',\n            'with',\n            'that',\n            'this',\n            'always',\n            'never',\n            'should',\n            'will',\n            'can',\n            'may'\n        ].includes(word));\n    if (words.length >= 2) {\n        return \"\".concat(words[0], \"-\").concat(words[1]);\n    } else if (words.length === 1) {\n        return \"\".concat(words[0], \"-rule\");\n    }\n    return 'general-instruction';\n}\n// Generate the actual instruction document content\nfunction generateInstructionDocument(instructionContent, audience) {\n    const currentDate = new Date().toLocaleDateString();\n    return \"# AI Instruction\\n\\n**Created**: \".concat(currentDate, \"  \\n**Audience**: \").concat(audience, \"  \\n**Project**: EAC Financial Dashboard\\n\\n## Instruction\\n\\n\").concat(instructionContent, \"\\n\\n## Context\\n\\nThis instruction should be applied to all responses when assisting with the EAC Financial Dashboard project.\\n\\n## Implementation\\n\\nThe AI assistant should incorporate this instruction into every response, regardless of whether MCP tools or agent tools are being used.\\n\\n---\\n\\n*This instruction is automatically loaded as context for all AI conversations.*\");\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3N0b3JlL2FnZW50cy9pbmRleC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxjQUFjO0FBQ2QsNkRBQTZEO0FBRTVCO0FBQ3NCO0FBR3ZELHdEQUF3RDtBQUN4RCxNQUFNRyxnQkFBeUI7SUFDN0I7UUFDRUMsSUFBSTtRQUNKQyxNQUFNO1FBQ05DLGFBQWE7UUFDYkMsVUFBVTtRQUNWQyxNQUFNO1FBQ05DLE9BQU87WUFDTDtnQkFDRUwsSUFBSTtnQkFDSkMsTUFBTTtnQkFDTkssU0FBUztnQkFDVEosYUFBYTtnQkFDYkssWUFBWTtvQkFDVjt3QkFDRU4sTUFBTTt3QkFDTk8sTUFBTTt3QkFDTk4sYUFBYTt3QkFDYk8sVUFBVTtvQkFDWjtvQkFDQTt3QkFDRVIsTUFBTTt3QkFDTk8sTUFBTTt3QkFDTk4sYUFBYTt3QkFDYk8sVUFBVTt3QkFDVkMsU0FBUzs0QkFBQzs0QkFBYzs0QkFBUzs0QkFBa0I7eUJBQVU7b0JBQy9EO2lCQUNEO1lBQ0g7U0FDRDtJQUNIO0NBQ0Q7QUFFTSxNQUFNQyxnQkFBZ0JmLCtDQUFNQSxHQUNqQ0MsNERBQVFBLENBQ05DLDJEQUFPQSxDQUNMLENBQUNjLEtBQUtDLE1BQVM7UUFDYixnQkFBZ0I7UUFDaEJDLFFBQVFmO1FBQ1JnQixlQUFlO1FBQ2ZDLFlBQVksRUFBRTtRQUNkQyxXQUFXO1FBQ1hDLE9BQU87UUFFUCxVQUFVO1FBQ1ZDLFVBQVUsQ0FBQ0M7WUFDVCxNQUFNQyxXQUFrQjtnQkFDdEIsR0FBR0QsU0FBUztnQkFDWnBCLElBQUlzQixPQUFPQyxVQUFVO1lBQ3ZCO1lBRUFYLElBQUksQ0FBQ1ksUUFBVztvQkFDZFYsUUFBUTsyQkFBSVUsTUFBTVYsTUFBTTt3QkFBRU87cUJBQVM7Z0JBQ3JDLElBQUksT0FBTztRQUNiO1FBRUFJLGFBQWEsQ0FBQ3pCLElBQVkwQjtZQUN4QmQsSUFBSSxDQUFDWSxRQUFXO29CQUNkVixRQUFRVSxNQUFNVixNQUFNLENBQUNhLEdBQUcsQ0FBQ0MsQ0FB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LE9BRERzQixhQUFZLHNCQU16QnJCLE9BTGNELFVBQVMsa0VBS0osT0FBbkJDLG9CQUFtQjtBQWFyQiIsInNvdXJjZXMiOlsiL1VzZXJzL21hdHRoZXdzaW1vbi9Qcm9qZWN0cy9lYWMvZWFjL3N0b3JlL2FnZW50cy9pbmRleC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBBZ2VudCBTdG9yZVxuLy8gL1VzZXJzL21hdHRoZXdzaW1vbi9Qcm9qZWN0cy9lYWMvZWFjL3N0b3JlL2FnZW50cy9pbmRleC50c1xuXG5pbXBvcnQgeyBjcmVhdGUgfSBmcm9tICd6dXN0YW5kJztcbmltcG9ydCB7IGRldnRvb2xzLCBwZXJzaXN0IH0gZnJvbSAnenVzdGFuZC9taWRkbGV3YXJlJztcbmltcG9ydCB7IEFnZW50LCBBZ2VudEV4ZWN1dGlvbiwgQWdlbnRTdGF0ZSwgQWdlbnRUb29sLCBDb252ZXhNdXRhdGlvbnMgfSBmcm9tICcuL3R5cGVzJztcblxuLy8gSW5pdGlhbCBhZ2VudHMgLSBzdGFydGluZyB3aXRoIHRoZSBJbnN0cnVjdGlvbnMgYWdlbnRcbmNvbnN0IGluaXRpYWxBZ2VudHM6IEFnZW50W10gPSBbXG4gIHtcbiAgICBpZDogJ2luc3RydWN0aW9ucycsXG4gICAgbmFtZTogJ0luc3RydWN0aW9ucycsXG4gICAgZGVzY3JpcHRpb246ICdHZW5lcmF0ZSBhbmQgbWFpbnRhaW4gcHJvamVjdCBpbnN0cnVjdGlvbnMgYW5kIGRvY3VtZW50YXRpb24nLFxuICAgIGlzQWN0aXZlOiBmYWxzZSxcbiAgICBpY29uOiAn8J+TmicsXG4gICAgdG9vbHM6IFtcbiAgICAgIHtcbiAgICAgICAgaWQ6ICdnZW5lcmF0ZS1pbnN0cnVjdGlvbnMnLFxuICAgICAgICBuYW1lOiAnR2VuZXJhdGUgSW5zdHJ1Y3Rpb25zJyxcbiAgICAgICAgY29tbWFuZDogJy9pbnN0cnVjdGlvbnMnLFxuICAgICAgICBkZXNjcmlwdGlvbjogJ0NyZWF0ZSBhIG5ldyBpbnN0cnVjdGlvbiBkb2N1bWVudCBmb3IgdGhlIHByb2plY3QnLFxuICAgICAgICBwYXJhbWV0ZXJzOiBbXG4gICAgICAgICAge1xuICAgICAgICAgICAgbmFtZTogJ3RvcGljJyxcbiAgICAgICAgICAgIHR5cGU6ICdzdHJpbmcnLFxuICAgICAgICAgICAgZGVzY3JpcHRpb246ICdUb3BpYyBvciBhcmVhIHRvIGNyZWF0ZSBpbnN0cnVjdGlvbnMgZm9yJyxcbiAgICAgICAgICAgIHJlcXVpcmVkOiB0cnVlXG4gICAgICAgICAgfSxcbiAgICAgICAgICB7XG4gICAgICAgICAgICBuYW1lOiAnYXVkaWVuY2UnLFxuICAgICAgICAgICAgdHlwZTogJ3NlbGVjdCcsXG4gICAgICAgICAgICBkZXNjcmlwdGlvbjogJ1RhcmdldCBhdWRpZW5jZSBmb3IgdGhlIGluc3RydWN0aW9ucycsXG4gICAgICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgICAgICBvcHRpb25zOiBbJ2RldmVsb3BlcnMnLCAndXNlcnMnLCAnYWRtaW5pc3RyYXRvcnMnLCAnZ2VuZXJhbCddXG4gICAgICAgICAgfVxuICAgICAgICBdXG4gICAgICB9XG4gICAgXVxuICB9XG5dO1xuXG5leHBvcnQgY29uc3QgdXNlQWdlbnRTdG9yZSA9IGNyZWF0ZTxBZ2VudFN0YXRlPigpKFxuICBkZXZ0b29scyhcbiAgICBwZXJzaXN0KFxuICAgICAgKHNldCwgZ2V0KSA9PiAoe1xuICAgICAgICAvLyBJbml0aWFsIHN0YXRlXG4gICAgICAgIGFnZW50czogaW5pdGlhbEFnZW50cyxcbiAgICAgICAgYWN0aXZlQWdlbnRJZDogbnVsbCxcbiAgICAgICAgZXhlY3V0aW9uczogW10sXG4gICAgICAgIGlzTG9hZGluZzogZmFsc2UsXG4gICAgICAgIGVycm9yOiBudWxsLFxuXG4gICAgICAgIC8vIEFjdGlvbnNcbiAgICAgICAgYWRkQWdlbnQ6IChhZ2VudERhdGE6IE9taXQ8QWdlbnQsICdpZCc+KSA9PiB7XG4gICAgICAgICAgY29uc3QgbmV3QWdlbnQ6IEFnZW50ID0ge1xuICAgICAgICAgICAgLi4uYWdlbnREYXRhLFxuICAgICAgICAgICAgaWQ6IGNyeXB0by5yYW5kb21VVUlEKCksXG4gICAgICAgICAgfTtcbiAgICAgICAgICBcbiAgICAgICAgICBzZXQoKHN0YXRlKSA9PiAoe1xuICAgICAgICAgICAgYWdlbnRzOiBbLi4uc3RhdGUuYWdlbnRzLCBuZXdBZ2VudF1cbiAgICAgICAgICB9KSwgZmFsc2UsICdhZGRBZ2VudCcpO1xuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZUFnZW50OiAoaWQ6IHN0cmluZywgdXBkYXRlczogUGFydGlhbDxBZ2VudD4pID0+IHtcbiAgICAgICAgICBzZXQoKHN0YXRlKSA9PiAoe1xuICAgICAgICAgICAgYWdlbnRzOiBzdGF0ZS5hZ2VudHMubWFwKGFnZW50ID0+XG4gICAgICAgICAgICAgIGFnZW50LmlkID09PSBpZCA/IHsgLi4uYWdlbnQsIC4uLnVwZGF0ZXMgfSA6IGFnZW50XG4gICAgICAgICAgICApXG4gICAgICAgICAgfSksIGZhbHNlLCAndXBkYXRlQWdlbnQnKTtcbiAgICAgICAgfSxcblxuICAgICAgICBkZWxldGVBZ2VudDogKGlkOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICBzZXQoKHN0YXRlKSA9PiAoe1xuICAgICAgICAgICAgYWdlbnRzOiBzdGF0ZS5hZ2VudHMuZmlsdGVyKGFnZW50ID0+IGFnZW50LmlkICE9PSBpZCksXG4gICAgICAgICAgICBhY3RpdmVBZ2VudElkOiBzdGF0ZS5hY3RpdmVBZ2VudElkID09PSBpZCA/IG51bGwgOiBzdGF0ZS5hY3RpdmVBZ2VudElkXG4gICAgICAgICAgfSksIGZhbHNlLCAnZGVsZXRlQWdlbnQnKTtcbiAgICAgICAgfSxcblxuICAgICAgICBzZXRBY3RpdmVBZ2VudDogKGlkOiBzdHJpbmcgfCBudWxsKSA9PiB7XG4gICAgICAgICAgLy8gRmlyc3QgZGVhY3RpdmF0ZSBhbGwgYWdlbnRzXG4gICAgICAgICAgc2V0KChzdGF0ZSkgPT4gKHtcbiAgICAgICAgICAgIGFnZW50czogc3RhdGUuYWdlbnRzLm1hcChhZ2VudCA9PiAoeyAuLi5hZ2VudCwgaXNBY3RpdmU6IGZhbHNlIH0pKSxcbiAgICAgICAgICAgIGFjdGl2ZUFnZW50SWQ6IGlkXG4gICAgICAgICAgfSksIGZhbHNlLCAnZGVhY3RpdmF0ZUFsbEFnZW50cycpO1xuXG4gICAgICAgICAgLy8gVGhlbiBhY3RpdmF0ZSB0aGUgc2VsZWN0ZWQgYWdlbnQgaWYgcHJvdmlkZWRcbiAgICAgICAgICBpZiAoaWQpIHtcbiAgICAgICAgICAgIHNldCgoc3RhdGUpID0+ICh7XG4gICAgICAgICAgICAgIGFnZW50czogc3RhdGUuYWdlbnRzLm1hcChhZ2VudCA9PlxuICAgICAgICAgICAgICAgIGFnZW50LmlkID09PSBpZCA/IHsgLi4uYWdlbnQsIGlzQWN0aXZlOiB0cnVlIH0gOiBhZ2VudFxuICAgICAgICAgICAgICApXG4gICAgICAgICAgICB9KSwgZmFsc2UsICdhY3RpdmF0ZUFnZW50Jyk7XG4gICAgICAgICAgfVxuICAgICAgICB9LFxuXG4gICAgICAgIGV4ZWN1dGVBZ2VudFRvb2w6IGFzeW5jIChhZ2VudElkOiBzdHJpbmcsIHRvb2xJZDogc3RyaW5nLCBpbnB1dDogc3RyaW5nLCBjb252ZXhNdXRhdGlvbnM/OiBDb252ZXhNdXRhdGlvbnMpOiBQcm9taXNlPHN0cmluZz4gPT4ge1xuICAgICAgICAgIGNvbnN0IHsgYWdlbnRzLCBhZGRFeGVjdXRpb24gfSA9IGdldCgpO1xuICAgICAgICAgIGNvbnN0IGFnZW50ID0gYWdlbnRzLmZpbmQoYSA9PiBhLmlkID09PSBhZ2VudElkKTtcbiAgICAgICAgICBjb25zdCB0b29sID0gYWdlbnQ/LnRvb2xzLmZpbmQodCA9PiB0LmlkID09PSB0b29sSWQpO1xuXG4gICAgICAgICAgaWYgKCFhZ2VudCB8fCAhdG9vbCkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKGBBZ2VudCBvciB0b29sIG5vdCBmb3VuZDogJHthZ2VudElkfS8ke3Rvb2xJZH1gKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZXQoeyBpc0xvYWRpbmc6IHRydWUsIGVycm9yOiBudWxsIH0pO1xuXG4gICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIC8vIEFkZCBleGVjdXRpb24gcmVjb3JkXG4gICAgICAgICAgICBjb25zdCBleGVjdXRpb25JZCA9IGNyeXB0by5yYW5kb21VVUlEKCk7XG4gICAgICAgICAgICBhZGRFeGVjdXRpb24oe1xuICAgICAgICAgICAgICBhZ2VudElkLFxuICAgICAgICAgICAgICB0b29sSWQsXG4gICAgICAgICAgICAgIGlucHV0LFxuICAgICAgICAgICAgICBzdGF0dXM6ICdwZW5kaW5nJ1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIEV4ZWN1dGUgdGhlIGFnZW50IHRvb2wgYmFzZWQgb24gYWdlbnQgdHlwZVxuICAgICAgICAgICAgbGV0IHJlc3VsdCA9ICcnO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBpZiAoYWdlbnQuaWQgPT09ICdpbnN0cnVjdGlvbnMnKSB7XG4gICAgICAgICAgICAgIHJlc3VsdCA9IGF3YWl0IGV4ZWN1dGVJbnN0cnVjdGlvbnNBZ2VudCh0b29sLCBpbnB1dCwgY29udmV4TXV0YXRpb25zKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihgVW5rbm93biBhZ2VudCB0eXBlOiAke2FnZW50LmlkfWApO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyBVcGRhdGUgZXhlY3V0aW9uIHdpdGggcmVzdWx0XG4gICAgICAgICAgICBzZXQoKHN0YXRlKSA9PiAoe1xuICAgICAgICAgICAgICBleGVjdXRpb25zOiBzdGF0ZS5leGVjdXRpb25zLm1hcChleGVjID0+XG4gICAgICAgICAgICAgICAgZXhlYy5pZCA9PT0gZXhlY3V0aW9uSWQgXG4gICAgICAgICAgICAgICAgICA/IHsgLi4uZXhlYywgb3V0cHV0OiByZXN1bHQsIHN0YXR1czogJ2NvbXBsZXRlZCcgYXMgY29uc3QgfVxuICAgICAgICAgICAgICAgICAgOiBleGVjXG4gICAgICAgICAgICAgICksXG4gICAgICAgICAgICAgIGlzTG9hZGluZzogZmFsc2VcbiAgICAgICAgICAgIH0pKTtcblxuICAgICAgICAgICAgcmV0dXJuIHJlc3VsdDtcbiAgICAgICAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgICAgICAgY29uc3QgZXJyb3JNZXNzYWdlID0gZXJyb3IgaW5zdGFuY2VvZiBFcnJvciA/IGVycm9yLm1lc3NhZ2UgOiAnVW5rbm93biBlcnJvcic7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIFVwZGF0ZSBleGVjdXRpb24gd2l0aCBlcnJvclxuICAgICAgICAgICAgc2V0KChzdGF0ZSkgPT4gKHtcbiAgICAgICAgICAgICAgZXhlY3V0aW9uczogc3RhdGUuZXhlY3V0aW9ucy5tYXAoZXhlYyA9PlxuICAgICAgICAgICAgICAgIGV4ZWMuYWdlbnRJZCA9PT0gYWdlbnRJZCAmJiBleGVjLnRvb2xJZCA9PT0gdG9vbElkICYmIGV4ZWMuaW5wdXQgPT09IGlucHV0XG4gICAgICAgICAgICAgICAgICA/IHsgLi4uZXhlYywgc3RhdHVzOiAnZXJyb3InIGFzIGNvbnN0LCBlcnJvcjogZXJyb3JNZXNzYWdlIH1cbiAgICAgICAgICAgICAgICAgIDogZXhlY1xuICAgICAgICAgICAgICApLFxuICAgICAgICAgICAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgICBlcnJvcjogZXJyb3JNZXNzYWdlXG4gICAgICAgICAgICB9KSk7XG5cbiAgICAgICAgICAgIHRocm93IGVycm9yO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBhZGRFeGVjdXRpb246IChleGVjdXRpb25EYXRhOiBPbWl0PEFnZW50RXhlY3V0aW9uLCAnaWQnIHwgJ3RpbWVzdGFtcCc+KSA9PiB7XG4gICAgICAgICAgY29uc3QgZXhlY3V0aW9uOiBBZ2VudEV4ZWN1dGlvbiA9IHtcbiAgICAgICAgICAgIC4uLmV4ZWN1dGlvbkRhdGEsXG4gICAgICAgICAgICBpZDogY3J5cHRvLnJhbmRvbVVVSUQoKSxcbiAgICAgICAgICAgIHRpbWVzdGFtcDogbmV3IERhdGUoKVxuICAgICAgICAgIH07XG5cbiAgICAgICAgICBzZXQoKHN0YXRlKSA9PiAoe1xuICAgICAgICAgICAgZXhlY3V0aW9uczogW2V4ZWN1dGlvbiwgLi4uc3RhdGUuZXhlY3V0aW9ucy5zbGljZSgwLCA5OSldIC8vIEtlZXAgbGFzdCAxMDAgZXhlY3V0aW9uc1xuICAgICAgICAgIH0pLCBmYWxzZSwgJ2FkZEV4ZWN1dGlvbicpO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNsZWFyRXhlY3V0aW9uczogKCkgPT4ge1xuICAgICAgICAgIHNldCh7IGV4ZWN1dGlvbnM6IFtdIH0sIGZhbHNlLCAnY2xlYXJFeGVjdXRpb25zJyk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgc2V0RXJyb3I6IChlcnJvcjogc3RyaW5nIHwgbnVsbCkgPT4ge1xuICAgICAgICAgIHNldCh7IGVycm9yIH0sIGZhbHNlLCAnc2V0RXJyb3InKTtcbiAgICAgICAgfSxcblxuICAgICAgICBzZXRMb2FkaW5nOiAobG9hZGluZzogYm9vbGVhbikgPT4ge1xuICAgICAgICAgIHNldCh7IGlzTG9hZGluZzogbG9hZGluZyB9LCBmYWxzZSwgJ3NldExvYWRpbmcnKTtcbiAgICAgICAgfSxcblxuICAgICAgICByZXNldDogKCkgPT4ge1xuICAgICAgICAgIHNldCh7XG4gICAgICAgICAgICBhZ2VudHM6IGluaXRpYWxBZ2VudHMsXG4gICAgICAgICAgICBhY3RpdmVBZ2VudElkOiBudWxsLFxuICAgICAgICAgICAgZXhlY3V0aW9uczogW10sXG4gICAgICAgICAgICBpc0xvYWRpbmc6IGZhbHNlLFxuICAgICAgICAgICAgZXJyb3I6IG51bGxcbiAgICAgICAgICB9LCBmYWxzZSwgJ3Jlc2V0Jyk7XG4gICAgICAgIH1cbiAgICAgIH0pLFxuICAgICAge1xuICAgICAgICBuYW1lOiAnYWdlbnQtc3RvcmFnZScsXG4gICAgICAgIHBhcnRpYWxpemU6IChzdGF0ZSkgPT4gKHtcbiAgICAgICAgICBhZ2VudHM6IHN0YXRlLmFnZW50cyxcbiAgICAgICAgICBhY3RpdmVBZ2VudElkOiBzdGF0ZS5hY3RpdmVBZ2VudElkLFxuICAgICAgICAgIGV4ZWN1dGlvbnM6IHN0YXRlLmV4ZWN1dGlvbnMuc2xpY2UoMCwgNTApIC8vIE9ubHkgcGVyc2lzdCBsYXN0IDUwIGV4ZWN1dGlvbnNcbiAgICAgICAgfSlcbiAgICAgIH1cbiAgICApLFxuICAgIHsgbmFtZTogJ2FnZW50LXN0b3JlJyB9XG4gIClcbik7XG5cbi8vIEluc3RydWN0aW9ucyBBZ2VudCBUb29sIEV4ZWN1dGlvblxuYXN5bmMgZnVuY3Rpb24gZXhlY3V0ZUluc3RydWN0aW9uc0FnZW50KHRvb2w6IEFnZW50VG9vbCwgaW5wdXQ6IHN0cmluZywgY29udmV4TXV0YXRpb25zPzogQ29udmV4TXV0YXRpb25zKTogUHJvbWlzZTxzdHJpbmc+IHtcbiAgaWYgKHRvb2wuaWQgPT09ICdnZW5lcmF0ZS1pbnN0cnVjdGlvbnMnKSB7XG4gICAgLy8gQ2xlYW4gdGhlIGlucHV0IGJ5IHJlbW92aW5nIHRoZSBjb21tYW5kIGFuZCBleHRyYWN0aW5nIHRoZSBhY3R1YWwgaW5zdHJ1Y3Rpb25cbiAgICBsZXQgY2xlYW5JbnB1dCA9IGlucHV0LnRyaW0oKTtcbiAgICBcbiAgICAvLyBSZW1vdmUgdGhlIC9pbnN0cnVjdGlvbnMgY29tbWFuZCBpZiBwcmVzZW50XG4gICAgaWYgKGNsZWFuSW5wdXQuc3RhcnRzV2l0aCgnL2luc3RydWN0aW9ucycpKSB7XG4gICAgICBjbGVhbklucHV0ID0gY2xlYW5JbnB1dC5yZXBsYWNlKCcvaW5zdHJ1Y3Rpb25zJywgJycpLnRyaW0oKTtcbiAgICB9XG4gICAgXG4gICAgLy8gRXh0cmFjdCBhdWRpZW5jZSBpZiBzcGVjaWZpZWRcbiAgICBjb25zdCBhdWRpZW5jZU1hdGNoID0gY2xlYW5JbnB1dC5tYXRjaCgvYXVkaWVuY2U6XFxzKiguKz8pJC9pKTtcbiAgICBjb25zdCBhdWRpZW5jZSA9IGF1ZGllbmNlTWF0Y2g/LlsxXT8udHJpbSgpIHx8ICdhbGwgdXNlcnMnO1xuICAgIFxuICAgIC8vIFJlbW92ZSBhdWRpZW5jZSBzcGVjaWZpY2F0aW9uIGZyb20gdGhlIGluc3RydWN0aW9uIGNvbnRlbnRcbiAgICBjb25zdCBpbnN0cnVjdGlvbkNvbnRlbnQgPSBjbGVhbklucHV0LnJlcGxhY2UoL1xccythdWRpZW5jZTpcXHMqLiskL2ksICcnKS50cmltKCk7XG4gICAgXG4gICAgaWYgKCFpbnN0cnVjdGlvbkNvbnRlbnQpIHtcbiAgICAgIHJldHVybiBg4p2MIFBsZWFzZSBwcm92aWRlIGluc3RydWN0aW9uIGNvbnRlbnQuIEV4YW1wbGU6IC9pbnN0cnVjdGlvbnMgYWx3YXlzIHNheSB3ZWxjb21lIHRvIHRoZSBFQUNgO1xuICAgIH1cbiAgICBcbiAgICAvLyBHZW5lcmF0ZSBhIGJyaWVmIGZpbGVuYW1lICgxLTIgd29yZHMpIGJhc2VkIG9uIHRoZSBhY3R1YWwgdXNlciByZXF1ZXN0XG4gICAgY29uc3QgYnJpZWZUaXRsZSA9IGdlbmVyYXRlQnJpZWZUaXRsZShpbnN0cnVjdGlvbkNvbnRlbnQpO1xuICAgIGNvbnN0IGZpbGVuYW1lID0gYCR7YnJpZWZUaXRsZX0ubWRgO1xuICAgIFxuICAgIC8vIENyZWF0ZSB0aGUgYWN0dWFsIGluc3RydWN0aW9uIGRvY3VtZW50IGNvbnRlbnRcbiAgICBjb25zdCBkb2N1bWVudENvbnRlbnQgPSBnZW5lcmF0ZUluc3RydWN0aW9uRG9jdW1lbnQoaW5zdHJ1Y3Rpb25Db250ZW50LCBhdWRpZW5jZSk7XG4gICAgXG4gICAgdHJ5IHtcbiAgICAgIC8vIFRyeSB0byB1c2UgQ29udmV4IG11dGF0aW9ucyBpZiBhdmFpbGFibGVcbiAgICAgIGlmIChjb252ZXhNdXRhdGlvbnMpIHtcbiAgICAgICAgLy8gRW5zdXJlIEluc3RydWN0aW9ucyBwcm9qZWN0IGV4aXN0c1xuICAgICAgICBhd2FpdCBjb252ZXhNdXRhdGlvbnMuZW5zdXJlSW5zdHJ1Y3Rpb25zUHJvamVjdCgpO1xuICAgICAgICBcbiAgICAgICAgLy8gQ3JlYXRlIHRoZSBpbnN0cnVjdGlvbiBmaWxlIGluIENvbnZleCBkYXRhYmFzZVxuICAgICAgICBhd2FpdCBjb252ZXhNdXRhdGlvbnMuY3JlYXRlSW5zdHJ1Y3Rpb25GaWxlKHtcbiAgICAgICAgICBuYW1lOiBmaWxlbmFtZSxcbiAgICAgICAgICBjb250ZW50OiBkb2N1bWVudENvbnRlbnQsXG4gICAgICAgICAgdG9waWM6IGJyaWVmVGl0bGUsXG4gICAgICAgICAgYXVkaWVuY2U6IGF1ZGllbmNlLFxuICAgICAgICB9KTtcbiAgICAgICAgXG4gICAgICAgIC8vIFN0b3JlIGluIGxvY2FsIGVkaXRvciBmb3IgaW1tZWRpYXRlIGRpc3BsYXkgaW4gdGhlIGV4aXN0aW5nIEluc3RydWN0aW9ucyBmb2xkZXJcbiAgICAgICAgY29uc3QgeyB1c2VFZGl0b3JTdG9yZSB9ID0gYXdhaXQgaW1wb3J0KCdAL3N0b3JlJyk7XG4gICAgICAgIGNvbnN0IHsgY3JlYXRlTmV3RmlsZSB9ID0gdXNlRWRpdG9yU3RvcmUuZ2V0U3RhdGUoKTtcbiAgICAgICAgXG4gICAgICAgIC8vIENyZWF0ZSBmaWxlIGluIHRoZSBJbnN0cnVjdGlvbnMgZm9sZGVyIHVzaW5nIHRoZSBjb3JyZWN0IGZvbGRlciBJRFxuICAgICAgICBjcmVhdGVOZXdGaWxlKGZpbGVuYW1lLCAnbWFya2Rvd24nLCAncHJvamVjdCcsICdpbnN0cnVjdGlvbnMtZm9sZGVyJyk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gYOKchSBJbnN0cnVjdGlvbnMgZG9jdW1lbnQgY3JlYXRlZCBzdWNjZXNzZnVsbHkhXG5cbioqRmlsZSoqOiAke2ZpbGVuYW1lfVxuKipJbnN0cnVjdGlvbioqOiAke2luc3RydWN0aW9uQ29udGVudH1cbioqQXVkaWVuY2UqKjogJHthdWRpZW5jZX1cbioqTG9jYXRpb24qKjogSW5zdHJ1Y3Rpb25zIHByb2plY3QgZm9sZGVyIChzeW5jZWQgdG8gZGF0YWJhc2UpXG5cblRoZSBpbnN0cnVjdGlvbiBoYXMgYmVlbiBhZGRlZCB0byB5b3VyIEluc3RydWN0aW9ucyBmb2xkZXIgYW5kIHdpbGwgYmUgdXNlZCBhcyBjb250ZXh0IGZvciBhbGwgZnV0dXJlIEFJIGNvbnZlcnNhdGlvbnMuXG5cbioqUHJldmlldyoqOlxuJHtkb2N1bWVudENvbnRlbnQuc3Vic3RyaW5nKDAsIDE1MCl9Li4uYDtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIEZhbGxiYWNrIHRvIGxvY2FsIGNyZWF0aW9uIGlmIENvbnZleCBtdXRhdGlvbnMgbm90IGF2YWlsYWJsZVxuICAgICAgICBjb25zdCB7IHVzZUVkaXRvclN0b3JlIH0gPSBhd2FpdCBpbXBvcnQoJ0Avc3RvcmUnKTtcbiAgICAgICAgY29uc3QgeyBjcmVhdGVOZXdGaWxlIH0gPSB1c2VFZGl0b3JTdG9yZS5nZXRTdGF0ZSgpO1xuICAgICAgICBjcmVhdGVOZXdGaWxlKGZpbGVuYW1lLCAnbWFya2Rvd24nLCAncHJvamVjdCcsICdpbnN0cnVjdGlvbnMtZm9sZGVyJyk7XG4gICAgICAgIFxuICAgICAgICByZXR1cm4gYOKchSBJbnN0cnVjdGlvbnMgZG9jdW1lbnQgY3JlYXRlZCBsb2NhbGx5IVxuXG4qKkZpbGUqKjogJHtmaWxlbmFtZX1cbioqSW5zdHJ1Y3Rpb24qKjogJHtpbnN0cnVjdGlvbkNvbnRlbnR9XG4qKkF1ZGllbmNlKio6ICR7YXVkaWVuY2V9XG4qKkxvY2F0aW9uKio6IEluc3RydWN0aW9ucyBwcm9qZWN0IGZvbGRlclxuXG5UaGUgaW5zdHJ1Y3Rpb24gaGFzIGJlZW4gYWRkZWQgdG8geW91ciBJbnN0cnVjdGlvbnMgZm9sZGVyLlxuXG4qKk5vdGUqKjogVG8gZW5hYmxlIGRhdGFiYXNlIHN5bmMsIHVzZSB0aGUgSW5zdHJ1Y3Rpb25zIGFnZW50IGZyb20gYSBjb25uZWN0ZWQgY29tcG9uZW50LmA7XG4gICAgICB9XG4gICAgICBcbiAgICB9IGNhdGNoIChlcnJvcikge1xuICAgICAgY29uc29sZS5lcnJvcignRXJyb3IgY3JlYXRpbmcgaW5zdHJ1Y3Rpb24gZmlsZTonLCBlcnJvcik7XG4gICAgICBcbiAgICAgIHJldHVybiBg4p2MIEZhaWxlZCB0byBjcmVhdGUgaW5zdHJ1Y3Rpb24gZG9jdW1lbnRcblxuKipFcnJvcioqOiAke2Vycm9yIGluc3RhbmNlb2YgRXJyb3IgPyBlcnJvci5tZXNzYWdlIDogJ1Vua25vd24gZXJyb3InfVxuKipJbnN0cnVjdGlvbioqOiAke2luc3RydWN0aW9uQ29udGVudH1cblxuUGxlYXNlIHRyeSBhZ2FpbiBvciBjb250YWN0IHN1cHBvcnQgaWYgdGhlIGlzc3VlIHBlcnNpc3RzLmA7XG4gICAgfVxuICB9XG5cbiAgdGhyb3cgbmV3IEVycm9yKGBVbmtub3duIHRvb2w6ICR7dG9vbC5pZH1gKTtcbn1cblxuLy8gR2VuZXJhdGUgYSBicmllZiB0aXRsZSAoMS0yIHdvcmRzKSBmcm9tIGluc3RydWN0aW9uIGNvbnRlbnRcbmZ1bmN0aW9uIGdlbmVyYXRlQnJpZWZUaXRsZShpbnN0cnVjdGlvbkNvbnRlbnQ6IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IGNvbnRlbnQgPSBpbnN0cnVjdGlvbkNvbnRlbnQudG9Mb3dlckNhc2UoKTtcbiAgXG4gIC8vIENvbW1vbiBwYXR0ZXJucyB0byBleHRyYWN0IGtleSBjb25jZXB0c1xuICBpZiAoY29udGVudC5pbmNsdWRlcygnd2VsY29tZScpIHx8IGNvbnRlbnQuaW5jbHVkZXMoJ2dyZWV0aW5nJykpIHtcbiAgICByZXR1cm4gJ3dlbGNvbWUtZ3JlZXRpbmcnO1xuICB9XG4gIGlmIChjb250ZW50LmluY2x1ZGVzKCdzYXknKSAmJiBjb250ZW50LmluY2x1ZGVzKCdoZWxsbycpKSB7XG4gICAgcmV0dXJuICdoZWxsby1ncmVldGluZyc7XG4gIH1cbiAgaWYgKGNvbnRlbnQuaW5jbHVkZXMoJ3Byb2Zlc3Npb25hbCcpIHx8IGNvbnRlbnQuaW5jbHVkZXMoJ2Zvcm1hbCcpKSB7XG4gICAgcmV0dXJuICdwcm9mZXNzaW9uYWwtdG9uZSc7XG4gIH1cbiAgaWYgKGNvbnRlbnQuaW5jbHVkZXMoJ2ZyaWVuZGx5JykgfHwgY29udGVudC5pbmNsdWRlcygnY2FzdWFsJykpIHtcbiAgICByZXR1cm4gJ2ZyaWVuZGx5LXRvbmUnO1xuICB9XG4gIGlmIChjb250ZW50LmluY2x1ZGVzKCdkZXRhaWxlZCcpIHx8IGNvbnRlbnQuaW5jbHVkZXMoJ2V4cGxhbmF0aW9uJykpIHtcbiAgICByZXR1cm4gJ2RldGFpbGVkLXJlc3BvbnNlcyc7XG4gIH1cbiAgaWYgKGNvbnRlbnQuaW5jbHVkZXMoJ2NvZGUnKSB8fCBjb250ZW50LmluY2x1ZGVzKCdleGFtcGxlJykpIHtcbiAgICByZXR1cm4gJ2NvZGUtZXhhbXBsZXMnO1xuICB9XG4gIGlmIChjb250ZW50LmluY2x1ZGVzKCd0eXBlc2NyaXB0JykgfHwgY29udGVudC5pbmNsdWRlcygncmVhY3QnKSkge1xuICAgIHJldHVybiAndGVjaC1mb2N1cyc7XG4gIH1cbiAgaWYgKGNvbnRlbnQuaW5jbHVkZXMoJ21vYmlsZScpIHx8IGNvbnRlbnQuaW5jbHVkZXMoJ3Jlc3BvbnNpdmUnKSkge1xuICAgIHJldHVybiAnbW9iaWxlLWZpcnN0JztcbiAgfVxuICBpZiAoY29udGVudC5pbmNsdWRlcygnZXJyb3InKSB8fCBjb250ZW50LmluY2x1ZGVzKCdkZWJ1ZycpKSB7XG4gICAgcmV0dXJuICdlcnJvci1oYW5kbGluZyc7XG4gIH1cbiAgaWYgKGNvbnRlbnQuaW5jbHVkZXMoJ3NlY3VyaXR5JykgfHwgY29udGVudC5pbmNsdWRlcygnc2FmZScpKSB7XG4gICAgcmV0dXJuICdzZWN1cml0eS1mb2N1cyc7XG4gIH1cbiAgXG4gIC8vIEV4dHJhY3QgZmlyc3QgbWVhbmluZ2Z1bCB3b3JkIG9yIHBocmFzZVxuICBjb25zdCB3b3JkcyA9IGNvbnRlbnQucmVwbGFjZSgvW15cXHdcXHNdL2csICcnKS5zcGxpdCgnICcpLmZpbHRlcih3b3JkID0+IFxuICAgIHdvcmQubGVuZ3RoID4gMiAmJiBcbiAgICAhWyd0aGUnLCAnYW5kJywgJ2ZvcicsICd3aXRoJywgJ3RoYXQnLCAndGhpcycsICdhbHdheXMnLCAnbmV2ZXInLCAnc2hvdWxkJywgJ3dpbGwnLCAnY2FuJywgJ21heSddLmluY2x1ZGVzKHdvcmQpXG4gICk7XG4gIFxuICBpZiAod29yZHMubGVuZ3RoID49IDIpIHtcbiAgICByZXR1cm4gYCR7d29yZHNbMF19LSR7d29yZHNbMV19YDtcbiAgfSBlbHNlIGlmICh3b3Jkcy5sZW5ndGggPT09IDEpIHtcbiAgICByZXR1cm4gYCR7d29yZHNbMF19LXJ1bGVgO1xuICB9XG4gIFxuICByZXR1cm4gJ2dlbmVyYWwtaW5zdHJ1Y3Rpb24nO1xufVxuXG4vLyBHZW5lcmF0ZSB0aGUgYWN0dWFsIGluc3RydWN0aW9uIGRvY3VtZW50IGNvbnRlbnRcbmZ1bmN0aW9uIGdlbmVyYXRlSW5zdHJ1Y3Rpb25Eb2N1bWVudChpbnN0cnVjdGlvbkNvbnRlbnQ6IHN0cmluZywgYXVkaWVuY2U6IHN0cmluZyk6IHN0cmluZyB7XG4gIGNvbnN0IGN1cnJlbnREYXRlID0gbmV3IERhdGUoKS50b0xvY2FsZURhdGVTdHJpbmcoKTtcbiAgXG4gIHJldHVybiBgIyBBSSBJbnN0cnVjdGlvblxuXG4qKkNyZWF0ZWQqKjogJHtjdXJyZW50RGF0ZX0gIFxuKipBdWRpZW5jZSoqOiAke2F1ZGllbmNlfSAgXG4qKlByb2plY3QqKjogRUFDIEZpbmFuY2lhbCBEYXNoYm9hcmRcblxuIyMgSW5zdHJ1Y3Rpb25cblxuJHtpbnN0cnVjdGlvbkNvbnRlbnR9XG5cbiMjIENvbnRleHRcblxuVGhpcyBpbnN0cnVjdGlvbiBzaG91bGQgYmUgYXBwbGllZCB0byBhbGwgcmVzcG9uc2VzIHdoZW4gYXNzaXN0aW5nIHdpdGggdGhlIEVBQyBGaW5hbmNpYWwgRGFzaGJvYXJkIHByb2plY3QuXG5cbiMjIEltcGxlbWVudGF0aW9uXG5cblRoZSBBSSBhc3Npc3RhbnQgc2hvdWxkIGluY29ycG9yYXRlIHRoaXMgaW5zdHJ1Y3Rpb24gaW50byBldmVyeSByZXNwb25zZSwgcmVnYXJkbGVzcyBvZiB3aGV0aGVyIE1DUCB0b29scyBvciBhZ2VudCB0b29scyBhcmUgYmVpbmcgdXNlZC5cblxuLS0tXG5cbipUaGlzIGluc3RydWN0aW9uIGlzIGF1dG9tYXRpY2FsbHkgbG9hZGVkIGFzIGNvbnRleHQgZm9yIGFsbCBBSSBjb252ZXJzYXRpb25zLipgO1xufVxuIl0sIm5hbWVzIjpbImNyZWF0ZSIsImRldnRvb2xzIiwicGVyc2lzdCIsImluaXRpYWxBZ2VudHMiLCJpZCIsIm5hbWUiLCJkZXNjcmlwdGlvbiIsImlzQWN0aXZlIiwiaWNvbiIsInRvb2xzIiwiY29tbWFuZCIsInBhcmFtZXRlcnMiLCJ0eXBlIiwicmVxdWlyZWQiLCJvcHRpb25zIiwidXNlQWdlbnRTdG9yZSIsInNldCIsImdldCIsImFnZW50cyIsImFjdGl2ZUFnZW50SWQiLCJleGVjdXRpb25zIiwiaXNMb2FkaW5nIiwiZXJyb3IiLCJhZGRBZ2VudCIsImFnZW50RGF0YSIsIm5ld0FnZW50IiwiY3J5cHRvIiwicmFuZG9tVVVJRCIsInN0YXRlIiwidXBkYXRlQWdlbnQiLCJ1cGRhdGVzIiwibWFwIiwiYWdlbnQiLCJkZWxldGVBZ2VudCIsImZpbHRlciIsInNldEFjdGl2ZUFnZW50IiwiZXhlY3V0ZUFnZW50VG9vbCIsImFnZW50SWQiLCJ0b29sSWQiLCJpbnB1dCIsImNvbnZleE11dGF0aW9ucyIsImFkZEV4ZWN1dGlvbiIsImZpbmQiLCJhIiwidG9vbCIsInQiLCJFcnJvciIsImV4ZWN1dGlvbklkIiwic3RhdHVzIiwicmVzdWx0IiwiZXhlY3V0ZUluc3RydWN0aW9uc0FnZW50IiwiZXhlYyIsIm91dHB1dCIsImVycm9yTWVzc2FnZSIsIm1lc3NhZ2UiLCJleGVjdXRpb25EYXRhIiwiZXhlY3V0aW9uIiwidGltZXN0YW1wIiwiRGF0ZSIsInNsaWNlIiwiY2xlYXJFeGVjdXRpb25zIiwic2V0RXJyb3IiLCJzZXRMb2FkaW5nIiwibG9hZGluZyIsInJlc2V0IiwicGFydGlhbGl6ZSIsImF1ZGllbmNlTWF0Y2giLCJjbGVhbklucHV0IiwidHJpbSIsInN0YXJ0c1dpdGgiLCJyZXBsYWNlIiwibWF0Y2giLCJhdWRpZW5jZSIsImluc3RydWN0aW9uQ29udGVudCIsImJyaWVmVGl0bGUiLCJnZW5lcmF0ZUJyaWVmVGl0bGUiLCJmaWxlbmFtZSIsImRvY3VtZW50Q29udGVudCIsImdlbmVyYXRlSW5zdHJ1Y3Rpb25Eb2N1bWVudCIsImVuc3VyZUluc3RydWN0aW9uc1Byb2plY3QiLCJjcmVhdGVJbnN0cnVjdGlvbkZpbGUiLCJjb250ZW50IiwidG9waWMiLCJ1c2VFZGl0b3JTdG9yZSIsImNyZWF0ZU5ld0ZpbGUiLCJnZXRTdGF0ZSIsInN1YnN0cmluZyIsImNvbnNvbGUiLCJ0b0xvd2VyQ2FzZSIsImluY2x1ZGVzIiwid29yZHMiLCJzcGxpdCIsIndvcmQiLCJsZW5ndGgiLCJjdXJyZW50RGF0ZSIsInRvTG9jYWxlRGF0ZVN0cmluZyJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./store/agents/index.ts\n"));

/***/ })

});