"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./store/editor/index.ts":
/*!*******************************!*\
  !*** ./store/editor/index.ts ***!
  \*******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useEditorStore: () => (/* binding */ useEditorStore)\n/* harmony export */ });\n/* harmony import */ var _barrel_optimize_names_AtSign_Braces_Camera_FileCode_FileSpreadsheet_FileText_FileType_Hash_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! __barrel_optimize__?names=AtSign,Braces,Camera,FileCode,FileSpreadsheet,FileText,FileType,Hash,MessageSquare!=!lucide-react */ \"(app-pages-browser)/../node_modules/.pnpm/lucide-react@0.525.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/file-code.js\");\n/* harmony import */ var _barrel_optimize_names_AtSign_Braces_Camera_FileCode_FileSpreadsheet_FileText_FileType_Hash_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! __barrel_optimize__?names=AtSign,Braces,Camera,FileCode,FileSpreadsheet,FileText,FileType,Hash,MessageSquare!=!lucide-react */ \"(app-pages-browser)/../node_modules/.pnpm/lucide-react@0.525.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/braces.js\");\n/* harmony import */ var _barrel_optimize_names_AtSign_Braces_Camera_FileCode_FileSpreadsheet_FileText_FileType_Hash_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! __barrel_optimize__?names=AtSign,Braces,Camera,FileCode,FileSpreadsheet,FileText,FileType,Hash,MessageSquare!=!lucide-react */ \"(app-pages-browser)/../node_modules/.pnpm/lucide-react@0.525.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/file-spreadsheet.js\");\n/* harmony import */ var _barrel_optimize_names_AtSign_Braces_Camera_FileCode_FileSpreadsheet_FileText_FileType_Hash_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! __barrel_optimize__?names=AtSign,Braces,Camera,FileCode,FileSpreadsheet,FileText,FileType,Hash,MessageSquare!=!lucide-react */ \"(app-pages-browser)/../node_modules/.pnpm/lucide-react@0.525.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/file-text.js\");\n/* harmony import */ var _barrel_optimize_names_AtSign_Braces_Camera_FileCode_FileSpreadsheet_FileText_FileType_Hash_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! __barrel_optimize__?names=AtSign,Braces,Camera,FileCode,FileSpreadsheet,FileText,FileType,Hash,MessageSquare!=!lucide-react */ \"(app-pages-browser)/../node_modules/.pnpm/lucide-react@0.525.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/file-type.js\");\n/* harmony import */ var _barrel_optimize_names_AtSign_Braces_Camera_FileCode_FileSpreadsheet_FileText_FileType_Hash_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! __barrel_optimize__?names=AtSign,Braces,Camera,FileCode,FileSpreadsheet,FileText,FileType,Hash,MessageSquare!=!lucide-react */ \"(app-pages-browser)/../node_modules/.pnpm/lucide-react@0.525.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/message-square.js\");\n/* harmony import */ var _barrel_optimize_names_AtSign_Braces_Camera_FileCode_FileSpreadsheet_FileText_FileType_Hash_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! __barrel_optimize__?names=AtSign,Braces,Camera,FileCode,FileSpreadsheet,FileText,FileType,Hash,MessageSquare!=!lucide-react */ \"(app-pages-browser)/../node_modules/.pnpm/lucide-react@0.525.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/hash.js\");\n/* harmony import */ var _barrel_optimize_names_AtSign_Braces_Camera_FileCode_FileSpreadsheet_FileText_FileType_Hash_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! __barrel_optimize__?names=AtSign,Braces,Camera,FileCode,FileSpreadsheet,FileText,FileType,Hash,MessageSquare!=!lucide-react */ \"(app-pages-browser)/../node_modules/.pnpm/lucide-react@0.525.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/camera.js\");\n/* harmony import */ var _barrel_optimize_names_AtSign_Braces_Camera_FileCode_FileSpreadsheet_FileText_FileType_Hash_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! __barrel_optimize__?names=AtSign,Braces,Camera,FileCode,FileSpreadsheet,FileText,FileType,Hash,MessageSquare!=!lucide-react */ \"(app-pages-browser)/../node_modules/.pnpm/lucide-react@0.525.0_react@18.3.1/node_modules/lucide-react/dist/esm/icons/at-sign.js\");\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/../node_modules/.pnpm/zustand@5.0.6_@types+react@19.1.8_react@18.3.1_use-sync-external-store@1.5.0_react@18.3.1_/node_modules/zustand/esm/react.mjs\");\n/* harmony import */ var zustand_middleware__WEBPACK_IMPORTED_MODULE_10__ = __webpack_require__(/*! zustand/middleware */ \"(app-pages-browser)/../node_modules/.pnpm/zustand@5.0.6_@types+react@19.1.8_react@18.3.1_use-sync-external-store@1.5.0_react@18.3.1_/node_modules/zustand/esm/middleware.mjs\");\n// Editor Store\n// /Users/matthewsimon/Projects/EAC/eac/store/editor/index.ts\n\n\n\n// Helper function to get icon based on file type\nconst getFileIcon = (type)=>{\n    switch(type){\n        case 'typescript':\n            return _barrel_optimize_names_AtSign_Braces_Camera_FileCode_FileSpreadsheet_FileText_FileType_Hash_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n        case 'javascript':\n            return _barrel_optimize_names_AtSign_Braces_Camera_FileCode_FileSpreadsheet_FileText_FileType_Hash_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n        case 'json':\n            return _barrel_optimize_names_AtSign_Braces_Camera_FileCode_FileSpreadsheet_FileText_FileType_Hash_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\n        case 'excel':\n            return _barrel_optimize_names_AtSign_Braces_Camera_FileCode_FileSpreadsheet_FileText_FileType_Hash_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\n        case 'markdown':\n            return _barrel_optimize_names_AtSign_Braces_Camera_FileCode_FileSpreadsheet_FileText_FileType_Hash_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_3__[\"default\"];\n        case 'pdf':\n            return _barrel_optimize_names_AtSign_Braces_Camera_FileCode_FileSpreadsheet_FileText_FileType_Hash_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n        case 'generals':\n            return _barrel_optimize_names_AtSign_Braces_Camera_FileCode_FileSpreadsheet_FileText_FileType_Hash_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_3__[\"default\"];\n        case 'percent-complete':\n            return _barrel_optimize_names_AtSign_Braces_Camera_FileCode_FileSpreadsheet_FileText_FileType_Hash_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\n        case 'schedule':\n            return _barrel_optimize_names_AtSign_Braces_Camera_FileCode_FileSpreadsheet_FileText_FileType_Hash_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\n        case 'materials':\n            return _barrel_optimize_names_AtSign_Braces_Camera_FileCode_FileSpreadsheet_FileText_FileType_Hash_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\n        case 'facebook':\n            return _barrel_optimize_names_AtSign_Braces_Camera_FileCode_FileSpreadsheet_FileText_FileType_Hash_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_5__[\"default\"];\n        case 'reddit':\n            return _barrel_optimize_names_AtSign_Braces_Camera_FileCode_FileSpreadsheet_FileText_FileType_Hash_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_6__[\"default\"];\n        case 'instagram':\n            return _barrel_optimize_names_AtSign_Braces_Camera_FileCode_FileSpreadsheet_FileText_FileType_Hash_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_7__[\"default\"];\n        case 'x':\n            return _barrel_optimize_names_AtSign_Braces_Camera_FileCode_FileSpreadsheet_FileText_FileType_Hash_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_8__[\"default\"];\n        default:\n            return _barrel_optimize_names_AtSign_Braces_Camera_FileCode_FileSpreadsheet_FileText_FileType_Hash_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n    }\n};\n// Helper function to get file extension\n// Helper function to get file extension\nconst getFileExtension = (type)=>{\n    switch(type){\n        case 'typescript':\n            return '.ts';\n        case 'javascript':\n            return '.js';\n        case 'json':\n            return '.json';\n        case 'excel':\n            return '.xlsx';\n        case 'pdf':\n            return '.pdf';\n        case 'generals':\n            return '.generals';\n        case 'percent-complete':\n            return '.percent';\n        case 'schedule':\n            return '.schedule';\n        case 'materials':\n            return '.materials';\n        case 'facebook':\n            return '.facebook';\n        case 'reddit':\n            return '.reddit';\n        case 'instagram':\n            return '.instagram';\n        case 'x':\n            return '.x';\n        default:\n            return '.txt';\n    }\n};\n// Helper function to generate default content for new files\nconst getDefaultContent = (type, name)=>{\n    switch(type){\n        case 'typescript':\n            return \"// \".concat(name, \"\\n// Auto-generated TypeScript file\\n\\nimport React from 'react';\\n\\ninterface \").concat(name.replace(/[^a-zA-Z0-9]/g, ''), \"Props {\\n  // Define props here\\n}\\n\\nexport function \").concat(name.replace(/[^a-zA-Z0-9]/g, ''), \"({ }: \").concat(name.replace(/[^a-zA-Z0-9]/g, ''), 'Props) {\\n  return (\\n    <div className=\"p-4\">\\n      <h1 className=\"text-xl font-bold\">New Component: ').concat(name, '</h1>\\n      <p className=\"text-gray-600\">Start building your component here...</p>\\n    </div>\\n  );\\n}');\n        case 'javascript':\n            return \"// \".concat(name, \"\\n// Auto-generated JavaScript file\\n\\nexport function \").concat(name.replace(/[^a-zA-Z0-9]/g, ''), \"() {\\n  return {\\n    message: 'Hello from \").concat(name, \"!',\\n    data: []\\n  };\\n}\");\n        case 'json':\n            return '{\\n  \"name\": \"'.concat(name, '\",\\n  \"description\": \"Auto-generated JSON file\",\\n  \"version\": \"1.0.0\",\\n  \"data\": {}\\n}');\n        case 'markdown':\n            return \"Start writing your content here...\";\n        case 'generals':\n            return \"// \".concat(name, \" - Project General Information\\n// This file contains general project details and financial information\\n// Created on: \").concat(new Date().toISOString(), \"\\n\\nProject: \").concat(name, \"\\nStatus: Active\\nCreated: \").concat(new Date().toLocaleDateString(), \"\\n\\n// This file will display the project generals module interface\");\n        case 'percent-complete':\n            return \"// \".concat(name, \" - Percent Complete Tracker\\n// This file contains project completion tracking data\\n// Created on: \").concat(new Date().toISOString(), \"\\n\\nProject: \").concat(name, \"\\nType: Percent Complete Tracker\\nCreated: \").concat(new Date().toLocaleDateString(), \"\\n\\n// This file will display the percent complete tracking interface\");\n        case 'schedule':\n            return \"// \".concat(name, \" - Project Schedule\\n// This file contains project schedule and timeline data\\n// Created on: \").concat(new Date().toISOString(), \"\\n\\nProject: \").concat(name, \"\\nType: Project Schedule\\nCreated: \").concat(new Date().toLocaleDateString(), \"\\n\\n// This file will display the project schedule interface with Gantt chart\");\n        case 'materials':\n            return \"// \".concat(name, \" - Materials Management\\n// This file contains materials tracking and management data\\n// Created on: \").concat(new Date().toISOString(), \"\\n\\nProject: \").concat(name, \"\\nType: Materials Management\\nCreated: \").concat(new Date().toLocaleDateString(), \"\\n\\n// This file will display the materials management interface with manufactured and miscellaneous materials\");\n        case 'facebook':\n            return \"# \".concat(name, \" - Facebook Post\\nPlatform: Facebook\\nCreated: \").concat(new Date().toLocaleDateString(), \"\\n\\n## Post Content\\nWrite your Facebook post content here...\\n\\n## Settings\\n- Audience: Public\\n- Schedule: Now\\n- Hashtags: #example\\n\\n## Media\\n- Images: []\\n- Videos: []\\n\\n## Analytics\\n- Engagement: 0\\n- Reach: 0\\n- Clicks: 0\");\n        case 'reddit':\n            return \"# \".concat(name, \" - Reddit Post\\nPlatform: Reddit\\nCreated: \").concat(new Date().toLocaleDateString(), \"\\n\\n## Post Content\\nWrite your Reddit post content here...\\n\\n## Settings\\n- Subreddit: r/example\\n- Post Type: Text/Link/Image\\n- Flair: Discussion\\n- NSFW: No\\n\\n## Media\\n- Images: []\\n- Links: []\\n\\n## Analytics\\n- Upvotes: 0\\n- Comments: 0\\n- Awards: 0\");\n        case 'instagram':\n            return \"# \".concat(name, \" - Instagram Post\\nPlatform: Instagram\\nCreated: \").concat(new Date().toLocaleDateString(), \"\\n\\n## Post Content\\nWrite your Instagram post content here...\\n\\n## Settings\\n- Post Type: Feed/Story/Reel\\n- Location: City, Country\\n- Alt Text: Describe image\\n- Comment Settings: Public\\n\\n## Media\\n- Images: []\\n- Videos: []\\n\\n## Hashtags\\n#hashtag1 #hashtag2 #hashtag3\\n\\n## Analytics\\n- Likes: 0\\n- Comments: 0\\n- Shares: 0\\n- Reach: 0\");\n        case 'x':\n            return \"# \".concat(name, \" - X/Twitter Post\\nPlatform: X (Twitter)\\nCreated: \").concat(new Date().toLocaleDateString(), \"\\n\\n## Post Content\\nWrite your X post content here... (280 character limit)\\n\\n## Settings\\n- Reply Settings: Everyone\\n- Schedule: Now\\n- Thread: Single Tweet\\n\\n## Media\\n- Images: []\\n- Videos: []\\n- GIFs: []\\n\\n## Analytics\\n- Impressions: 0\\n- Engagements: 0\\n- Retweets: 0\\n- Likes: 0\\n- Replies: 0\");\n        default:\n            return \"# \".concat(name, \"\\n\\nThis is a new file created in the EAC Dashboard.\\nCreated on: \").concat(new Date().toISOString());\n    }\n};\n// Initial project files\nconst initialProjectFiles = [\n    {\n        id: 'project-overview',\n        name: 'Project-Overview.md',\n        icon: _barrel_optimize_names_AtSign_Braces_Camera_FileCode_FileSpreadsheet_FileText_FileType_Hash_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n        type: 'markdown',\n        category: 'project',\n        content: \"# Project Overview\\n\\n## Current Projects\\n- Write your project details here...\\n- Track progress and milestones\\n- Document requirements and specifications\\n\\n## Notes\\nStart planning your projects here...\",\n        filePath: '/eac-projects/Project-Overview.md',\n        createdAt: new Date(),\n        modifiedAt: new Date()\n    }\n];\n// Initial financial files\nconst initialFinancialFiles = [\n    {\n        id: 'financial-notes',\n        name: 'Financial-Notes.md',\n        icon: _barrel_optimize_names_AtSign_Braces_Camera_FileCode_FileSpreadsheet_FileText_FileType_Hash_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_3__[\"default\"],\n        type: 'markdown',\n        category: 'financial',\n        content: \"# Financial Notes\\n\\n## Monthly Tracking\\n- Track your revenue and expenses here\\n- Monitor budget allocations\\n- Document financial decisions\\n\\n## Budget Overview\\nStart documenting your financial planning here...\",\n        filePath: '/financial-data/Financial-Notes.md',\n        createdAt: new Date(),\n        modifiedAt: new Date()\n    }\n];\nconst useEditorStore = (0,zustand__WEBPACK_IMPORTED_MODULE_9__.create)()((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_10__.devtools)((0,zustand_middleware__WEBPACK_IMPORTED_MODULE_10__.persist)((set, get)=>({\n        // Initial state\n        openTabs: [],\n        activeTab: '',\n        projectFiles: initialProjectFiles,\n        financialFiles: initialFinancialFiles,\n        projectFolders: [],\n        financialFolders: [],\n        trashItems: [],\n        showProjectsCategory: true,\n        showFinancialCategory: true,\n        isLoading: false,\n        error: null,\n        // Actions\n        openTab: (file)=>{\n            const { openTabs } = get();\n            // Check if tab is already open\n            const existingTab = openTabs.find((tab)=>tab.id === file.id);\n            if (existingTab) {\n                set({\n                    activeTab: existingTab.id\n                });\n                return;\n            }\n            // Create new tab\n            const newTab = {\n                id: file.id,\n                name: file.name,\n                modified: false,\n                content: file.content,\n                filePath: file.filePath,\n                type: file.type\n            };\n            set({\n                openTabs: [\n                    ...openTabs,\n                    newTab\n                ],\n                activeTab: newTab.id\n            });\n        },\n        openSpecialTab: (id, name, type)=>{\n            const { openTabs } = get();\n            // Check if tab is already open\n            const existingTab = openTabs.find((tab)=>tab.id === id);\n            if (existingTab) {\n                set({\n                    activeTab: existingTab.id\n                });\n                return;\n            }\n            // Create new special tab\n            const newTab = {\n                id,\n                name,\n                modified: false,\n                content: '',\n                filePath: \"/\".concat(type),\n                type\n            };\n            set({\n                openTabs: [\n                    ...openTabs,\n                    newTab\n                ],\n                activeTab: newTab.id\n            });\n        },\n        closeTab: (tabId)=>{\n            const { openTabs, activeTab } = get();\n            const tabIndex = openTabs.findIndex((tab)=>tab.id === tabId);\n            if (tabIndex === -1) return;\n            const newTabs = openTabs.filter((tab)=>tab.id !== tabId);\n            let newActiveTab = activeTab;\n            // If closing the active tab, switch to another tab\n            if (activeTab === tabId) {\n                if (newTabs.length > 0) {\n                    // Switch to the tab to the right, or the last tab if closing the last one\n                    const nextIndex = tabIndex < newTabs.length ? tabIndex : newTabs.length - 1;\n                    newActiveTab = newTabs[nextIndex].id;\n                } else {\n                    newActiveTab = '';\n                }\n            }\n            set({\n                openTabs: newTabs,\n                activeTab: newActiveTab\n            });\n        },\n        closeAllTabs: ()=>{\n            set({\n                openTabs: [],\n                activeTab: ''\n            });\n        },\n        setActiveTab: (tabId)=>{\n            const { openTabs } = get();\n            const tabExists = openTabs.some((tab)=>tab.id === tabId);\n            if (tabExists) {\n                set({\n                    activeTab: tabId\n                });\n            }\n        },\n        updateTabContent: (tabId, content)=>{\n            const { openTabs } = get();\n            const updatedTabs = openTabs.map((tab)=>tab.id === tabId ? {\n                    ...tab,\n                    content,\n                    modified: true\n                } : tab);\n            set({\n                openTabs: updatedTabs\n            });\n        },\n        updateFileContent: (tabId, content)=>{\n            const { openTabs } = get();\n            const updatedTabs = openTabs.map((tab)=>tab.id === tabId ? {\n                    ...tab,\n                    content,\n                    modified: true\n                } : tab);\n            set({\n                openTabs: updatedTabs\n            });\n        },\n        updateFileStatus: (fileId, status)=>{\n            const { projectFiles, financialFiles } = get();\n            // Update in project files\n            const updatedProjectFiles = projectFiles.map((file)=>file.id === fileId ? {\n                    ...file,\n                    status,\n                    modifiedAt: new Date()\n                } : file);\n            // Update in financial files\n            const updatedFinancialFiles = financialFiles.map((file)=>file.id === fileId ? {\n                    ...file,\n                    status,\n                    modifiedAt: new Date()\n                } : file);\n            set({\n                projectFiles: updatedProjectFiles,\n                financialFiles: updatedFinancialFiles\n            });\n        },\n        createNewFile: function(name, type) {\n            let category = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : 'project', folderId = arguments.length > 3 ? arguments[3] : void 0;\n            const { projectFiles, financialFiles } = get();\n            // Generate unique ID\n            const id = \"\".concat(name.toLowerCase().replace(/[^a-z0-9]/g, '-'), \"-\").concat(Date.now());\n            const fileName = \"\".concat(name).concat(getFileExtension(type));\n            const basePath = category === 'financial' ? '/financial-data' : '/eac-projects';\n            // Create new file\n            const newFile = {\n                id,\n                name: fileName,\n                icon: getFileIcon(type),\n                type,\n                category,\n                content: getDefaultContent(type, name),\n                filePath: \"\".concat(basePath, \"/\").concat(fileName),\n                createdAt: new Date(),\n                modifiedAt: new Date(),\n                folderId,\n                status: [\n                    'facebook',\n                    'reddit',\n                    'instagram',\n                    'x'\n                ].includes(type) ? 'draft' : undefined\n            };\n            // Add to appropriate file array and ensure category is visible\n            if (category === 'financial') {\n                set({\n                    financialFiles: [\n                        ...financialFiles,\n                        newFile\n                    ],\n                    showFinancialCategory: true\n                });\n            } else {\n                set({\n                    projectFiles: [\n                        ...projectFiles,\n                        newFile\n                    ],\n                    showProjectsCategory: true\n                });\n            }\n            // Automatically open the new file\n            get().openTab(newFile);\n        },\n        createFolder: (name, category)=>{\n            const { projectFolders, financialFolders } = get();\n            // Generate unique ID\n            const id = \"folder-\".concat(name.toLowerCase().replace(/[^a-z0-9]/g, '-'), \"-\").concat(Date.now());\n            // Create new folder\n            const newFolder = {\n                id,\n                name,\n                category,\n                createdAt: new Date()\n            };\n            // Add to appropriate folder array and ensure category is visible\n            if (category === 'financial') {\n                set({\n                    financialFolders: [\n                        newFolder,\n                        ...financialFolders\n                    ],\n                    showFinancialCategory: true\n                });\n            } else {\n                set({\n                    projectFolders: [\n                        newFolder,\n                        ...projectFolders\n                    ],\n                    showProjectsCategory: true\n                });\n            }\n        },\n        deleteFile: (fileId)=>{\n            const { projectFiles, financialFiles, openTabs } = get();\n            // Find and remove from appropriate array\n            const updatedProjectFiles = projectFiles.filter((file)=>file.id !== fileId);\n            const updatedFinancialFiles = financialFiles.filter((file)=>file.id !== fileId);\n            // Close tab if it's open\n            const tabToClose = openTabs.find((tab)=>tab.id === fileId);\n            if (tabToClose) {\n                get().closeTab(fileId);\n            }\n            set({\n                projectFiles: updatedProjectFiles,\n                financialFiles: updatedFinancialFiles\n            });\n        },\n        renameFile: (fileId, newName)=>{\n            const { projectFiles, financialFiles, openTabs } = get();\n            // Find the file to get its type and generate new filename with extension\n            const projectFile = projectFiles.find((file)=>file.id === fileId);\n            const financialFile = financialFiles.find((file)=>file.id === fileId);\n            const file = projectFile || financialFile;\n            if (!file) return;\n            // Generate new filename with appropriate extension\n            const newFileName = \"\".concat(newName).concat(getFileExtension(file.type));\n            const basePath = file.category === 'financial' ? '/financial-data' : '/eac-projects';\n            const newFilePath = \"\".concat(basePath, \"/\").concat(newFileName);\n            // Update the file in appropriate array\n            const updatedProjectFiles = projectFiles.map((f)=>f.id === fileId ? {\n                    ...f,\n                    name: newFileName,\n                    filePath: newFilePath,\n                    modifiedAt: new Date()\n                } : f);\n            const updatedFinancialFiles = financialFiles.map((f)=>f.id === fileId ? {\n                    ...f,\n                    name: newFileName,\n                    filePath: newFilePath,\n                    modifiedAt: new Date()\n                } : f);\n            // Update open tabs if the file is open\n            const updatedTabs = openTabs.map((tab)=>tab.id === fileId ? {\n                    ...tab,\n                    name: newFileName,\n                    filePath: newFilePath,\n                    modified: true\n                } : tab);\n            set({\n                projectFiles: updatedProjectFiles,\n                financialFiles: updatedFinancialFiles,\n                openTabs: updatedTabs\n            });\n        },\n        renameFolder: (folderId, newName)=>{\n            const { projectFolders, financialFolders } = get();\n            // Update the folder in appropriate array\n            const updatedProjectFolders = projectFolders.map((folder)=>folder.id === folderId ? {\n                    ...folder,\n                    name: newName\n                } : folder);\n            const updatedFinancialFolders = financialFolders.map((folder)=>folder.id === folderId ? {\n                    ...folder,\n                    name: newName\n                } : folder);\n            set({\n                projectFolders: updatedProjectFolders,\n                financialFolders: updatedFinancialFolders\n            });\n        },\n        deleteFolder: (folderId)=>{\n            const { projectFolders, financialFolders, projectFiles, financialFiles, openTabs } = get();\n            // Find all files that were in this folder\n            const filesToDelete = [\n                ...projectFiles.filter((file)=>file.folderId === folderId),\n                ...financialFiles.filter((file)=>file.folderId === folderId)\n            ];\n            // Close tabs for all files in this folder\n            filesToDelete.forEach((file)=>{\n                const tabToClose = openTabs.find((tab)=>tab.id === file.id);\n                if (tabToClose) {\n                    get().closeTab(file.id);\n                }\n            });\n            // Remove from appropriate folder array\n            const updatedProjectFolders = projectFolders.filter((folder)=>folder.id !== folderId);\n            const updatedFinancialFolders = financialFolders.filter((folder)=>folder.id !== folderId);\n            // Also remove any files that were in this folder\n            const updatedProjectFiles = projectFiles.filter((file)=>file.folderId !== folderId);\n            const updatedFinancialFiles = financialFiles.filter((file)=>file.folderId !== folderId);\n            set({\n                projectFolders: updatedProjectFolders,\n                financialFolders: updatedFinancialFolders,\n                projectFiles: updatedProjectFiles,\n                financialFiles: updatedFinancialFiles\n            });\n        },\n        moveToTrash: (item, type)=>{\n            const { trashItems, projectFiles, financialFiles, projectFolders, financialFolders, openTabs } = get();\n            // Create trash item\n            const trashItem = {\n                id: \"trash_\".concat(item.id, \"_\").concat(Date.now()),\n                name: item.name,\n                type,\n                originalData: item,\n                deletedAt: new Date(),\n                category: item.category\n            };\n            if (type === 'file') {\n                const file = item;\n                // Close tab if it's open\n                const tabToClose = openTabs.find((tab)=>tab.id === file.id);\n                if (tabToClose) {\n                    get().closeTab(file.id);\n                }\n                // Remove from appropriate file array\n                const updatedProjectFiles = projectFiles.filter((f)=>f.id !== file.id);\n                const updatedFinancialFiles = financialFiles.filter((f)=>f.id !== file.id);\n                set({\n                    trashItems: [\n                        ...trashItems,\n                        trashItem\n                    ],\n                    projectFiles: updatedProjectFiles,\n                    financialFiles: updatedFinancialFiles\n                });\n            } else {\n                const folder = item;\n                // Find all files that were in this folder and move them to trash too\n                const filesToTrash = [\n                    ...projectFiles.filter((file)=>file.folderId === folder.id),\n                    ...financialFiles.filter((file)=>file.folderId === folder.id)\n                ];\n                // Close tabs for all files in this folder\n                filesToTrash.forEach((file)=>{\n                    const tabToClose = openTabs.find((tab)=>tab.id === file.id);\n                    if (tabToClose) {\n                        get().closeTab(file.id);\n                    }\n                });\n                // Create trash items for all files in the folder\n                const fileTrashItems = filesToTrash.map((file)=>({\n                        id: \"trash_\".concat(file.id, \"_\").concat(Date.now()),\n                        name: file.name,\n                        type: 'file',\n                        originalData: file,\n                        deletedAt: new Date(),\n                        category: file.category\n                    }));\n                // Remove folder and its files from arrays\n                const updatedProjectFolders = projectFolders.filter((f)=>f.id !== folder.id);\n                const updatedFinancialFolders = financialFolders.filter((f)=>f.id !== folder.id);\n                const updatedProjectFiles = projectFiles.filter((file)=>file.folderId !== folder.id);\n                const updatedFinancialFiles = financialFiles.filter((file)=>file.folderId !== folder.id);\n                set({\n                    trashItems: [\n                        ...trashItems,\n                        trashItem,\n                        ...fileTrashItems\n                    ],\n                    projectFolders: updatedProjectFolders,\n                    financialFolders: updatedFinancialFolders,\n                    projectFiles: updatedProjectFiles,\n                    financialFiles: updatedFinancialFiles\n                });\n            }\n        },\n        restoreFromTrash: (trashItemId)=>{\n            const { trashItems, projectFiles, financialFiles, projectFolders, financialFolders } = get();\n            const trashItem = trashItems.find((item)=>item.id === trashItemId);\n            if (!trashItem) return;\n            // Remove from trash\n            const updatedTrashItems = trashItems.filter((item)=>item.id !== trashItemId);\n            // Restore to appropriate array\n            if (trashItem.type === 'file') {\n                const file = trashItem.originalData;\n                if (file.category === 'project') {\n                    set({\n                        trashItems: updatedTrashItems,\n                        projectFiles: [\n                            ...projectFiles,\n                            {\n                                ...file,\n                                modifiedAt: new Date()\n                            }\n                        ]\n                    });\n                } else {\n                    set({\n                        trashItems: updatedTrashItems,\n                        financialFiles: [\n                            ...financialFiles,\n                            {\n                                ...file,\n                                modifiedAt: new Date()\n                            }\n                        ]\n                    });\n                }\n            } else {\n                const folder = trashItem.originalData;\n                if (folder.category === 'project') {\n                    set({\n                        trashItems: updatedTrashItems,\n                        projectFolders: [\n                            ...projectFolders,\n                            folder\n                        ]\n                    });\n                } else {\n                    set({\n                        trashItems: updatedTrashItems,\n                        financialFolders: [\n                            ...financialFolders,\n                            folder\n                        ]\n                    });\n                }\n            }\n        },\n        permanentlyDelete: (trashItemId)=>{\n            const { trashItems } = get();\n            // Remove from trash permanently\n            const updatedTrashItems = trashItems.filter((item)=>item.id !== trashItemId);\n            set({\n                trashItems: updatedTrashItems\n            });\n        },\n        emptyTrash: ()=>{\n            set({\n                trashItems: []\n            });\n        },\n        clearProjectCategory: ()=>{\n            const { openTabs } = get();\n            // Close all project-related tabs\n            const projectTabIds = openTabs.filter((tab)=>{\n                // Find the corresponding file to check its category\n                const { projectFiles } = get();\n                const file = projectFiles.find((f)=>f.id === tab.id);\n                return (file === null || file === void 0 ? void 0 : file.category) === 'project';\n            }).map((tab)=>tab.id);\n            projectTabIds.forEach((tabId)=>get().closeTab(tabId));\n            // Clear all project files and folders\n            set({\n                projectFiles: [],\n                projectFolders: []\n            });\n        },\n        clearFinancialCategory: ()=>{\n            const { openTabs } = get();\n            // Close all financial-related tabs\n            const financialTabIds = openTabs.filter((tab)=>{\n                // Find the corresponding file to check its category\n                const { financialFiles } = get();\n                const file = financialFiles.find((f)=>f.id === tab.id);\n                return (file === null || file === void 0 ? void 0 : file.category) === 'financial';\n            }).map((tab)=>tab.id);\n            financialTabIds.forEach((tabId)=>get().closeTab(tabId));\n            // Clear all financial files and folders\n            set({\n                financialFiles: [],\n                financialFolders: []\n            });\n        },\n        deleteProjectsCategory: ()=>{\n            get().clearProjectCategory();\n            set({\n                showProjectsCategory: false\n            });\n        },\n        deleteFinancialCategory: ()=>{\n            get().clearFinancialCategory();\n            set({\n                showFinancialCategory: false\n            });\n        },\n        reorderProjectFolders: (fromIndex, toIndex)=>{\n            const { projectFolders } = get();\n            const newFolders = [\n                ...projectFolders\n            ];\n            const [movedFolder] = newFolders.splice(fromIndex, 1);\n            newFolders.splice(toIndex, 0, movedFolder);\n            set({\n                projectFolders: newFolders\n            });\n        },\n        saveFile: (tabId)=>{\n            const { openTabs, projectFiles, financialFiles } = get();\n            const tab = openTabs.find((t)=>t.id === tabId);\n            if (!tab) return;\n            // Update the file content in appropriate array\n            const updatedProjectFiles = projectFiles.map((file)=>file.id === tabId ? {\n                    ...file,\n                    content: tab.content,\n                    modifiedAt: new Date()\n                } : file);\n            const updatedFinancialFiles = financialFiles.map((file)=>file.id === tabId ? {\n                    ...file,\n                    content: tab.content,\n                    modifiedAt: new Date()\n                } : file);\n            const updatedTabs = openTabs.map((t)=>t.id === tabId ? {\n                    ...t,\n                    modified: false\n                } : t);\n            set({\n                projectFiles: updatedProjectFiles,\n                financialFiles: updatedFinancialFiles,\n                openTabs: updatedTabs\n            });\n        },\n        setError: (error)=>{\n            set({\n                error\n            });\n        },\n        reset: ()=>{\n            set({\n                openTabs: [],\n                activeTab: '',\n                projectFiles: initialProjectFiles,\n                financialFiles: initialFinancialFiles,\n                projectFolders: [],\n                financialFolders: [],\n                showProjectsCategory: true,\n                showFinancialCategory: true,\n                isLoading: false,\n                error: null\n            });\n        }\n    }), {\n    name: 'editor-storage',\n    // Only persist specific fields\n    partialize: (state)=>({\n            openTabs: state.openTabs.map((tab)=>({\n                    id: tab.id,\n                    name: tab.name,\n                    modified: tab.modified,\n                    content: tab.content,\n                    filePath: tab.filePath,\n                    type: tab.type\n                })),\n            activeTab: state.activeTab,\n            projectFiles: state.projectFiles,\n            financialFiles: state.financialFiles,\n            projectFolders: state.projectFolders,\n            financialFolders: state.financialFolders,\n            showProjectsCategory: state.showProjectsCategory,\n            showFinancialCategory: state.showFinancialCategory\n        }),\n    // Custom storage to handle icon restoration\n    storage: {\n        getItem: (name)=>{\n            const str = localStorage.getItem(name);\n            if (!str) return null;\n            const { state } = JSON.parse(str);\n            // Restore icons based on file type\n            const restoredTabs = (state.openTabs || []).map((tab)=>{\n                let icon = _barrel_optimize_names_AtSign_Braces_Camera_FileCode_FileSpreadsheet_FileText_FileType_Hash_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n                switch(tab.type){\n                    case 'typescript':\n                    case 'javascript':\n                        icon = _barrel_optimize_names_AtSign_Braces_Camera_FileCode_FileSpreadsheet_FileText_FileType_Hash_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_0__[\"default\"];\n                        break;\n                    case 'json':\n                        icon = _barrel_optimize_names_AtSign_Braces_Camera_FileCode_FileSpreadsheet_FileText_FileType_Hash_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_1__[\"default\"];\n                        break;\n                    case 'excel':\n                        icon = _barrel_optimize_names_AtSign_Braces_Camera_FileCode_FileSpreadsheet_FileText_FileType_Hash_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_2__[\"default\"];\n                        break;\n                    case 'markdown':\n                        icon = _barrel_optimize_names_AtSign_Braces_Camera_FileCode_FileSpreadsheet_FileText_FileType_Hash_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_3__[\"default\"];\n                        break;\n                    case 'pdf':\n                        icon = _barrel_optimize_names_AtSign_Braces_Camera_FileCode_FileSpreadsheet_FileText_FileType_Hash_MessageSquare_lucide_react__WEBPACK_IMPORTED_MODULE_4__[\"default\"];\n                        break;\n                }\n                return {\n                    ...tab,\n                    icon\n                };\n            });\n            return {\n                state: {\n                    ...state,\n                    openTabs: restoredTabs\n                }\n            };\n        },\n        setItem: (name, value)=>{\n            localStorage.setItem(name, JSON.stringify(value));\n        },\n        removeItem: (name)=>localStorage.removeItem(name)\n    }\n}), {\n    name: 'editor-store'\n}));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3N0b3JlL2VkaXRvci9pbmRleC50cyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7QUFBQSxlQUFlO0FBQ2YsNkRBQTZEO0FBRTZEO0FBQ3pGO0FBQ3NCO0FBR3ZELGlEQUFpRDtBQUNqRCxNQUFNWSxjQUFjLENBQUNDO0lBQ25CLE9BQVFBO1FBQ04sS0FBSztZQUNILE9BQU9WLDhKQUFRQTtRQUNqQixLQUFLO1lBQ0gsT0FBT0EsOEpBQVFBO1FBQ2pCLEtBQUs7WUFDSCxPQUFPRiw4SkFBTUE7UUFDZixLQUFLO1lBQ0gsT0FBT0csOEpBQWVBO1FBQ3hCLEtBQUs7WUFDSCxPQUFPQyw4SkFBUUE7UUFDakIsS0FBSztZQUNILE9BQU9DLDhKQUFRQTtRQUNqQixLQUFLO1lBQ0gsT0FBT0QsOEpBQVFBO1FBQ2pCLEtBQUs7WUFDSCxPQUFPRCw4SkFBZUE7UUFDeEIsS0FBSztZQUNILE9BQU9BLDhKQUFlQTtRQUN4QixLQUFLO1lBQ0gsT0FBT0EsOEpBQWVBO1FBQ3hCLEtBQUs7WUFDSCxPQUFPSSw4SkFBYUE7UUFDdEIsS0FBSztZQUNILE9BQU9ELDhKQUFJQTtRQUNiLEtBQUs7WUFDSCxPQUFPTCw4SkFBTUE7UUFDZixLQUFLO1lBQ0gsT0FBT0YsOEpBQU1BO1FBQ2Y7WUFDRSxPQUFPRyw4SkFBUUE7SUFDbkI7QUFDRjtBQUVBLHdDQUF3QztBQUN4Qyx3Q0FBd0M7QUFDeEMsTUFBTVcsbUJBQW1CLENBQUNEO0lBQ3hCLE9BQVFBO1FBQ04sS0FBSztZQUNILE9BQU87UUFDVCxLQUFLO1lBQ0gsT0FBTztRQUNULEtBQUs7WUFDSCxPQUFPO1FBQ1QsS0FBSztZQUNILE9BQU87UUFDVCxLQUFLO1lBQ0gsT0FBTztRQUNULEtBQUs7WUFDSCxPQUFPO1FBQ1QsS0FBSztZQUNILE9BQU87UUFDVCxLQUFLO1lBQ0gsT0FBTztRQUNULEtBQUs7WUFDSCxPQUFPO1FBQ1QsS0FBSztZQUNILE9BQU87UUFDVCxLQUFLO1lBQ0gsT0FBTztR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d0JBQ2Y7b0JBQ0YsS0FBSzt3QkFDSG9CLE9BQU90Qiw4SkFBTUE7d0JBQ2I7b0JBQ0YsS0FBSzt3QkFDSHNCLE9BQU9uQiw4SkFBZUE7d0JBQ3RCO29CQUNGLEtBQUs7d0JBQ0htQixPQUFPbEIsOEpBQVFBO3dCQUNmO29CQUNGLEtBQUs7d0JBQ0hrQixPQUFPakIsOEpBQVFBO3dCQUNmO2dCQUNKO2dCQUVBLE9BQU87b0JBQ0wsR0FBRzBDLEdBQUc7b0JBQ056QjtnQkFDRjtZQUNGO1lBRUEsT0FBTztnQkFDTDJHLE9BQU87b0JBQ0wsR0FBR0EsS0FBSztvQkFDUmpHLFVBQVV3RztnQkFDWjtZQUNGO1FBQ0Y7UUFDQUMsU0FBUyxDQUFDMUgsTUFBTTJIO1lBQ2RMLGFBQWFJLE9BQU8sQ0FBQzFILE1BQU11SCxLQUFLSyxTQUFTLENBQUNEO1FBQzVDO1FBQ0FFLFlBQVksQ0FBQzdILE9BQVNzSCxhQUFhTyxVQUFVLENBQUM3SDtJQUNoRDtBQUNGLElBRUY7SUFBRUEsTUFBTTtBQUFlLElBRXpCIiwic291cmNlcyI6WyIvVXNlcnMvbWF0dGhld3NpbW9uL1Byb2plY3RzL2VhYy9lYWMvc3RvcmUvZWRpdG9yL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIEVkaXRvciBTdG9yZVxuLy8gL1VzZXJzL21hdHRoZXdzaW1vbi9Qcm9qZWN0cy9FQUMvZWFjL3N0b3JlL2VkaXRvci9pbmRleC50c1xuXG5pbXBvcnQgeyBBdFNpZ24sIEJyYWNlcywgQ2FtZXJhLCBGaWxlQ29kZSwgRmlsZVNwcmVhZHNoZWV0LCBGaWxlVGV4dCwgRmlsZVR5cGUsIEhhc2gsIE1lc3NhZ2VTcXVhcmUgfSBmcm9tICdsdWNpZGUtcmVhY3QnO1xuaW1wb3J0IHsgY3JlYXRlIH0gZnJvbSAnenVzdGFuZCc7XG5pbXBvcnQgeyBkZXZ0b29scywgcGVyc2lzdCB9IGZyb20gJ3p1c3RhbmQvbWlkZGxld2FyZSc7XG5pbXBvcnQgeyBFZGl0b3JTdGF0ZSwgRWRpdG9yVGFiLCBQcm9qZWN0RmlsZSwgUHJvamVjdEZvbGRlciwgVHJhc2hJdGVtIH0gZnJvbSAnLi90eXBlcyc7XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byBnZXQgaWNvbiBiYXNlZCBvbiBmaWxlIHR5cGVcbmNvbnN0IGdldEZpbGVJY29uID0gKHR5cGU6IFByb2plY3RGaWxlWyd0eXBlJ10pID0+IHtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAndHlwZXNjcmlwdCc6XG4gICAgICByZXR1cm4gRmlsZUNvZGU7XG4gICAgY2FzZSAnamF2YXNjcmlwdCc6XG4gICAgICByZXR1cm4gRmlsZUNvZGU7XG4gICAgY2FzZSAnanNvbic6XG4gICAgICByZXR1cm4gQnJhY2VzO1xuICAgIGNhc2UgJ2V4Y2VsJzpcbiAgICAgIHJldHVybiBGaWxlU3ByZWFkc2hlZXQ7XG4gICAgY2FzZSAnbWFya2Rvd24nOlxuICAgICAgcmV0dXJuIEZpbGVUZXh0O1xuICAgIGNhc2UgJ3BkZic6XG4gICAgICByZXR1cm4gRmlsZVR5cGU7XG4gICAgY2FzZSAnZ2VuZXJhbHMnOlxuICAgICAgcmV0dXJuIEZpbGVUZXh0O1xuICAgIGNhc2UgJ3BlcmNlbnQtY29tcGxldGUnOlxuICAgICAgcmV0dXJuIEZpbGVTcHJlYWRzaGVldDtcbiAgICBjYXNlICdzY2hlZHVsZSc6XG4gICAgICByZXR1cm4gRmlsZVNwcmVhZHNoZWV0O1xuICAgIGNhc2UgJ21hdGVyaWFscyc6XG4gICAgICByZXR1cm4gRmlsZVNwcmVhZHNoZWV0O1xuICAgIGNhc2UgJ2ZhY2Vib29rJzpcbiAgICAgIHJldHVybiBNZXNzYWdlU3F1YXJlO1xuICAgIGNhc2UgJ3JlZGRpdCc6XG4gICAgICByZXR1cm4gSGFzaDtcbiAgICBjYXNlICdpbnN0YWdyYW0nOlxuICAgICAgcmV0dXJuIENhbWVyYTtcbiAgICBjYXNlICd4JzpcbiAgICAgIHJldHVybiBBdFNpZ247XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiBGaWxlQ29kZTtcbiAgfVxufTtcblxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGdldCBmaWxlIGV4dGVuc2lvblxuLy8gSGVscGVyIGZ1bmN0aW9uIHRvIGdldCBmaWxlIGV4dGVuc2lvblxuY29uc3QgZ2V0RmlsZUV4dGVuc2lvbiA9ICh0eXBlOiBQcm9qZWN0RmlsZVsndHlwZSddKTogc3RyaW5nID0+IHtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAndHlwZXNjcmlwdCc6XG4gICAgICByZXR1cm4gJy50cyc7XG4gICAgY2FzZSAnamF2YXNjcmlwdCc6XG4gICAgICByZXR1cm4gJy5qcyc7XG4gICAgY2FzZSAnanNvbic6XG4gICAgICByZXR1cm4gJy5qc29uJztcbiAgICBjYXNlICdleGNlbCc6XG4gICAgICByZXR1cm4gJy54bHN4JztcbiAgICBjYXNlICdwZGYnOlxuICAgICAgcmV0dXJuICcucGRmJztcbiAgICBjYXNlICdnZW5lcmFscyc6XG4gICAgICByZXR1cm4gJy5nZW5lcmFscyc7XG4gICAgY2FzZSAncGVyY2VudC1jb21wbGV0ZSc6XG4gICAgICByZXR1cm4gJy5wZXJjZW50JztcbiAgICBjYXNlICdzY2hlZHVsZSc6XG4gICAgICByZXR1cm4gJy5zY2hlZHVsZSc7XG4gICAgY2FzZSAnbWF0ZXJpYWxzJzpcbiAgICAgIHJldHVybiAnLm1hdGVyaWFscyc7XG4gICAgY2FzZSAnZmFjZWJvb2snOlxuICAgICAgcmV0dXJuICcuZmFjZWJvb2snO1xuICAgIGNhc2UgJ3JlZGRpdCc6XG4gICAgICByZXR1cm4gJy5yZWRkaXQnO1xuICAgIGNhc2UgJ2luc3RhZ3JhbSc6XG4gICAgICByZXR1cm4gJy5pbnN0YWdyYW0nO1xuICAgIGNhc2UgJ3gnOlxuICAgICAgcmV0dXJuICcueCc7XG4gICAgZGVmYXVsdDpcbiAgICAgIHJldHVybiAnLnR4dCc7XG4gIH1cbn07XG5cbi8vIEhlbHBlciBmdW5jdGlvbiB0byBnZW5lcmF0ZSBkZWZhdWx0IGNvbnRlbnQgZm9yIG5ldyBmaWxlc1xuY29uc3QgZ2V0RGVmYXVsdENvbnRlbnQgPSAodHlwZTogUHJvamVjdEZpbGVbJ3R5cGUnXSwgbmFtZTogc3RyaW5nKSA9PiB7XG4gIHN3aXRjaCAodHlwZSkge1xuICAgIGNhc2UgJ3R5cGVzY3JpcHQnOlxuICAgICAgcmV0dXJuIGAvLyAke25hbWV9XG4vLyBBdXRvLWdlbmVyYXRlZCBUeXBlU2NyaXB0IGZpbGVcblxuaW1wb3J0IFJlYWN0IGZyb20gJ3JlYWN0JztcblxuaW50ZXJmYWNlICR7bmFtZS5yZXBsYWNlKC9bXmEtekEtWjAtOV0vZywgJycpfVByb3BzIHtcbiAgLy8gRGVmaW5lIHByb3BzIGhlcmVcbn1cblxuZXhwb3J0IGZ1bmN0aW9uICR7bmFtZS5yZXBsYWNlKC9bXmEtekEtWjAtOV0vZywgJycpfSh7IH06ICR7bmFtZS5yZXBsYWNlKC9bXmEtekEtWjAtOV0vZywgJycpfVByb3BzKSB7XG4gIHJldHVybiAoXG4gICAgPGRpdiBjbGFzc05hbWU9XCJwLTRcIj5cbiAgICAgIDxoMSBjbGFzc05hbWU9XCJ0ZXh0LXhsIGZvbnQtYm9sZFwiPk5ldyBDb21wb25lbnQ6ICR7bmFtZX08L2gxPlxuICAgICAgPHAgY2xhc3NOYW1lPVwidGV4dC1ncmF5LTYwMFwiPlN0YXJ0IGJ1aWxkaW5nIHlvdXIgY29tcG9uZW50IGhlcmUuLi48L3A+XG4gICAgPC9kaXY+XG4gICk7XG59YDtcbiAgICBjYXNlICdqYXZhc2NyaXB0JzpcbiAgICAgIHJldHVybiBgLy8gJHtuYW1lfVxuLy8gQXV0by1nZW5lcmF0ZWQgSmF2YVNjcmlwdCBmaWxlXG5cbmV4cG9ydCBmdW5jdGlvbiAke25hbWUucmVwbGFjZSgvW15hLXpBLVowLTldL2csICcnKX0oKSB7XG4gIHJldHVybiB7XG4gICAgbWVzc2FnZTogJ0hlbGxvIGZyb20gJHtuYW1lfSEnLFxuICAgIGRhdGE6IFtdXG4gIH07XG59YDtcbiAgICBjYXNlICdqc29uJzpcbiAgICAgIHJldHVybiBge1xuICBcIm5hbWVcIjogXCIke25hbWV9XCIsXG4gIFwiZGVzY3JpcHRpb25cIjogXCJBdXRvLWdlbmVyYXRlZCBKU09OIGZpbGVcIixcbiAgXCJ2ZXJzaW9uXCI6IFwiMS4wLjBcIixcbiAgXCJkYXRhXCI6IHt9XG59YDtcbiAgICBjYXNlICdtYXJrZG93bic6XG4gICAgICByZXR1cm4gYFN0YXJ0IHdyaXRpbmcgeW91ciBjb250ZW50IGhlcmUuLi5gO1xuICAgIGNhc2UgJ2dlbmVyYWxzJzpcbiAgICAgIHJldHVybiBgLy8gJHtuYW1lfSAtIFByb2plY3QgR2VuZXJhbCBJbmZvcm1hdGlvblxuLy8gVGhpcyBmaWxlIGNvbnRhaW5zIGdlbmVyYWwgcHJvamVjdCBkZXRhaWxzIGFuZCBmaW5hbmNpYWwgaW5mb3JtYXRpb25cbi8vIENyZWF0ZWQgb246ICR7bmV3IERhdGUoKS50b0lTT1N0cmluZygpfVxuXG5Qcm9qZWN0OiAke25hbWV9XG5TdGF0dXM6IEFjdGl2ZVxuQ3JlYXRlZDogJHtuZXcgRGF0ZSgpLnRvTG9jYWxlRGF0ZVN0cmluZygpfVxuXG4vLyBUaGlzIGZpbGUgd2lsbCBkaXNwbGF5IHRoZSBwcm9qZWN0IGdlbmVyYWxzIG1vZHVsZSBpbnRlcmZhY2VgO1xuICAgIGNhc2UgJ3BlcmNlbnQtY29tcGxldGUnOlxuICAgICAgcmV0dXJuIGAvLyAke25hbWV9IC0gUGVyY2VudCBDb21wbGV0ZSBUcmFja2VyXG4vLyBUaGlzIGZpbGUgY29udGFpbnMgcHJvamVjdCBjb21wbGV0aW9uIHRyYWNraW5nIGRhdGFcbi8vIENyZWF0ZWQgb246ICR7bmV3IERhdGUoKS50b0lTT1N0cmluZygpfVxuXG5Qcm9qZWN0OiAke25hbWV9XG5UeXBlOiBQZXJjZW50IENvbXBsZXRlIFRyYWNrZXJcbkNyZWF0ZWQ6ICR7bmV3IERhdGUoKS50b0xvY2FsZURhdGVTdHJpbmcoKX1cblxuLy8gVGhpcyBmaWxlIHdpbGwgZGlzcGxheSB0aGUgcGVyY2VudCBjb21wbGV0ZSB0cmFja2luZyBpbnRlcmZhY2VgO1xuICAgIGNhc2UgJ3NjaGVkdWxlJzpcbiAgICAgIHJldHVybiBgLy8gJHtuYW1lfSAtIFByb2plY3QgU2NoZWR1bGVcbi8vIFRoaXMgZmlsZSBjb250YWlucyBwcm9qZWN0IHNjaGVkdWxlIGFuZCB0aW1lbGluZSBkYXRhXG4vLyBDcmVhdGVkIG9uOiAke25ldyBEYXRlKCkudG9JU09TdHJpbmcoKX1cblxuUHJvamVjdDogJHtuYW1lfVxuVHlwZTogUHJvamVjdCBTY2hlZHVsZVxuQ3JlYXRlZDogJHtuZXcgRGF0ZSgpLnRvTG9jYWxlRGF0ZVN0cmluZygpfVxuXG4vLyBUaGlzIGZpbGUgd2lsbCBkaXNwbGF5IHRoZSBwcm9qZWN0IHNjaGVkdWxlIGludGVyZmFjZSB3aXRoIEdhbnR0IGNoYXJ0YDtcbiAgICBjYXNlICdtYXRlcmlhbHMnOlxuICAgICAgcmV0dXJuIGAvLyAke25hbWV9IC0gTWF0ZXJpYWxzIE1hbmFnZW1lbnRcbi8vIFRoaXMgZmlsZSBjb250YWlucyBtYXRlcmlhbHMgdHJhY2tpbmcgYW5kIG1hbmFnZW1lbnQgZGF0YVxuLy8gQ3JlYXRlZCBvbjogJHtuZXcgRGF0ZSgpLnRvSVNPU3RyaW5nKCl9XG5cblByb2plY3Q6ICR7bmFtZX1cblR5cGU6IE1hdGVyaWFscyBNYW5hZ2VtZW50XG5DcmVhdGVkOiAke25ldyBEYXRlKCkudG9Mb2NhbGVEYXRlU3RyaW5nKCl9XG5cbi8vIFRoaXMgZmlsZSB3aWxsIGRpc3BsYXkgdGhlIG1hdGVyaWFscyBtYW5hZ2VtZW50IGludGVyZmFjZSB3aXRoIG1hbnVmYWN0dXJlZCBhbmQgbWlzY2VsbGFuZW91cyBtYXRlcmlhbHNgO1xuICAgIGNhc2UgJ2ZhY2Vib29rJzpcbiAgICAgIHJldHVybiBgIyAke25hbWV9IC0gRmFjZWJvb2sgUG9zdFxuUGxhdGZvcm06IEZhY2Vib29rXG5DcmVhdGVkOiAke25ldyBEYXRlKCkudG9Mb2NhbGVEYXRlU3RyaW5nKCl9XG5cbiMjIFBvc3QgQ29udGVudFxuV3JpdGUgeW91ciBGYWNlYm9vayBwb3N0IGNvbnRlbnQgaGVyZS4uLlxuXG4jIyBTZXR0aW5nc1xuLSBBdWRpZW5jZTogUHVibGljXG4tIFNjaGVkdWxlOiBOb3dcbi0gSGFzaHRhZ3M6ICNleGFtcGxlXG5cbiMjIE1lZGlhXG4tIEltYWdlczogW11cbi0gVmlkZW9zOiBbXVxuXG4jIyBBbmFseXRpY3Ncbi0gRW5nYWdlbWVudDogMFxuLSBSZWFjaDogMFxuLSBDbGlja3M6IDBgO1xuICAgIGNhc2UgJ3JlZGRpdCc6XG4gICAgICByZXR1cm4gYCMgJHtuYW1lfSAtIFJlZGRpdCBQb3N0XG5QbGF0Zm9ybTogUmVkZGl0XG5DcmVhdGVkOiAke25ldyBEYXRlKCkudG9Mb2NhbGVEYXRlU3RyaW5nKCl9XG5cbiMjIFBvc3QgQ29udGVudFxuV3JpdGUgeW91ciBSZWRkaXQgcG9zdCBjb250ZW50IGhlcmUuLi5cblxuIyMgU2V0dGluZ3Ncbi0gU3VicmVkZGl0OiByL2V4YW1wbGVcbi0gUG9zdCBUeXBlOiBUZXh0L0xpbmsvSW1hZ2Vcbi0gRmxhaXI6IERpc2N1c3Npb25cbi0gTlNGVzogTm9cblxuIyMgTWVkaWFcbi0gSW1hZ2VzOiBbXVxuLSBMaW5rczogW11cblxuIyMgQW5hbHl0aWNzXG4tIFVwdm90ZXM6IDBcbi0gQ29tbWVudHM6IDBcbi0gQXdhcmRzOiAwYDtcbiAgICBjYXNlICdpbnN0YWdyYW0nOlxuICAgICAgcmV0dXJuIGAjICR7bmFtZX0gLSBJbnN0YWdyYW0gUG9zdFxuUGxhdGZvcm06IEluc3RhZ3JhbVxuQ3JlYXRlZDogJHtuZXcgRGF0ZSgpLnRvTG9jYWxlRGF0ZVN0cmluZygpfVxuXG4jIyBQb3N0IENvbnRlbnRcbldyaXRlIHlvdXIgSW5zdGFncmFtIHBvc3QgY29udGVudCBoZXJlLi4uXG5cbiMjIFNldHRpbmdzXG4tIFBvc3QgVHlwZTogRmVlZC9TdG9yeS9SZWVsXG4tIExvY2F0aW9uOiBDaXR5LCBDb3VudHJ5XG4tIEFsdCBUZXh0OiBEZXNjcmliZSBpbWFnZVxuLSBDb21tZW50IFNldHRpbmdzOiBQdWJsaWNcblxuIyMgTWVkaWFcbi0gSW1hZ2VzOiBbXVxuLSBWaWRlb3M6IFtdXG5cbiMjIEhhc2h0YWdzXG4jaGFzaHRhZzEgI2hhc2h0YWcyICNoYXNodGFnM1xuXG4jIyBBbmFseXRpY3Ncbi0gTGlrZXM6IDBcbi0gQ29tbWVudHM6IDBcbi0gU2hhcmVzOiAwXG4tIFJlYWNoOiAwYDtcbiAgICBjYXNlICd4JzpcbiAgICAgIHJldHVybiBgIyAke25hbWV9IC0gWC9Ud2l0dGVyIFBvc3RcblBsYXRmb3JtOiBYIChUd2l0dGVyKVxuQ3JlYXRlZDogJHtuZXcgRGF0ZSgpLnRvTG9jYWxlRGF0ZVN0cmluZygpfVxuXG4jIyBQb3N0IENvbnRlbnRcbldyaXRlIHlvdXIgWCBwb3N0IGNvbnRlbnQgaGVyZS4uLiAoMjgwIGNoYXJhY3RlciBsaW1pdClcblxuIyMgU2V0dGluZ3Ncbi0gUmVwbHkgU2V0dGluZ3M6IEV2ZXJ5b25lXG4tIFNjaGVkdWxlOiBOb3dcbi0gVGhyZWFkOiBTaW5nbGUgVHdlZXRcblxuIyMgTWVkaWFcbi0gSW1hZ2VzOiBbXVxuLSBWaWRlb3M6IFtdXG4tIEdJRnM6IFtdXG5cbiMjIEFuYWx5dGljc1xuLSBJbXByZXNzaW9uczogMFxuLSBFbmdhZ2VtZW50czogMFxuLSBSZXR3ZWV0czogMFxuLSBMaWtlczogMFxuLSBSZXBsaWVzOiAwYDtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIGAjICR7bmFtZX1cblxuVGhpcyBpcyBhIG5ldyBmaWxlIGNyZWF0ZWQgaW4gdGhlIEVBQyBEYXNoYm9hcmQuXG5DcmVhdGVkIG9uOiAke25ldyBEYXRlKCkudG9JU09TdHJpbmcoKX1gO1xuICB9XG59O1xuXG4vLyBJbml0aWFsIHByb2plY3QgZmlsZXNcbmNvbnN0IGluaXRpYWxQcm9qZWN0RmlsZXM6IFByb2plY3RGaWxlW10gPSBbXG4gIHtcbiAgICBpZDogJ3Byb2plY3Qtb3ZlcnZpZXcnLFxuICAgIG5hbWU6ICdQcm9qZWN0LU92ZXJ2aWV3Lm1kJyxcbiAgICBpY29uOiBGaWxlVGV4dCxcbiAgICB0eXBlOiAnbWFya2Rvd24nLFxuICAgIGNhdGVnb3J5OiAncHJvamVjdCcsXG4gICAgY29udGVudDogYCMgUHJvamVjdCBPdmVydmlld1xuXG4jIyBDdXJyZW50IFByb2plY3RzXG4tIFdyaXRlIHlvdXIgcHJvamVjdCBkZXRhaWxzIGhlcmUuLi5cbi0gVHJhY2sgcHJvZ3Jlc3MgYW5kIG1pbGVzdG9uZXNcbi0gRG9jdW1lbnQgcmVxdWlyZW1lbnRzIGFuZCBzcGVjaWZpY2F0aW9uc1xuXG4jIyBOb3Rlc1xuU3RhcnQgcGxhbm5pbmcgeW91ciBwcm9qZWN0cyBoZXJlLi4uYCxcbiAgICBmaWxlUGF0aDogJy9lYWMtcHJvamVjdHMvUHJvamVjdC1PdmVydmlldy5tZCcsXG4gICAgY3JlYXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgIG1vZGlmaWVkQXQ6IG5ldyBEYXRlKCksXG4gIH0sXG5dO1xuXG4vLyBJbml0aWFsIGZpbmFuY2lhbCBmaWxlc1xuY29uc3QgaW5pdGlhbEZpbmFuY2lhbEZpbGVzOiBQcm9qZWN0RmlsZVtdID0gW1xuICB7XG4gICAgaWQ6ICdmaW5hbmNpYWwtbm90ZXMnLFxuICAgIG5hbWU6ICdGaW5hbmNpYWwtTm90ZXMubWQnLFxuICAgIGljb246IEZpbGVUZXh0LFxuICAgIHR5cGU6ICdtYXJrZG93bicsXG4gICAgY2F0ZWdvcnk6ICdmaW5hbmNpYWwnLFxuICAgIGNvbnRlbnQ6IGAjIEZpbmFuY2lhbCBOb3Rlc1xuXG4jIyBNb250aGx5IFRyYWNraW5nXG4tIFRyYWNrIHlvdXIgcmV2ZW51ZSBhbmQgZXhwZW5zZXMgaGVyZVxuLSBNb25pdG9yIGJ1ZGdldCBhbGxvY2F0aW9uc1xuLSBEb2N1bWVudCBmaW5hbmNpYWwgZGVjaXNpb25zXG5cbiMjIEJ1ZGdldCBPdmVydmlld1xuU3RhcnQgZG9jdW1lbnRpbmcgeW91ciBmaW5hbmNpYWwgcGxhbm5pbmcgaGVyZS4uLmAsXG4gICAgZmlsZVBhdGg6ICcvZmluYW5jaWFsLWRhdGEvRmluYW5jaWFsLU5vdGVzLm1kJyxcbiAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgbW9kaWZpZWRBdDogbmV3IERhdGUoKSxcbiAgfSxcbl07XG5cbmV4cG9ydCBjb25zdCB1c2VFZGl0b3JTdG9yZSA9IGNyZWF0ZTxFZGl0b3JTdGF0ZT4oKShcbiAgZGV2dG9vbHMoXG4gICAgcGVyc2lzdChcbiAgICAgIChzZXQsIGdldCkgPT4gKHtcbiAgICAgICAgLy8gSW5pdGlhbCBzdGF0ZVxuICAgICAgICBvcGVuVGFiczogW10sXG4gICAgICAgIGFjdGl2ZVRhYjogJycsXG4gICAgICAgIHByb2plY3RGaWxlczogaW5pdGlhbFByb2plY3RGaWxlcyxcbiAgICAgICAgZmluYW5jaWFsRmlsZXM6IGluaXRpYWxGaW5hbmNpYWxGaWxlcyxcbiAgICAgICAgcHJvamVjdEZvbGRlcnM6IFtdLFxuICAgICAgICBmaW5hbmNpYWxGb2xkZXJzOiBbXSxcbiAgICAgICAgdHJhc2hJdGVtczogW10sXG4gICAgICAgIHNob3dQcm9qZWN0c0NhdGVnb3J5OiB0cnVlLFxuICAgICAgICBzaG93RmluYW5jaWFsQ2F0ZWdvcnk6IHRydWUsXG4gICAgICAgIGlzTG9hZGluZzogZmFsc2UsXG4gICAgICAgIGVycm9yOiBudWxsLFxuXG4gICAgICAgIC8vIEFjdGlvbnNcbiAgICAgICAgb3BlblRhYjogKGZpbGU6IFByb2plY3RGaWxlKSA9PiB7XG4gICAgICAgICAgY29uc3QgeyBvcGVuVGFicyB9ID0gZ2V0KCk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gQ2hlY2sgaWYgdGFiIGlzIGFscmVhZHkgb3BlblxuICAgICAgICAgIGNvbnN0IGV4aXN0aW5nVGFiID0gb3BlblRhYnMuZmluZCh0YWIgPT4gdGFiLmlkID09PSBmaWxlLmlkKTtcbiAgICAgICAgICBpZiAoZXhpc3RpbmdUYWIpIHtcbiAgICAgICAgICAgIHNldCh7IGFjdGl2ZVRhYjogZXhpc3RpbmdUYWIuaWQgfSk7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gQ3JlYXRlIG5ldyB0YWJcbiAgICAgICAgICBjb25zdCBuZXdUYWI6IEVkaXRvclRhYiA9IHtcbiAgICAgICAgICAgIGlkOiBmaWxlLmlkLFxuICAgICAgICAgICAgbmFtZTogZmlsZS5uYW1lLFxuICAgICAgICAgICAgbW9kaWZpZWQ6IGZhbHNlLFxuICAgICAgICAgICAgY29udGVudDogZmlsZS5jb250ZW50LFxuICAgICAgICAgICAgZmlsZVBhdGg6IGZpbGUuZmlsZVBhdGgsXG4gICAgICAgICAgICB0eXBlOiBmaWxlLnR5cGUsXG4gICAgICAgICAgfTtcblxuICAgICAgICAgIHNldCh7XG4gICAgICAgICAgICBvcGVuVGFiczogWy4uLm9wZW5UYWJzLCBuZXdUYWJdLFxuICAgICAgICAgICAgYWN0aXZlVGFiOiBuZXdUYWIuaWQsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgb3BlblNwZWNpYWxUYWI6IChpZDogc3RyaW5nLCBuYW1lOiBzdHJpbmcsIHR5cGU6ICdzb2NpYWwtY29ubmVjdCcgfCAncG9zdC1jcmVhdG9yJykgPT4ge1xuICAgICAgICAgIGNvbnN0IHsgb3BlblRhYnMgfSA9IGdldCgpO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIENoZWNrIGlmIHRhYiBpcyBhbHJlYWR5IG9wZW5cbiAgICAgICAgICBjb25zdCBleGlzdGluZ1RhYiA9IG9wZW5UYWJzLmZpbmQodGFiID0+IHRhYi5pZCA9PT0gaWQpO1xuICAgICAgICAgIGlmIChleGlzdGluZ1RhYikge1xuICAgICAgICAgICAgc2V0KHsgYWN0aXZlVGFiOiBleGlzdGluZ1RhYi5pZCB9KTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBDcmVhdGUgbmV3IHNwZWNpYWwgdGFiXG4gICAgICAgICAgY29uc3QgbmV3VGFiOiBFZGl0b3JUYWIgPSB7XG4gICAgICAgICAgICBpZCxcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBtb2RpZmllZDogZmFsc2UsXG4gICAgICAgICAgICBjb250ZW50OiAnJyxcbiAgICAgICAgICAgIGZpbGVQYXRoOiBgLyR7dHlwZX1gLFxuICAgICAgICAgICAgdHlwZSxcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgc2V0KHtcbiAgICAgICAgICAgIG9wZW5UYWJzOiBbLi4ub3BlblRhYnMsIG5ld1RhYl0sXG4gICAgICAgICAgICBhY3RpdmVUYWI6IG5ld1RhYi5pZCxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBjbG9zZVRhYjogKHRhYklkOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICBjb25zdCB7IG9wZW5UYWJzLCBhY3RpdmVUYWIgfSA9IGdldCgpO1xuICAgICAgICAgIGNvbnN0IHRhYkluZGV4ID0gb3BlblRhYnMuZmluZEluZGV4KHRhYiA9PiB0YWIuaWQgPT09IHRhYklkKTtcbiAgICAgICAgICBcbiAgICAgICAgICBpZiAodGFiSW5kZXggPT09IC0xKSByZXR1cm47XG5cbiAgICAgICAgICBjb25zdCBuZXdUYWJzID0gb3BlblRhYnMuZmlsdGVyKHRhYiA9PiB0YWIuaWQgIT09IHRhYklkKTtcbiAgICAgICAgICBsZXQgbmV3QWN0aXZlVGFiID0gYWN0aXZlVGFiO1xuXG4gICAgICAgICAgLy8gSWYgY2xvc2luZyB0aGUgYWN0aXZlIHRhYiwgc3dpdGNoIHRvIGFub3RoZXIgdGFiXG4gICAgICAgICAgaWYgKGFjdGl2ZVRhYiA9PT0gdGFiSWQpIHtcbiAgICAgICAgICAgIGlmIChuZXdUYWJzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgLy8gU3dpdGNoIHRvIHRoZSB0YWIgdG8gdGhlIHJpZ2h0LCBvciB0aGUgbGFzdCB0YWIgaWYgY2xvc2luZyB0aGUgbGFzdCBvbmVcbiAgICAgICAgICAgICAgY29uc3QgbmV4dEluZGV4ID0gdGFiSW5kZXggPCBuZXdUYWJzLmxlbmd0aCA/IHRhYkluZGV4IDogbmV3VGFicy5sZW5ndGggLSAxO1xuICAgICAgICAgICAgICBuZXdBY3RpdmVUYWIgPSBuZXdUYWJzW25leHRJbmRleF0uaWQ7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBuZXdBY3RpdmVUYWIgPSAnJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBzZXQoe1xuICAgICAgICAgICAgb3BlblRhYnM6IG5ld1RhYnMsXG4gICAgICAgICAgICBhY3RpdmVUYWI6IG5ld0FjdGl2ZVRhYixcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBjbG9zZUFsbFRhYnM6ICgpID0+IHtcbiAgICAgICAgICBzZXQoe1xuICAgICAgICAgICAgb3BlblRhYnM6IFtdLFxuICAgICAgICAgICAgYWN0aXZlVGFiOiAnJyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBzZXRBY3RpdmVUYWI6ICh0YWJJZDogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgY29uc3QgeyBvcGVuVGFicyB9ID0gZ2V0KCk7XG4gICAgICAgICAgY29uc3QgdGFiRXhpc3RzID0gb3BlblRhYnMuc29tZSh0YWIgPT4gdGFiLmlkID09PSB0YWJJZCk7XG4gICAgICAgICAgXG4gICAgICAgICAgaWYgKHRhYkV4aXN0cykge1xuICAgICAgICAgICAgc2V0KHsgYWN0aXZlVGFiOiB0YWJJZCB9KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0sXG5cbiAgICAgICAgdXBkYXRlVGFiQ29udGVudDogKHRhYklkOiBzdHJpbmcsIGNvbnRlbnQ6IHN0cmluZykgPT4ge1xuICAgICAgICAgIGNvbnN0IHsgb3BlblRhYnMgfSA9IGdldCgpO1xuICAgICAgICAgIGNvbnN0IHVwZGF0ZWRUYWJzID0gb3BlblRhYnMubWFwKCh0YWI6IEVkaXRvclRhYikgPT4gXG4gICAgICAgICAgICB0YWIuaWQgPT09IHRhYklkIFxuICAgICAgICAgICAgICA/IHsgLi4udGFiLCBjb250ZW50LCBtb2RpZmllZDogdHJ1ZSB9XG4gICAgICAgICAgICAgIDogdGFiXG4gICAgICAgICAgKTtcbiAgICAgICAgICBcbiAgICAgICAgICBzZXQoeyBvcGVuVGFiczogdXBkYXRlZFRhYnMgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgdXBkYXRlRmlsZUNvbnRlbnQ6ICh0YWJJZDogc3RyaW5nLCBjb250ZW50OiBzdHJpbmcpID0+IHtcbiAgICAgICAgICBjb25zdCB7IG9wZW5UYWJzIH0gPSBnZXQoKTtcbiAgICAgICAgICBjb25zdCB1cGRhdGVkVGFicyA9IG9wZW5UYWJzLm1hcCgodGFiOiBFZGl0b3JUYWIpID0+IFxuICAgICAgICAgICAgdGFiLmlkID09PSB0YWJJZCBcbiAgICAgICAgICAgICAgPyB7IC4uLnRhYiwgY29udGVudCwgbW9kaWZpZWQ6IHRydWUgfVxuICAgICAgICAgICAgICA6IHRhYlxuICAgICAgICAgICk7XG4gICAgICAgICAgXG4gICAgICAgICAgc2V0KHsgb3BlblRhYnM6IHVwZGF0ZWRUYWJzIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIHVwZGF0ZUZpbGVTdGF0dXM6IChmaWxlSWQ6IHN0cmluZywgc3RhdHVzOiAnZHJhZnQnIHwgJ3NjaGVkdWxlZCcgfCAnY29tcGxldGUnKSA9PiB7XG4gICAgICAgICAgY29uc3QgeyBwcm9qZWN0RmlsZXMsIGZpbmFuY2lhbEZpbGVzIH0gPSBnZXQoKTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBVcGRhdGUgaW4gcHJvamVjdCBmaWxlc1xuICAgICAgICAgIGNvbnN0IHVwZGF0ZWRQcm9qZWN0RmlsZXMgPSBwcm9qZWN0RmlsZXMubWFwKGZpbGUgPT5cbiAgICAgICAgICAgIGZpbGUuaWQgPT09IGZpbGVJZCA/IHsgLi4uZmlsZSwgc3RhdHVzLCBtb2RpZmllZEF0OiBuZXcgRGF0ZSgpIH0gOiBmaWxlXG4gICAgICAgICAgKTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBVcGRhdGUgaW4gZmluYW5jaWFsIGZpbGVzXG4gICAgICAgICAgY29uc3QgdXBkYXRlZEZpbmFuY2lhbEZpbGVzID0gZmluYW5jaWFsRmlsZXMubWFwKGZpbGUgPT5cbiAgICAgICAgICAgIGZpbGUuaWQgPT09IGZpbGVJZCA/IHsgLi4uZmlsZSwgc3RhdHVzLCBtb2RpZmllZEF0OiBuZXcgRGF0ZSgpIH0gOiBmaWxlXG4gICAgICAgICAgKTtcbiAgICAgICAgICBcbiAgICAgICAgICBzZXQoe1xuICAgICAgICAgICAgcHJvamVjdEZpbGVzOiB1cGRhdGVkUHJvamVjdEZpbGVzLFxuICAgICAgICAgICAgZmluYW5jaWFsRmlsZXM6IHVwZGF0ZWRGaW5hbmNpYWxGaWxlc1xuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGNyZWF0ZU5ld0ZpbGU6IChuYW1lOiBzdHJpbmcsIHR5cGU6IFByb2plY3RGaWxlWyd0eXBlJ10sIGNhdGVnb3J5OiBQcm9qZWN0RmlsZVsnY2F0ZWdvcnknXSA9ICdwcm9qZWN0JywgZm9sZGVySWQ/OiBzdHJpbmcpID0+IHtcbiAgICAgICAgICBjb25zdCB7IHByb2plY3RGaWxlcywgZmluYW5jaWFsRmlsZXMgfSA9IGdldCgpO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIEdlbmVyYXRlIHVuaXF1ZSBJRFxuICAgICAgICAgIGNvbnN0IGlkID0gYCR7bmFtZS50b0xvd2VyQ2FzZSgpLnJlcGxhY2UoL1teYS16MC05XS9nLCAnLScpfS0ke0RhdGUubm93KCl9YDtcbiAgICAgICAgICBjb25zdCBmaWxlTmFtZSA9IGAke25hbWV9JHtnZXRGaWxlRXh0ZW5zaW9uKHR5cGUpfWA7XG4gICAgICAgICAgY29uc3QgYmFzZVBhdGggPSBjYXRlZ29yeSA9PT0gJ2ZpbmFuY2lhbCcgPyAnL2ZpbmFuY2lhbC1kYXRhJyA6ICcvZWFjLXByb2plY3RzJztcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBDcmVhdGUgbmV3IGZpbGVcbiAgICAgICAgICBjb25zdCBuZXdGaWxlOiBQcm9qZWN0RmlsZSA9IHtcbiAgICAgICAgICAgIGlkLFxuICAgICAgICAgICAgbmFtZTogZmlsZU5hbWUsXG4gICAgICAgICAgICBpY29uOiBnZXRGaWxlSWNvbih0eXBlKSxcbiAgICAgICAgICAgIHR5cGUsXG4gICAgICAgICAgICBjYXRlZ29yeSxcbiAgICAgICAgICAgIGNvbnRlbnQ6IGdldERlZmF1bHRDb250ZW50KHR5cGUsIG5hbWUpLFxuICAgICAgICAgICAgZmlsZVBhdGg6IGAke2Jhc2VQYXRofS8ke2ZpbGVOYW1lfWAsXG4gICAgICAgICAgICBjcmVhdGVkQXQ6IG5ldyBEYXRlKCksXG4gICAgICAgICAgICBtb2RpZmllZEF0OiBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgZm9sZGVySWQsIC8vIEFkZCBmb2xkZXIgYXNzaWdubWVudFxuICAgICAgICAgICAgc3RhdHVzOiBbJ2ZhY2Vib29rJywgJ3JlZGRpdCcsICdpbnN0YWdyYW0nLCAneCddLmluY2x1ZGVzKHR5cGUpID8gJ2RyYWZ0JyA6IHVuZGVmaW5lZCwgLy8gRGVmYXVsdCBzb2NpYWwgbWVkaWEgZmlsZXMgdG8gZHJhZnRcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgLy8gQWRkIHRvIGFwcHJvcHJpYXRlIGZpbGUgYXJyYXkgYW5kIGVuc3VyZSBjYXRlZ29yeSBpcyB2aXNpYmxlXG4gICAgICAgICAgaWYgKGNhdGVnb3J5ID09PSAnZmluYW5jaWFsJykge1xuICAgICAgICAgICAgc2V0KHtcbiAgICAgICAgICAgICAgZmluYW5jaWFsRmlsZXM6IFsuLi5maW5hbmNpYWxGaWxlcywgbmV3RmlsZV0sXG4gICAgICAgICAgICAgIHNob3dGaW5hbmNpYWxDYXRlZ29yeTogdHJ1ZSwgLy8gRW5zdXJlIGZpbmFuY2lhbCBjYXRlZ29yeSBpcyB2aXNpYmxlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgc2V0KHtcbiAgICAgICAgICAgICAgcHJvamVjdEZpbGVzOiBbLi4ucHJvamVjdEZpbGVzLCBuZXdGaWxlXSxcbiAgICAgICAgICAgICAgc2hvd1Byb2plY3RzQ2F0ZWdvcnk6IHRydWUsIC8vIEVuc3VyZSBwcm9qZWN0cyBjYXRlZ29yeSBpcyB2aXNpYmxlXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBBdXRvbWF0aWNhbGx5IG9wZW4gdGhlIG5ldyBmaWxlXG4gICAgICAgICAgZ2V0KCkub3BlblRhYihuZXdGaWxlKTtcbiAgICAgICAgfSxcblxuICAgICAgICBjcmVhdGVGb2xkZXI6IChuYW1lOiBzdHJpbmcsIGNhdGVnb3J5OiAncHJvamVjdCcgfCAnZmluYW5jaWFsJykgPT4ge1xuICAgICAgICAgIGNvbnN0IHsgcHJvamVjdEZvbGRlcnMsIGZpbmFuY2lhbEZvbGRlcnMgfSA9IGdldCgpO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIEdlbmVyYXRlIHVuaXF1ZSBJRFxuICAgICAgICAgIGNvbnN0IGlkID0gYGZvbGRlci0ke25hbWUudG9Mb3dlckNhc2UoKS5yZXBsYWNlKC9bXmEtejAtOV0vZywgJy0nKX0tJHtEYXRlLm5vdygpfWA7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gQ3JlYXRlIG5ldyBmb2xkZXJcbiAgICAgICAgICBjb25zdCBuZXdGb2xkZXI6IFByb2plY3RGb2xkZXIgPSB7XG4gICAgICAgICAgICBpZCxcbiAgICAgICAgICAgIG5hbWUsXG4gICAgICAgICAgICBjYXRlZ29yeSxcbiAgICAgICAgICAgIGNyZWF0ZWRBdDogbmV3IERhdGUoKSxcbiAgICAgICAgICB9O1xuXG4gICAgICAgICAgLy8gQWRkIHRvIGFwcHJvcHJpYXRlIGZvbGRlciBhcnJheSBhbmQgZW5zdXJlIGNhdGVnb3J5IGlzIHZpc2libGVcbiAgICAgICAgICBpZiAoY2F0ZWdvcnkgPT09ICdmaW5hbmNpYWwnKSB7XG4gICAgICAgICAgICBzZXQoe1xuICAgICAgICAgICAgICBmaW5hbmNpYWxGb2xkZXJzOiBbbmV3Rm9sZGVyLCAuLi5maW5hbmNpYWxGb2xkZXJzXSxcbiAgICAgICAgICAgICAgc2hvd0ZpbmFuY2lhbENhdGVnb3J5OiB0cnVlLCAvLyBFbnN1cmUgZmluYW5jaWFsIGNhdGVnb3J5IGlzIHZpc2libGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZXQoe1xuICAgICAgICAgICAgICBwcm9qZWN0Rm9sZGVyczogW25ld0ZvbGRlciwgLi4ucHJvamVjdEZvbGRlcnNdLFxuICAgICAgICAgICAgICBzaG93UHJvamVjdHNDYXRlZ29yeTogdHJ1ZSwgLy8gRW5zdXJlIHByb2plY3RzIGNhdGVnb3J5IGlzIHZpc2libGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBkZWxldGVGaWxlOiAoZmlsZUlkOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICBjb25zdCB7IHByb2plY3RGaWxlcywgZmluYW5jaWFsRmlsZXMsIG9wZW5UYWJzIH0gPSBnZXQoKTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBGaW5kIGFuZCByZW1vdmUgZnJvbSBhcHByb3ByaWF0ZSBhcnJheVxuICAgICAgICAgIGNvbnN0IHVwZGF0ZWRQcm9qZWN0RmlsZXMgPSBwcm9qZWN0RmlsZXMuZmlsdGVyKChmaWxlOiBQcm9qZWN0RmlsZSkgPT4gZmlsZS5pZCAhPT0gZmlsZUlkKTtcbiAgICAgICAgICBjb25zdCB1cGRhdGVkRmluYW5jaWFsRmlsZXMgPSBmaW5hbmNpYWxGaWxlcy5maWx0ZXIoKGZpbGU6IFByb2plY3RGaWxlKSA9PiBmaWxlLmlkICE9PSBmaWxlSWQpO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIENsb3NlIHRhYiBpZiBpdCdzIG9wZW5cbiAgICAgICAgICBjb25zdCB0YWJUb0Nsb3NlID0gb3BlblRhYnMuZmluZCgodGFiOiBFZGl0b3JUYWIpID0+IHRhYi5pZCA9PT0gZmlsZUlkKTtcbiAgICAgICAgICBpZiAodGFiVG9DbG9zZSkge1xuICAgICAgICAgICAgZ2V0KCkuY2xvc2VUYWIoZmlsZUlkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgXG4gICAgICAgICAgc2V0KHsgXG4gICAgICAgICAgICBwcm9qZWN0RmlsZXM6IHVwZGF0ZWRQcm9qZWN0RmlsZXMsXG4gICAgICAgICAgICBmaW5hbmNpYWxGaWxlczogdXBkYXRlZEZpbmFuY2lhbEZpbGVzIFxuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIHJlbmFtZUZpbGU6IChmaWxlSWQ6IHN0cmluZywgbmV3TmFtZTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgY29uc3QgeyBwcm9qZWN0RmlsZXMsIGZpbmFuY2lhbEZpbGVzLCBvcGVuVGFicyB9ID0gZ2V0KCk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gRmluZCB0aGUgZmlsZSB0byBnZXQgaXRzIHR5cGUgYW5kIGdlbmVyYXRlIG5ldyBmaWxlbmFtZSB3aXRoIGV4dGVuc2lvblxuICAgICAgICAgIGNvbnN0IHByb2plY3RGaWxlID0gcHJvamVjdEZpbGVzLmZpbmQoKGZpbGU6IFByb2plY3RGaWxlKSA9PiBmaWxlLmlkID09PSBmaWxlSWQpO1xuICAgICAgICAgIGNvbnN0IGZpbmFuY2lhbEZpbGUgPSBmaW5hbmNpYWxGaWxlcy5maW5kKChmaWxlOiBQcm9qZWN0RmlsZSkgPT4gZmlsZS5pZCA9PT0gZmlsZUlkKTtcbiAgICAgICAgICBjb25zdCBmaWxlID0gcHJvamVjdEZpbGUgfHwgZmluYW5jaWFsRmlsZTtcbiAgICAgICAgICBcbiAgICAgICAgICBpZiAoIWZpbGUpIHJldHVybjtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBHZW5lcmF0ZSBuZXcgZmlsZW5hbWUgd2l0aCBhcHByb3ByaWF0ZSBleHRlbnNpb25cbiAgICAgICAgICBjb25zdCBuZXdGaWxlTmFtZSA9IGAke25ld05hbWV9JHtnZXRGaWxlRXh0ZW5zaW9uKGZpbGUudHlwZSl9YDtcbiAgICAgICAgICBjb25zdCBiYXNlUGF0aCA9IGZpbGUuY2F0ZWdvcnkgPT09ICdmaW5hbmNpYWwnID8gJy9maW5hbmNpYWwtZGF0YScgOiAnL2VhYy1wcm9qZWN0cyc7XG4gICAgICAgICAgY29uc3QgbmV3RmlsZVBhdGggPSBgJHtiYXNlUGF0aH0vJHtuZXdGaWxlTmFtZX1gO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIFVwZGF0ZSB0aGUgZmlsZSBpbiBhcHByb3ByaWF0ZSBhcnJheVxuICAgICAgICAgIGNvbnN0IHVwZGF0ZWRQcm9qZWN0RmlsZXMgPSBwcm9qZWN0RmlsZXMubWFwKChmOiBQcm9qZWN0RmlsZSkgPT5cbiAgICAgICAgICAgIGYuaWQgPT09IGZpbGVJZFxuICAgICAgICAgICAgICA/IHsgLi4uZiwgbmFtZTogbmV3RmlsZU5hbWUsIGZpbGVQYXRoOiBuZXdGaWxlUGF0aCwgbW9kaWZpZWRBdDogbmV3IERhdGUoKSB9XG4gICAgICAgICAgICAgIDogZlxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBjb25zdCB1cGRhdGVkRmluYW5jaWFsRmlsZXMgPSBmaW5hbmNpYWxGaWxlcy5tYXAoKGY6IFByb2plY3RGaWxlKSA9PlxuICAgICAgICAgICAgZi5pZCA9PT0gZmlsZUlkXG4gICAgICAgICAgICAgID8geyAuLi5mLCBuYW1lOiBuZXdGaWxlTmFtZSwgZmlsZVBhdGg6IG5ld0ZpbGVQYXRoLCBtb2RpZmllZEF0OiBuZXcgRGF0ZSgpIH1cbiAgICAgICAgICAgICAgOiBmXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIC8vIFVwZGF0ZSBvcGVuIHRhYnMgaWYgdGhlIGZpbGUgaXMgb3BlblxuICAgICAgICAgIGNvbnN0IHVwZGF0ZWRUYWJzID0gb3BlblRhYnMubWFwKCh0YWI6IEVkaXRvclRhYikgPT5cbiAgICAgICAgICAgIHRhYi5pZCA9PT0gZmlsZUlkXG4gICAgICAgICAgICAgID8geyAuLi50YWIsIG5hbWU6IG5ld0ZpbGVOYW1lLCBmaWxlUGF0aDogbmV3RmlsZVBhdGgsIG1vZGlmaWVkOiB0cnVlIH1cbiAgICAgICAgICAgICAgOiB0YWJcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgc2V0KHtcbiAgICAgICAgICAgIHByb2plY3RGaWxlczogdXBkYXRlZFByb2plY3RGaWxlcyxcbiAgICAgICAgICAgIGZpbmFuY2lhbEZpbGVzOiB1cGRhdGVkRmluYW5jaWFsRmlsZXMsXG4gICAgICAgICAgICBvcGVuVGFiczogdXBkYXRlZFRhYnMsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVuYW1lRm9sZGVyOiAoZm9sZGVySWQ6IHN0cmluZywgbmV3TmFtZTogc3RyaW5nKSA9PiB7XG4gICAgICAgICAgY29uc3QgeyBwcm9qZWN0Rm9sZGVycywgZmluYW5jaWFsRm9sZGVycyB9ID0gZ2V0KCk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gVXBkYXRlIHRoZSBmb2xkZXIgaW4gYXBwcm9wcmlhdGUgYXJyYXlcbiAgICAgICAgICBjb25zdCB1cGRhdGVkUHJvamVjdEZvbGRlcnMgPSBwcm9qZWN0Rm9sZGVycy5tYXAoKGZvbGRlcjogUHJvamVjdEZvbGRlcikgPT5cbiAgICAgICAgICAgIGZvbGRlci5pZCA9PT0gZm9sZGVySWRcbiAgICAgICAgICAgICAgPyB7IC4uLmZvbGRlciwgbmFtZTogbmV3TmFtZSB9XG4gICAgICAgICAgICAgIDogZm9sZGVyXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIGNvbnN0IHVwZGF0ZWRGaW5hbmNpYWxGb2xkZXJzID0gZmluYW5jaWFsRm9sZGVycy5tYXAoKGZvbGRlcjogUHJvamVjdEZvbGRlcikgPT5cbiAgICAgICAgICAgIGZvbGRlci5pZCA9PT0gZm9sZGVySWRcbiAgICAgICAgICAgICAgPyB7IC4uLmZvbGRlciwgbmFtZTogbmV3TmFtZSB9XG4gICAgICAgICAgICAgIDogZm9sZGVyXG4gICAgICAgICAgKTtcblxuICAgICAgICAgIHNldCh7XG4gICAgICAgICAgICBwcm9qZWN0Rm9sZGVyczogdXBkYXRlZFByb2plY3RGb2xkZXJzLFxuICAgICAgICAgICAgZmluYW5jaWFsRm9sZGVyczogdXBkYXRlZEZpbmFuY2lhbEZvbGRlcnMsXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZGVsZXRlRm9sZGVyOiAoZm9sZGVySWQ6IHN0cmluZykgPT4ge1xuICAgICAgICAgIGNvbnN0IHsgcHJvamVjdEZvbGRlcnMsIGZpbmFuY2lhbEZvbGRlcnMsIHByb2plY3RGaWxlcywgZmluYW5jaWFsRmlsZXMsIG9wZW5UYWJzIH0gPSBnZXQoKTtcblxuICAgICAgICAgIC8vIEZpbmQgYWxsIGZpbGVzIHRoYXQgd2VyZSBpbiB0aGlzIGZvbGRlclxuICAgICAgICAgIGNvbnN0IGZpbGVzVG9EZWxldGUgPSBbXG4gICAgICAgICAgICAuLi5wcm9qZWN0RmlsZXMuZmlsdGVyKChmaWxlOiBQcm9qZWN0RmlsZSkgPT4gZmlsZS5mb2xkZXJJZCA9PT0gZm9sZGVySWQpLFxuICAgICAgICAgICAgLi4uZmluYW5jaWFsRmlsZXMuZmlsdGVyKChmaWxlOiBQcm9qZWN0RmlsZSkgPT4gZmlsZS5mb2xkZXJJZCA9PT0gZm9sZGVySWQpXG4gICAgICAgICAgXTtcblxuICAgICAgICAgIC8vIENsb3NlIHRhYnMgZm9yIGFsbCBmaWxlcyBpbiB0aGlzIGZvbGRlclxuICAgICAgICAgIGZpbGVzVG9EZWxldGUuZm9yRWFjaCgoZmlsZTogUHJvamVjdEZpbGUpID0+IHtcbiAgICAgICAgICAgIGNvbnN0IHRhYlRvQ2xvc2UgPSBvcGVuVGFicy5maW5kKCh0YWI6IEVkaXRvclRhYikgPT4gdGFiLmlkID09PSBmaWxlLmlkKTtcbiAgICAgICAgICAgIGlmICh0YWJUb0Nsb3NlKSB7XG4gICAgICAgICAgICAgIGdldCgpLmNsb3NlVGFiKGZpbGUuaWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIFJlbW92ZSBmcm9tIGFwcHJvcHJpYXRlIGZvbGRlciBhcnJheVxuICAgICAgICAgIGNvbnN0IHVwZGF0ZWRQcm9qZWN0Rm9sZGVycyA9IHByb2plY3RGb2xkZXJzLmZpbHRlcigoZm9sZGVyOiBQcm9qZWN0Rm9sZGVyKSA9PiBmb2xkZXIuaWQgIT09IGZvbGRlcklkKTtcbiAgICAgICAgICBjb25zdCB1cGRhdGVkRmluYW5jaWFsRm9sZGVycyA9IGZpbmFuY2lhbEZvbGRlcnMuZmlsdGVyKChmb2xkZXI6IFByb2plY3RGb2xkZXIpID0+IGZvbGRlci5pZCAhPT0gZm9sZGVySWQpO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIEFsc28gcmVtb3ZlIGFueSBmaWxlcyB0aGF0IHdlcmUgaW4gdGhpcyBmb2xkZXJcbiAgICAgICAgICBjb25zdCB1cGRhdGVkUHJvamVjdEZpbGVzID0gcHJvamVjdEZpbGVzLmZpbHRlcigoZmlsZTogUHJvamVjdEZpbGUpID0+IGZpbGUuZm9sZGVySWQgIT09IGZvbGRlcklkKTtcbiAgICAgICAgICBjb25zdCB1cGRhdGVkRmluYW5jaWFsRmlsZXMgPSBmaW5hbmNpYWxGaWxlcy5maWx0ZXIoKGZpbGU6IFByb2plY3RGaWxlKSA9PiBmaWxlLmZvbGRlcklkICE9PSBmb2xkZXJJZCk7XG4gICAgICAgICAgXG4gICAgICAgICAgc2V0KHsgXG4gICAgICAgICAgICBwcm9qZWN0Rm9sZGVyczogdXBkYXRlZFByb2plY3RGb2xkZXJzLFxuICAgICAgICAgICAgZmluYW5jaWFsRm9sZGVyczogdXBkYXRlZEZpbmFuY2lhbEZvbGRlcnMsXG4gICAgICAgICAgICBwcm9qZWN0RmlsZXM6IHVwZGF0ZWRQcm9qZWN0RmlsZXMsXG4gICAgICAgICAgICBmaW5hbmNpYWxGaWxlczogdXBkYXRlZEZpbmFuY2lhbEZpbGVzXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgbW92ZVRvVHJhc2g6IChpdGVtOiBQcm9qZWN0RmlsZSB8IFByb2plY3RGb2xkZXIsIHR5cGU6ICdmaWxlJyB8ICdmb2xkZXInKSA9PiB7XG4gICAgICAgICAgY29uc3QgeyB0cmFzaEl0ZW1zLCBwcm9qZWN0RmlsZXMsIGZpbmFuY2lhbEZpbGVzLCBwcm9qZWN0Rm9sZGVycywgZmluYW5jaWFsRm9sZGVycywgb3BlblRhYnMgfSA9IGdldCgpO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIENyZWF0ZSB0cmFzaCBpdGVtXG4gICAgICAgICAgY29uc3QgdHJhc2hJdGVtOiBUcmFzaEl0ZW0gPSB7XG4gICAgICAgICAgICBpZDogYHRyYXNoXyR7aXRlbS5pZH1fJHtEYXRlLm5vdygpfWAsXG4gICAgICAgICAgICBuYW1lOiBpdGVtLm5hbWUsXG4gICAgICAgICAgICB0eXBlLFxuICAgICAgICAgICAgb3JpZ2luYWxEYXRhOiBpdGVtLFxuICAgICAgICAgICAgZGVsZXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgY2F0ZWdvcnk6IGl0ZW0uY2F0ZWdvcnlcbiAgICAgICAgICB9O1xuICAgICAgICAgIFxuICAgICAgICAgIGlmICh0eXBlID09PSAnZmlsZScpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGUgPSBpdGVtIGFzIFByb2plY3RGaWxlO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBDbG9zZSB0YWIgaWYgaXQncyBvcGVuXG4gICAgICAgICAgICBjb25zdCB0YWJUb0Nsb3NlID0gb3BlblRhYnMuZmluZCgodGFiOiBFZGl0b3JUYWIpID0+IHRhYi5pZCA9PT0gZmlsZS5pZCk7XG4gICAgICAgICAgICBpZiAodGFiVG9DbG9zZSkge1xuICAgICAgICAgICAgICBnZXQoKS5jbG9zZVRhYihmaWxlLmlkKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gUmVtb3ZlIGZyb20gYXBwcm9wcmlhdGUgZmlsZSBhcnJheVxuICAgICAgICAgICAgY29uc3QgdXBkYXRlZFByb2plY3RGaWxlcyA9IHByb2plY3RGaWxlcy5maWx0ZXIoKGY6IFByb2plY3RGaWxlKSA9PiBmLmlkICE9PSBmaWxlLmlkKTtcbiAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRGaW5hbmNpYWxGaWxlcyA9IGZpbmFuY2lhbEZpbGVzLmZpbHRlcigoZjogUHJvamVjdEZpbGUpID0+IGYuaWQgIT09IGZpbGUuaWQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBzZXQoe1xuICAgICAgICAgICAgICB0cmFzaEl0ZW1zOiBbLi4udHJhc2hJdGVtcywgdHJhc2hJdGVtXSxcbiAgICAgICAgICAgICAgcHJvamVjdEZpbGVzOiB1cGRhdGVkUHJvamVjdEZpbGVzLFxuICAgICAgICAgICAgICBmaW5hbmNpYWxGaWxlczogdXBkYXRlZEZpbmFuY2lhbEZpbGVzXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29uc3QgZm9sZGVyID0gaXRlbSBhcyBQcm9qZWN0Rm9sZGVyO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBGaW5kIGFsbCBmaWxlcyB0aGF0IHdlcmUgaW4gdGhpcyBmb2xkZXIgYW5kIG1vdmUgdGhlbSB0byB0cmFzaCB0b29cbiAgICAgICAgICAgIGNvbnN0IGZpbGVzVG9UcmFzaCA9IFtcbiAgICAgICAgICAgICAgLi4ucHJvamVjdEZpbGVzLmZpbHRlcigoZmlsZTogUHJvamVjdEZpbGUpID0+IGZpbGUuZm9sZGVySWQgPT09IGZvbGRlci5pZCksXG4gICAgICAgICAgICAgIC4uLmZpbmFuY2lhbEZpbGVzLmZpbHRlcigoZmlsZTogUHJvamVjdEZpbGUpID0+IGZpbGUuZm9sZGVySWQgPT09IGZvbGRlci5pZClcbiAgICAgICAgICAgIF07XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIENsb3NlIHRhYnMgZm9yIGFsbCBmaWxlcyBpbiB0aGlzIGZvbGRlclxuICAgICAgICAgICAgZmlsZXNUb1RyYXNoLmZvckVhY2goKGZpbGU6IFByb2plY3RGaWxlKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnN0IHRhYlRvQ2xvc2UgPSBvcGVuVGFicy5maW5kKCh0YWI6IEVkaXRvclRhYikgPT4gdGFiLmlkID09PSBmaWxlLmlkKTtcbiAgICAgICAgICAgICAgaWYgKHRhYlRvQ2xvc2UpIHtcbiAgICAgICAgICAgICAgICBnZXQoKS5jbG9zZVRhYihmaWxlLmlkKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIC8vIENyZWF0ZSB0cmFzaCBpdGVtcyBmb3IgYWxsIGZpbGVzIGluIHRoZSBmb2xkZXJcbiAgICAgICAgICAgIGNvbnN0IGZpbGVUcmFzaEl0ZW1zID0gZmlsZXNUb1RyYXNoLm1hcCgoZmlsZTogUHJvamVjdEZpbGUpID0+ICh7XG4gICAgICAgICAgICAgIGlkOiBgdHJhc2hfJHtmaWxlLmlkfV8ke0RhdGUubm93KCl9YCxcbiAgICAgICAgICAgICAgbmFtZTogZmlsZS5uYW1lLFxuICAgICAgICAgICAgICB0eXBlOiAnZmlsZScgYXMgY29uc3QsXG4gICAgICAgICAgICAgIG9yaWdpbmFsRGF0YTogZmlsZSxcbiAgICAgICAgICAgICAgZGVsZXRlZEF0OiBuZXcgRGF0ZSgpLFxuICAgICAgICAgICAgICBjYXRlZ29yeTogZmlsZS5jYXRlZ29yeVxuICAgICAgICAgICAgfSkpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBSZW1vdmUgZm9sZGVyIGFuZCBpdHMgZmlsZXMgZnJvbSBhcnJheXNcbiAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRQcm9qZWN0Rm9sZGVycyA9IHByb2plY3RGb2xkZXJzLmZpbHRlcigoZjogUHJvamVjdEZvbGRlcikgPT4gZi5pZCAhPT0gZm9sZGVyLmlkKTtcbiAgICAgICAgICAgIGNvbnN0IHVwZGF0ZWRGaW5hbmNpYWxGb2xkZXJzID0gZmluYW5jaWFsRm9sZGVycy5maWx0ZXIoKGY6IFByb2plY3RGb2xkZXIpID0+IGYuaWQgIT09IGZvbGRlci5pZCk7XG4gICAgICAgICAgICBjb25zdCB1cGRhdGVkUHJvamVjdEZpbGVzID0gcHJvamVjdEZpbGVzLmZpbHRlcigoZmlsZTogUHJvamVjdEZpbGUpID0+IGZpbGUuZm9sZGVySWQgIT09IGZvbGRlci5pZCk7XG4gICAgICAgICAgICBjb25zdCB1cGRhdGVkRmluYW5jaWFsRmlsZXMgPSBmaW5hbmNpYWxGaWxlcy5maWx0ZXIoKGZpbGU6IFByb2plY3RGaWxlKSA9PiBmaWxlLmZvbGRlcklkICE9PSBmb2xkZXIuaWQpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICBzZXQoe1xuICAgICAgICAgICAgICB0cmFzaEl0ZW1zOiBbLi4udHJhc2hJdGVtcywgdHJhc2hJdGVtLCAuLi5maWxlVHJhc2hJdGVtc10sXG4gICAgICAgICAgICAgIHByb2plY3RGb2xkZXJzOiB1cGRhdGVkUHJvamVjdEZvbGRlcnMsXG4gICAgICAgICAgICAgIGZpbmFuY2lhbEZvbGRlcnM6IHVwZGF0ZWRGaW5hbmNpYWxGb2xkZXJzLFxuICAgICAgICAgICAgICBwcm9qZWN0RmlsZXM6IHVwZGF0ZWRQcm9qZWN0RmlsZXMsXG4gICAgICAgICAgICAgIGZpbmFuY2lhbEZpbGVzOiB1cGRhdGVkRmluYW5jaWFsRmlsZXNcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICByZXN0b3JlRnJvbVRyYXNoOiAodHJhc2hJdGVtSWQ6IHN0cmluZykgPT4ge1xuICAgICAgICAgIGNvbnN0IHsgdHJhc2hJdGVtcywgcHJvamVjdEZpbGVzLCBmaW5hbmNpYWxGaWxlcywgcHJvamVjdEZvbGRlcnMsIGZpbmFuY2lhbEZvbGRlcnMgfSA9IGdldCgpO1xuICAgICAgICAgIFxuICAgICAgICAgIGNvbnN0IHRyYXNoSXRlbSA9IHRyYXNoSXRlbXMuZmluZChpdGVtID0+IGl0ZW0uaWQgPT09IHRyYXNoSXRlbUlkKTtcbiAgICAgICAgICBpZiAoIXRyYXNoSXRlbSkgcmV0dXJuO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIFJlbW92ZSBmcm9tIHRyYXNoXG4gICAgICAgICAgY29uc3QgdXBkYXRlZFRyYXNoSXRlbXMgPSB0cmFzaEl0ZW1zLmZpbHRlcihpdGVtID0+IGl0ZW0uaWQgIT09IHRyYXNoSXRlbUlkKTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBSZXN0b3JlIHRvIGFwcHJvcHJpYXRlIGFycmF5XG4gICAgICAgICAgaWYgKHRyYXNoSXRlbS50eXBlID09PSAnZmlsZScpIHtcbiAgICAgICAgICAgIGNvbnN0IGZpbGUgPSB0cmFzaEl0ZW0ub3JpZ2luYWxEYXRhIGFzIFByb2plY3RGaWxlO1xuICAgICAgICAgICAgaWYgKGZpbGUuY2F0ZWdvcnkgPT09ICdwcm9qZWN0Jykge1xuICAgICAgICAgICAgICBzZXQoe1xuICAgICAgICAgICAgICAgIHRyYXNoSXRlbXM6IHVwZGF0ZWRUcmFzaEl0ZW1zLFxuICAgICAgICAgICAgICAgIHByb2plY3RGaWxlczogWy4uLnByb2plY3RGaWxlcywgeyAuLi5maWxlLCBtb2RpZmllZEF0OiBuZXcgRGF0ZSgpIH1dXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgc2V0KHtcbiAgICAgICAgICAgICAgICB0cmFzaEl0ZW1zOiB1cGRhdGVkVHJhc2hJdGVtcyxcbiAgICAgICAgICAgICAgICBmaW5hbmNpYWxGaWxlczogWy4uLmZpbmFuY2lhbEZpbGVzLCB7IC4uLmZpbGUsIG1vZGlmaWVkQXQ6IG5ldyBEYXRlKCkgfV1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIGNvbnN0IGZvbGRlciA9IHRyYXNoSXRlbS5vcmlnaW5hbERhdGEgYXMgUHJvamVjdEZvbGRlcjtcbiAgICAgICAgICAgIGlmIChmb2xkZXIuY2F0ZWdvcnkgPT09ICdwcm9qZWN0Jykge1xuICAgICAgICAgICAgICBzZXQoe1xuICAgICAgICAgICAgICAgIHRyYXNoSXRlbXM6IHVwZGF0ZWRUcmFzaEl0ZW1zLFxuICAgICAgICAgICAgICAgIHByb2plY3RGb2xkZXJzOiBbLi4ucHJvamVjdEZvbGRlcnMsIGZvbGRlcl1cbiAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICBzZXQoe1xuICAgICAgICAgICAgICAgIHRyYXNoSXRlbXM6IHVwZGF0ZWRUcmFzaEl0ZW1zLFxuICAgICAgICAgICAgICAgIGZpbmFuY2lhbEZvbGRlcnM6IFsuLi5maW5hbmNpYWxGb2xkZXJzLCBmb2xkZXJdXG4gICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSxcblxuICAgICAgICBwZXJtYW5lbnRseURlbGV0ZTogKHRyYXNoSXRlbUlkOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICBjb25zdCB7IHRyYXNoSXRlbXMgfSA9IGdldCgpO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIFJlbW92ZSBmcm9tIHRyYXNoIHBlcm1hbmVudGx5XG4gICAgICAgICAgY29uc3QgdXBkYXRlZFRyYXNoSXRlbXMgPSB0cmFzaEl0ZW1zLmZpbHRlcihpdGVtID0+IGl0ZW0uaWQgIT09IHRyYXNoSXRlbUlkKTtcbiAgICAgICAgICBzZXQoeyB0cmFzaEl0ZW1zOiB1cGRhdGVkVHJhc2hJdGVtcyB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBlbXB0eVRyYXNoOiAoKSA9PiB7XG4gICAgICAgICAgc2V0KHsgdHJhc2hJdGVtczogW10gfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgY2xlYXJQcm9qZWN0Q2F0ZWdvcnk6ICgpID0+IHtcbiAgICAgICAgICBjb25zdCB7IG9wZW5UYWJzIH0gPSBnZXQoKTtcbiAgICAgICAgICBcbiAgICAgICAgICAvLyBDbG9zZSBhbGwgcHJvamVjdC1yZWxhdGVkIHRhYnNcbiAgICAgICAgICBjb25zdCBwcm9qZWN0VGFiSWRzID0gb3BlblRhYnNcbiAgICAgICAgICAgIC5maWx0ZXIoKHRhYjogRWRpdG9yVGFiKSA9PiB7XG4gICAgICAgICAgICAgIC8vIEZpbmQgdGhlIGNvcnJlc3BvbmRpbmcgZmlsZSB0byBjaGVjayBpdHMgY2F0ZWdvcnlcbiAgICAgICAgICAgICAgY29uc3QgeyBwcm9qZWN0RmlsZXMgfSA9IGdldCgpO1xuICAgICAgICAgICAgICBjb25zdCBmaWxlID0gcHJvamVjdEZpbGVzLmZpbmQoKGY6IFByb2plY3RGaWxlKSA9PiBmLmlkID09PSB0YWIuaWQpO1xuICAgICAgICAgICAgICByZXR1cm4gZmlsZT8uY2F0ZWdvcnkgPT09ICdwcm9qZWN0JztcbiAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAubWFwKCh0YWI6IEVkaXRvclRhYikgPT4gdGFiLmlkKTtcbiAgICAgICAgICBcbiAgICAgICAgICBwcm9qZWN0VGFiSWRzLmZvckVhY2goKHRhYklkOiBzdHJpbmcpID0+IGdldCgpLmNsb3NlVGFiKHRhYklkKSk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gQ2xlYXIgYWxsIHByb2plY3QgZmlsZXMgYW5kIGZvbGRlcnNcbiAgICAgICAgICBzZXQoe1xuICAgICAgICAgICAgcHJvamVjdEZpbGVzOiBbXSxcbiAgICAgICAgICAgIHByb2plY3RGb2xkZXJzOiBbXSxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBjbGVhckZpbmFuY2lhbENhdGVnb3J5OiAoKSA9PiB7XG4gICAgICAgICAgY29uc3QgeyBvcGVuVGFicyB9ID0gZ2V0KCk7XG4gICAgICAgICAgXG4gICAgICAgICAgLy8gQ2xvc2UgYWxsIGZpbmFuY2lhbC1yZWxhdGVkIHRhYnNcbiAgICAgICAgICBjb25zdCBmaW5hbmNpYWxUYWJJZHMgPSBvcGVuVGFic1xuICAgICAgICAgICAgLmZpbHRlcigodGFiOiBFZGl0b3JUYWIpID0+IHtcbiAgICAgICAgICAgICAgLy8gRmluZCB0aGUgY29ycmVzcG9uZGluZyBmaWxlIHRvIGNoZWNrIGl0cyBjYXRlZ29yeVxuICAgICAgICAgICAgICBjb25zdCB7IGZpbmFuY2lhbEZpbGVzIH0gPSBnZXQoKTtcbiAgICAgICAgICAgICAgY29uc3QgZmlsZSA9IGZpbmFuY2lhbEZpbGVzLmZpbmQoKGY6IFByb2plY3RGaWxlKSA9PiBmLmlkID09PSB0YWIuaWQpO1xuICAgICAgICAgICAgICByZXR1cm4gZmlsZT8uY2F0ZWdvcnkgPT09ICdmaW5hbmNpYWwnO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5tYXAoKHRhYjogRWRpdG9yVGFiKSA9PiB0YWIuaWQpO1xuICAgICAgICAgIFxuICAgICAgICAgIGZpbmFuY2lhbFRhYklkcy5mb3JFYWNoKCh0YWJJZDogc3RyaW5nKSA9PiBnZXQoKS5jbG9zZVRhYih0YWJJZCkpO1xuICAgICAgICAgIFxuICAgICAgICAgIC8vIENsZWFyIGFsbCBmaW5hbmNpYWwgZmlsZXMgYW5kIGZvbGRlcnNcbiAgICAgICAgICBzZXQoe1xuICAgICAgICAgICAgZmluYW5jaWFsRmlsZXM6IFtdLFxuICAgICAgICAgICAgZmluYW5jaWFsRm9sZGVyczogW10sXG4gICAgICAgICAgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgZGVsZXRlUHJvamVjdHNDYXRlZ29yeTogKCkgPT4ge1xuICAgICAgICAgIGdldCgpLmNsZWFyUHJvamVjdENhdGVnb3J5KCk7XG4gICAgICAgICAgc2V0KHsgc2hvd1Byb2plY3RzQ2F0ZWdvcnk6IGZhbHNlIH0pO1xuICAgICAgICB9LFxuXG4gICAgICAgIGRlbGV0ZUZpbmFuY2lhbENhdGVnb3J5OiAoKSA9PiB7XG4gICAgICAgICAgZ2V0KCkuY2xlYXJGaW5hbmNpYWxDYXRlZ29yeSgpO1xuICAgICAgICAgIHNldCh7IHNob3dGaW5hbmNpYWxDYXRlZ29yeTogZmFsc2UgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVvcmRlclByb2plY3RGb2xkZXJzOiAoZnJvbUluZGV4OiBudW1iZXIsIHRvSW5kZXg6IG51bWJlcikgPT4ge1xuICAgICAgICAgIGNvbnN0IHsgcHJvamVjdEZvbGRlcnMgfSA9IGdldCgpO1xuICAgICAgICAgIGNvbnN0IG5ld0ZvbGRlcnMgPSBbLi4ucHJvamVjdEZvbGRlcnNdO1xuICAgICAgICAgIGNvbnN0IFttb3ZlZEZvbGRlcl0gPSBuZXdGb2xkZXJzLnNwbGljZShmcm9tSW5kZXgsIDEpO1xuICAgICAgICAgIG5ld0ZvbGRlcnMuc3BsaWNlKHRvSW5kZXgsIDAsIG1vdmVkRm9sZGVyKTtcbiAgICAgICAgICBcbiAgICAgICAgICBzZXQoeyBwcm9qZWN0Rm9sZGVyczogbmV3Rm9sZGVycyB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBzYXZlRmlsZTogKHRhYklkOiBzdHJpbmcpID0+IHtcbiAgICAgICAgICBjb25zdCB7IG9wZW5UYWJzLCBwcm9qZWN0RmlsZXMsIGZpbmFuY2lhbEZpbGVzIH0gPSBnZXQoKTtcbiAgICAgICAgICBjb25zdCB0YWIgPSBvcGVuVGFicy5maW5kKCh0OiBFZGl0b3JUYWIpID0+IHQuaWQgPT09IHRhYklkKTtcbiAgICAgICAgICBcbiAgICAgICAgICBpZiAoIXRhYikgcmV0dXJuO1xuXG4gICAgICAgICAgLy8gVXBkYXRlIHRoZSBmaWxlIGNvbnRlbnQgaW4gYXBwcm9wcmlhdGUgYXJyYXlcbiAgICAgICAgICBjb25zdCB1cGRhdGVkUHJvamVjdEZpbGVzID0gcHJvamVjdEZpbGVzLm1hcCgoZmlsZTogUHJvamVjdEZpbGUpID0+XG4gICAgICAgICAgICBmaWxlLmlkID09PSB0YWJJZFxuICAgICAgICAgICAgICA/IHsgLi4uZmlsZSwgY29udGVudDogdGFiLmNvbnRlbnQsIG1vZGlmaWVkQXQ6IG5ldyBEYXRlKCkgfVxuICAgICAgICAgICAgICA6IGZpbGVcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgY29uc3QgdXBkYXRlZEZpbmFuY2lhbEZpbGVzID0gZmluYW5jaWFsRmlsZXMubWFwKChmaWxlOiBQcm9qZWN0RmlsZSkgPT5cbiAgICAgICAgICAgIGZpbGUuaWQgPT09IHRhYklkXG4gICAgICAgICAgICAgID8geyAuLi5maWxlLCBjb250ZW50OiB0YWIuY29udGVudCwgbW9kaWZpZWRBdDogbmV3IERhdGUoKSB9XG4gICAgICAgICAgICAgIDogZmlsZVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBjb25zdCB1cGRhdGVkVGFicyA9IG9wZW5UYWJzLm1hcCgodDogRWRpdG9yVGFiKSA9PlxuICAgICAgICAgICAgdC5pZCA9PT0gdGFiSWRcbiAgICAgICAgICAgICAgPyB7IC4uLnQsIG1vZGlmaWVkOiBmYWxzZSB9XG4gICAgICAgICAgICAgIDogdFxuICAgICAgICAgICk7XG5cbiAgICAgICAgICBzZXQoe1xuICAgICAgICAgICAgcHJvamVjdEZpbGVzOiB1cGRhdGVkUHJvamVjdEZpbGVzLFxuICAgICAgICAgICAgZmluYW5jaWFsRmlsZXM6IHVwZGF0ZWRGaW5hbmNpYWxGaWxlcyxcbiAgICAgICAgICAgIG9wZW5UYWJzOiB1cGRhdGVkVGFicyxcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSxcblxuICAgICAgICBzZXRFcnJvcjogKGVycm9yOiBzdHJpbmcgfCBudWxsKSA9PiB7XG4gICAgICAgICAgc2V0KHsgZXJyb3IgfSk7XG4gICAgICAgIH0sXG5cbiAgICAgICAgcmVzZXQ6ICgpID0+IHtcbiAgICAgICAgICBzZXQoe1xuICAgICAgICAgICAgb3BlblRhYnM6IFtdLFxuICAgICAgICAgICAgYWN0aXZlVGFiOiAnJyxcbiAgICAgICAgICAgIHByb2plY3RGaWxlczogaW5pdGlhbFByb2plY3RGaWxlcyxcbiAgICAgICAgICAgIGZpbmFuY2lhbEZpbGVzOiBpbml0aWFsRmluYW5jaWFsRmlsZXMsXG4gICAgICAgICAgICBwcm9qZWN0Rm9sZGVyczogW10sXG4gICAgICAgICAgICBmaW5hbmNpYWxGb2xkZXJzOiBbXSxcbiAgICAgICAgICAgIHNob3dQcm9qZWN0c0NhdGVnb3J5OiB0cnVlLFxuICAgICAgICAgICAgc2hvd0ZpbmFuY2lhbENhdGVnb3J5OiB0cnVlLFxuICAgICAgICAgICAgaXNMb2FkaW5nOiBmYWxzZSxcbiAgICAgICAgICAgIGVycm9yOiBudWxsLFxuICAgICAgICAgIH0pO1xuICAgICAgICB9LFxuICAgICAgfSksXG4gICAgICB7XG4gICAgICAgIG5hbWU6ICdlZGl0b3Itc3RvcmFnZScsXG4gICAgICAgIC8vIE9ubHkgcGVyc2lzdCBzcGVjaWZpYyBmaWVsZHNcbiAgICAgICAgcGFydGlhbGl6ZTogKHN0YXRlKSA9PiAoeyBcbiAgICAgICAgICBvcGVuVGFiczogc3RhdGUub3BlblRhYnMubWFwKHRhYiA9PiAoe1xuICAgICAgICAgICAgaWQ6IHRhYi5pZCxcbiAgICAgICAgICAgIG5hbWU6IHRhYi5uYW1lLFxuICAgICAgICAgICAgbW9kaWZpZWQ6IHRhYi5tb2RpZmllZCxcbiAgICAgICAgICAgIGNvbnRlbnQ6IHRhYi5jb250ZW50LFxuICAgICAgICAgICAgZmlsZVBhdGg6IHRhYi5maWxlUGF0aCxcbiAgICAgICAgICAgIHR5cGU6IHRhYi50eXBlLFxuICAgICAgICAgICAgLy8gV2UnbGwgbmVlZCB0byByZXN0b3JlIHRoZSBpY29uIGJhc2VkIG9uIGZpbGUgdHlwZVxuICAgICAgICAgIH0pKSxcbiAgICAgICAgICBhY3RpdmVUYWI6IHN0YXRlLmFjdGl2ZVRhYixcbiAgICAgICAgICBwcm9qZWN0RmlsZXM6IHN0YXRlLnByb2plY3RGaWxlcyxcbiAgICAgICAgICBmaW5hbmNpYWxGaWxlczogc3RhdGUuZmluYW5jaWFsRmlsZXMsXG4gICAgICAgICAgcHJvamVjdEZvbGRlcnM6IHN0YXRlLnByb2plY3RGb2xkZXJzLFxuICAgICAgICAgIGZpbmFuY2lhbEZvbGRlcnM6IHN0YXRlLmZpbmFuY2lhbEZvbGRlcnMsXG4gICAgICAgICAgc2hvd1Byb2plY3RzQ2F0ZWdvcnk6IHN0YXRlLnNob3dQcm9qZWN0c0NhdGVnb3J5LFxuICAgICAgICAgIHNob3dGaW5hbmNpYWxDYXRlZ29yeTogc3RhdGUuc2hvd0ZpbmFuY2lhbENhdGVnb3J5LFxuICAgICAgICB9KSxcbiAgICAgICAgLy8gQ3VzdG9tIHN0b3JhZ2UgdG8gaGFuZGxlIGljb24gcmVzdG9yYXRpb25cbiAgICAgICAgc3RvcmFnZToge1xuICAgICAgICAgIGdldEl0ZW06IChuYW1lKSA9PiB7XG4gICAgICAgICAgICBjb25zdCBzdHIgPSBsb2NhbFN0b3JhZ2UuZ2V0SXRlbShuYW1lKTtcbiAgICAgICAgICAgIGlmICghc3RyKSByZXR1cm4gbnVsbDtcbiAgICAgICAgICAgIGNvbnN0IHsgc3RhdGUgfSA9IEpTT04ucGFyc2Uoc3RyKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gUmVzdG9yZSBpY29ucyBiYXNlZCBvbiBmaWxlIHR5cGVcbiAgICAgICAgICAgIGNvbnN0IHJlc3RvcmVkVGFicyA9IChzdGF0ZS5vcGVuVGFicyB8fCBbXSkubWFwKCh0YWI6IE9taXQ8RWRpdG9yVGFiLCAnaWNvbic+KSA9PiB7XG4gICAgICAgICAgICAgIGxldCBpY29uID0gRmlsZUNvZGU7XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICBzd2l0Y2ggKHRhYi50eXBlKSB7XG4gICAgICAgICAgICAgICAgY2FzZSAndHlwZXNjcmlwdCc6XG4gICAgICAgICAgICAgICAgY2FzZSAnamF2YXNjcmlwdCc6XG4gICAgICAgICAgICAgICAgICBpY29uID0gRmlsZUNvZGU7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdqc29uJzpcbiAgICAgICAgICAgICAgICAgIGljb24gPSBCcmFjZXM7XG4gICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBjYXNlICdleGNlbCc6XG4gICAgICAgICAgICAgICAgICBpY29uID0gRmlsZVNwcmVhZHNoZWV0O1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAnbWFya2Rvd24nOlxuICAgICAgICAgICAgICAgICAgaWNvbiA9IEZpbGVUZXh0O1xuICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICAgICAgY2FzZSAncGRmJzpcbiAgICAgICAgICAgICAgICAgIGljb24gPSBGaWxlVHlwZTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIFxuICAgICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIC4uLnRhYixcbiAgICAgICAgICAgICAgICBpY29uLFxuICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgIHN0YXRlOiB7XG4gICAgICAgICAgICAgICAgLi4uc3RhdGUsXG4gICAgICAgICAgICAgICAgb3BlblRhYnM6IHJlc3RvcmVkVGFicyxcbiAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSxcbiAgICAgICAgICBzZXRJdGVtOiAobmFtZSwgdmFsdWUpID0+IHtcbiAgICAgICAgICAgIGxvY2FsU3RvcmFnZS5zZXRJdGVtKG5hbWUsIEpTT04uc3RyaW5naWZ5KHZhbHVlKSk7XG4gICAgICAgICAgfSxcbiAgICAgICAgICByZW1vdmVJdGVtOiAobmFtZSkgPT4gbG9jYWxTdG9yYWdlLnJlbW92ZUl0ZW0obmFtZSksXG4gICAgICAgIH0sXG4gICAgICB9XG4gICAgKSxcbiAgICB7IG5hbWU6ICdlZGl0b3Itc3RvcmUnIH1cbiAgKVxuKTsgIl0sIm5hbWVzIjpbIkF0U2lnbiIsIkJyYWNlcyIsIkNhbWVyYSIsIkZpbGVDb2RlIiwiRmlsZVNwcmVhZHNoZWV0IiwiRmlsZVRleHQiLCJGaWxlVHlwZSIsIkhhc2giLCJNZXNzYWdlU3F1YXJlIiwiY3JlYXRlIiwiZGV2dG9vbHMiLCJwZXJzaXN0IiwiZ2V0RmlsZUljb24iLCJ0eXBlIiwiZ2V0RmlsZUV4dGVuc2lvbiIsImdldERlZmF1bHRDb250ZW50IiwibmFtZSIsInJlcGxhY2UiLCJEYXRlIiwidG9JU09TdHJpbmciLCJ0b0xvY2FsZURhdGVTdHJpbmciLCJpbml0aWFsUHJvamVjdEZpbGVzIiwiaWQiLCJpY29uIiwiY2F0ZWdvcnkiLCJjb250ZW50IiwiZmlsZVBhdGgiLCJjcmVhdGVkQXQiLCJtb2RpZmllZEF0IiwiaW5pdGlhbEZpbmFuY2lhbEZpbGVzIiwidXNlRWRpdG9yU3RvcmUiLCJzZXQiLCJnZXQiLCJvcGVuVGFicyIsImFjdGl2ZVRhYiIsInByb2plY3RGaWxlcyIsImZpbmFuY2lhbEZpbGVzIiwicHJvamVjdEZvbGRlcnMiLCJmaW5hbmNpYWxGb2xkZXJzIiwidHJhc2hJdGVtcyIsInNob3dQcm9qZWN0c0NhdGVnb3J5Iiwic2hvd0ZpbmFuY2lhbENhdGVnb3J5IiwiaXNMb2FkaW5nIiwiZXJyb3IiLCJvcGVuVGFiIiwiZmlsZSIsImV4aXN0aW5nVGFiIiwiZmluZCIsInRhYiIsIm5ld1RhYiIsIm1vZGlmaWVkIiwib3BlblNwZWNpYWxUYWIiLCJjbG9zZVRhYiIsInRhYklkIiwidGFiSW5kZXgiLCJmaW5kSW5kZXgiLCJuZXdUYWJzIiwiZmlsdGVyIiwibmV3QWN0aXZlVGFiIiwibGVuZ3RoIiwibmV4dEluZGV4IiwiY2xvc2VBbGxUYWJzIiwic2V0QWN0aXZlVGFiIiwidGFiRXhpc3RzIiwic29tZSIsInVwZGF0ZVRhYkNvbnRlbnQiLCJ1cGRhdGVkVGFicyIsIm1hcCIsInVwZGF0ZUZpbGVDb250ZW50IiwidXBkYXRlRmlsZVN0YXR1cyIsImZpbGVJZCIsInN0YXR1cyIsInVwZGF0ZWRQcm9qZWN0RmlsZXMiLCJ1cGRhdGVkRmluYW5jaWFsRmlsZXMiLCJjcmVhdGVOZXdGaWxlIiwiZm9sZGVySWQiLCJ0b0xvd2VyQ2FzZSIsIm5vdyIsImZpbGVOYW1lIiwiYmFzZVBhdGgiLCJuZXdGaWxlIiwiaW5jbHVkZXMiLCJ1bmRlZmluZWQiLCJjcmVhdGVGb2xkZXIiLCJuZXdGb2xkZXIiLCJkZWxldGVGaWxlIiwidGFiVG9DbG9zZSIsInJlbmFtZUZpbGUiLCJuZXdOYW1lIiwicHJvamVjdEZpbGUiLCJmaW5hbmNpYWxGaWxlIiwibmV3RmlsZU5hbWUiLCJuZXdGaWxlUGF0aCIsImYiLCJyZW5hbWVGb2xkZXIiLCJ1cGRhdGVkUHJvamVjdEZvbGRlcnMiLCJmb2xkZXIiLCJ1cGRhdGVkRmluYW5jaWFsRm9sZGVycyIsImRlbGV0ZUZvbGRlciIsImZpbGVzVG9EZWxldGUiLCJmb3JFYWNoIiwibW92ZVRvVHJhc2giLCJpdGVtIiwidHJhc2hJdGVtIiwib3JpZ2luYWxEYXRhIiwiZGVsZXRlZEF0IiwiZmlsZXNUb1RyYXNoIiwiZmlsZVRyYXNoSXRlbXMiLCJyZXN0b3JlRnJvbVRyYXNoIiwidHJhc2hJdGVtSWQiLCJ1cGRhdGVkVHJhc2hJdGVtcyIsInBlcm1hbmVudGx5RGVsZXRlIiwiZW1wdHlUcmFzaCIsImNsZWFyUHJvamVjdENhdGVnb3J5IiwicHJvamVjdFRhYklkcyIsImNsZWFyRmluYW5jaWFsQ2F0ZWdvcnkiLCJmaW5hbmNpYWxUYWJJZHMiLCJkZWxldGVQcm9qZWN0c0NhdGVnb3J5IiwiZGVsZXRlRmluYW5jaWFsQ2F0ZWdvcnkiLCJyZW9yZGVyUHJvamVjdEZvbGRlcnMiLCJmcm9tSW5kZXgiLCJ0b0luZGV4IiwibmV3Rm9sZGVycyIsIm1vdmVkRm9sZGVyIiwic3BsaWNlIiwic2F2ZUZpbGUiLCJ0Iiwic2V0RXJyb3IiLCJyZXNldCIsInBhcnRpYWxpemUiLCJzdGF0ZSIsInN0b3JhZ2UiLCJnZXRJdGVtIiwic3RyIiwibG9jYWxTdG9yYWdlIiwiSlNPTiIsInBhcnNlIiwicmVzdG9yZWRUYWJzIiwic2V0SXRlbSIsInZhbHVlIiwic3RyaW5naWZ5IiwicmVtb3ZlSXRlbSJdLCJpZ25vcmVMaXN0IjpbXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(app-pages-browser)/./store/editor/index.ts\n"));

/***/ })

});