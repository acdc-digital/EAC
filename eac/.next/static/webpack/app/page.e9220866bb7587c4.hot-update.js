"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./store/agents/cmoAgent.ts":
/*!**********************************!*\
  !*** ./store/agents/cmoAgent.ts ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   CMOAgent: () => (/* binding */ CMOAgent),\n/* harmony export */   cmoAgent: () => (/* binding */ cmoAgent)\n/* harmony export */ });\n/* harmony import */ var _base__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./base */ \"(app-pages-browser)/./store/agents/base.ts\");\n// CMO Agent - Marketing Campaign Strategy and Planning\n// Creates comprehensive marketing campaign plans and strategies\n\nclass CMOAgent extends _base__WEBPACK_IMPORTED_MODULE_0__.BaseAgent {\n    async execute(tool, input, mutations, sessionId) {\n        try {\n            console.log('🎯 CMO Agent: Starting campaign planning for:', input);\n            // Clean the input\n            const cleanInput = input.replace(/^\\/cmo\\s*/i, '').trim();\n            if (!cleanInput) {\n                return this.getWelcomeMessage();\n            }\n            const currentSessionId = sessionId || 'default';\n            // Check if we're continuing an existing conversation\n            if (this.campaignState.has(currentSessionId)) {\n                return await this.continueConversation(currentSessionId, cleanInput, mutations);\n            } else {\n                return await this.startNewConversation(currentSessionId, cleanInput, mutations);\n            }\n        } catch (error) {\n            console.error(\"❌ CMO Agent execution failed:\", error);\n            return '❌ **CMO Agent Error**\\n\\nFailed to process campaign request: \"'.concat(input, '\"\\n\\nError: ').concat(error instanceof Error ? error.message : 'Unknown error', \"\\n\\nPlease try again or start a new campaign planning session.\");\n        }\n    }\n    getWelcomeMessage() {\n        return \"\\uD83C\\uDFAF **Welcome to the CMO Agent**\\n\\nI'll help you create a comprehensive marketing campaign strategy with platform-specific recommendations.\\n\\n**To get started, tell me about your campaign:**\\n- What are you trying to achieve? (brand awareness, lead generation, product launch, etc.)\\n- Who is your target audience?\\n- Which platforms are you considering?\\n\\n**Example:** `/cmo I want to launch a new SaaS product targeting small business owners on LinkedIn and Twitter`\\n\\nLet's build your campaign strategy together! \\uD83D\\uDE80\";\n    }\n    async startNewConversation(sessionId, input, mutations) {\n        // Initialize campaign state\n        this.campaignState.set(sessionId, {\n            data: {},\n            phase: 1,\n            responses: [\n                input\n            ],\n            timestamp: Date.now()\n        });\n        return this.askPhase1Questions(sessionId, input);\n    }\n    async continueConversation(sessionId, input, mutations) {\n        const state = this.campaignState.get(sessionId);\n        // Check for timeout (30 minutes)\n        if (Date.now() - state.timestamp > 30 * 60 * 1000) {\n            this.campaignState.delete(sessionId);\n            return this.getTimeoutMessage();\n        }\n        state.responses.push(input);\n        state.timestamp = Date.now();\n        switch(state.phase){\n            case 1:\n                return this.processPhase1Response(sessionId, input);\n            case 2:\n                return this.processPhase2Response(sessionId, input);\n            case 3:\n                return this.processPhase3Response(sessionId, input);\n            case 4:\n                return this.processPhase4Response(sessionId, input);\n            case 5:\n                return await this.processPhase5Response(sessionId, input, mutations);\n            default:\n                return await this.generateFinalReport(sessionId, mutations);\n        }\n    }\n    askPhase1Questions(sessionId, initialInput) {\n        const state = this.campaignState.get(sessionId);\n        // Try to extract initial information from the input\n        const extractedInfo = this.extractInitialInfo(initialInput);\n        state.data = {\n            ...state.data,\n            ...extractedInfo\n        };\n        return '\\uD83C\\uDFAF **Phase 1: Campaign Objectives & Target Audience**\\n\\nBased on your request: \"'.concat(initialInput, '\"\\n\\nI need to understand your campaign better. Please provide:\\n\\n**1. Primary Objective** (if not clear from above)\\n- Brand awareness, lead generation, sales conversion, customer retention, product launch, or other?\\n\\n**2. Target Audience Details**\\n- Demographics (age, location, profession, etc.)\\n- Pain points or needs they have\\n- Where they spend time online\\n\\n**3. Success Metrics**\\n- How will you measure campaign success?\\n- Any specific goals (e.g., 1000 leads, 20% brand awareness lift)?\\n\\nPlease provide these details so I can move to platform strategy recommendations.');\n    }\n    processPhase1Response(sessionId, response) {\n        const state = this.campaignState.get(sessionId);\n        // Extract information from response\n        const info = this.extractPhase1Info(response);\n        state.data = {\n            ...state.data,\n            ...info\n        };\n        state.phase = 2;\n        return \"\\uD83D\\uDCF1 **Phase 2: Platform Selection & Content Strategy**\\n\\nGreat! Now let's determine the best platforms and content approaches.\\n\\n**Available Platforms:**\\n- Facebook (long-form content, community building)\\n- Instagram (visual content, stories, reels)\\n- LinkedIn (professional content, B2B focus)\\n- Twitter/X (real-time engagement, discussions)\\n- TikTok (short-form video, viral content)\\n- Reddit (community discussions, authentic engagement)\\n\\n**Questions:**\\n1. **Which platforms** are you currently considering or using?\\n2. **Content preferences** - do you prefer video, images, text, or a mix?\\n3. **Content resources** - do you have existing content that can be repurposed?\\n4. **Brand voice** - professional, casual, humorous, educational?\\n\\nPlease share your platform preferences and content approach.\";\n    }\n    processPhase2Response(sessionId, response) {\n        const state = this.campaignState.get(sessionId);\n        const info = this.extractPhase2Info(response);\n        state.data = {\n            ...state.data,\n            ...info\n        };\n        state.phase = 3;\n        return \"\\uD83D\\uDCC5 **Phase 3: Timeline & Posting Strategy**\\n\\nPerfect! Now let's plan your campaign timeline and posting frequency.\\n\\n**Questions:**\\n1. **Campaign Duration**\\n   - When do you want to start?\\n   - How long should the campaign run? (4 weeks, 3 months, ongoing?)\\n   - Any important dates or deadlines?\\n\\n2. **Posting Frequency** per platform\\n   - How often can you realistically create and post content?\\n   - Do you have team members who can help with content creation?\\n\\n3. **Budget Considerations**\\n   - Are you planning paid advertising?\\n   - Budget range for content creation or ads?\\n\\nShare your timeline preferences and resource availability.\";\n    }\n    processPhase3Response(sessionId, response) {\n        const state = this.campaignState.get(sessionId);\n        const info = this.extractPhase3Info(response);\n        state.data = {\n            ...state.data,\n            ...info\n        };\n        state.phase = 4;\n        return \"\\uD83D\\uDCCA **Phase 4: Measurement & Brand Guidelines**\\n\\nExcellent! Let's finalize the measurement strategy and brand consistency.\\n\\n**Questions:**\\n1. **Key Performance Indicators (KPIs)**\\n   - Engagement rate, reach, website traffic, leads, conversions?\\n   - How often do you want to review performance? (weekly, monthly?)\\n\\n2. **Brand Guidelines**\\n   - Do you have existing brand colors, fonts, or voice guidelines?\\n   - Any messaging that must be consistent across platforms?\\n   - Topics or approaches to avoid?\\n\\n3. **Competitive Context**\\n   - Who are your main competitors?\\n   - Any competitor campaigns you admire or want to differentiate from?\\n\\nShare these final details so I can create your comprehensive campaign strategy.\";\n    }\n    processPhase4Response(sessionId, response) {\n        var _state_data_platforms, _state_data_timeline, _state_data_timeline1;\n        const state = this.campaignState.get(sessionId);\n        const info = this.extractPhase4Info(response);\n        state.data = {\n            ...state.data,\n            ...info\n        };\n        state.phase = 5;\n        return \"✅ **Phase 5: Final Review & Report Generation**\\n\\nExcellent! I now have all the information needed to create your comprehensive marketing campaign strategy.\\n\\n**Campaign Summary:**\\n- **Objective:** \".concat(state.data.objective || 'Not specified', \"\\n- **Target Audience:** \").concat(state.data.targetAudience || 'Not specified', \"\\n- **Platforms:** \").concat(((_state_data_platforms = state.data.platforms) === null || _state_data_platforms === void 0 ? void 0 : _state_data_platforms.join(', ')) || 'Not specified', \"\\n- **Timeline:** \").concat(((_state_data_timeline = state.data.timeline) === null || _state_data_timeline === void 0 ? void 0 : _state_data_timeline.startDate) || 'Not specified', \" - \").concat(((_state_data_timeline1 = state.data.timeline) === null || _state_data_timeline1 === void 0 ? void 0 : _state_data_timeline1.endDate) || 'Not specified', \"\\n- **Budget:** \").concat(state.data.budget || 'Not specified', '\\n\\n**Ready to generate your campaign report?**\\n\\nType \"**generate report**\" to create your comprehensive Marketing Campaign Possibilities Report, or provide any corrections to the summary above.\\n\\nThe report will be saved to your Instructions folder for future reference.');\n    }\n    async processPhase5Response(sessionId, response, mutations) {\n        const state = this.campaignState.get(sessionId);\n        if (response.toLowerCase().includes('generate report') || response.toLowerCase().includes('create report')) {\n            return await this.generateFinalReport(sessionId, mutations);\n        } else {\n            // Process any final corrections\n            const corrections = this.extractCorrections(response);\n            state.data = {\n                ...state.data,\n                ...corrections\n            };\n            return '\\uD83D\\uDCDD **Updates Applied**\\n\\nYour corrections have been noted. \\n\\nType \"**generate report**\" when you\\'re ready for me to create your comprehensive Marketing Campaign Possibilities Report.';\n        }\n    }\n    async generateFinalReport(sessionId, mutations) {\n        const state = this.campaignState.get(sessionId);\n        if (!state) {\n            return this.getTimeoutMessage();\n        }\n        try {\n            const reportContent = this.createCampaignReport(state.data);\n            const fileName = this.generateReportFileName();\n            // Save to Instructions folder\n            if (mutations.createInstructionFile) {\n                await mutations.createInstructionFile({\n                    name: fileName,\n                    content: reportContent,\n                    topic: \"Marketing Campaign Strategy: \".concat(state.data.objective || 'Campaign Planning')\n                });\n                // Clean up session state\n                this.campaignState.delete(sessionId);\n                return \"✅ **Marketing Campaign Report Generated!**\\n\\n\\uD83D\\uDCC4 **File:** `\".concat(fileName, \"`\\n\\uD83D\\uDCC1 **Location:** Instructions system folder\\n\\uD83C\\uDFAF **Campaign:** \").concat(state.data.objective || 'Marketing Campaign', \"\\n\\nYour comprehensive campaign strategy has been created and saved. The report includes:\\n\\n- ✅ Platform-specific strategies and content recommendations\\n- ✅ Posting schedules and content calendars\\n- ✅ KPI tracking and measurement framework\\n- ✅ Budget allocation and resource planning\\n- ✅ Implementation timeline and next steps\\n\\nThe report is now available in your Instructions folder and will be included as context for future AI interactions about your marketing campaigns.\\n\\n**Ready to execute your campaign strategy!** \\uD83D\\uDE80\\n\\n---\\n\\n**CMO_REPORT_GENERATED_SUCCESS:** \").concat(fileName);\n            } else {\n                // Clean up session state\n                this.campaignState.delete(sessionId);\n                return \"\\uD83D\\uDCCB **Marketing Campaign Report Generated**\\n\\n\".concat(reportContent, \"\\n\\n⚠️ **Note:** The report couldn't be saved automatically. Please use the button below to create an instruction file.\\n\\n---\\n\\n**CMO_REPORT_MANUAL_SAVE_NEEDED:** \").concat(fileName);\n            }\n        } catch (error) {\n            console.error('❌ Failed to generate campaign report:', error);\n            return \"❌ **Error Generating Report**\\n\\nFailed to create your campaign report. Error: \".concat(error instanceof Error ? error.message : 'Unknown error', \"\\n\\nPlease try the command again or contact support if the issue persists.\");\n        }\n    }\n    getTimeoutMessage() {\n        return \"⏰ **Session Timeout**\\n\\nYour campaign planning session has expired. Don't worry - you can start a new campaign planning session anytime!\\n\\nType `/cmo [your campaign idea]` to begin a fresh campaign strategy session.\";\n    }\n    // Information extraction methods\n    extractInitialInfo(input) {\n        const data = {};\n        // Extract objective keywords\n        const objectiveKeywords = {\n            'brand awareness': [\n                'brand awareness',\n                'awareness',\n                'visibility',\n                'recognition'\n            ],\n            'lead generation': [\n                'lead generation',\n                'leads',\n                'prospects',\n                'capture'\n            ],\n            'sales conversion': [\n                'sales',\n                'conversion',\n                'revenue',\n                'purchase'\n            ],\n            'product launch': [\n                'launch',\n                'new product',\n                'introduce',\n                'debut'\n            ],\n            'customer retention': [\n                'retention',\n                'loyalty',\n                'existing customers',\n                'repeat'\n            ]\n        };\n        for (const [objective, keywords] of Object.entries(objectiveKeywords)){\n            if (keywords.some((keyword)=>input.toLowerCase().includes(keyword))) {\n                data.objective = objective;\n                break;\n            }\n        }\n        // Extract platform mentions\n        const platformKeywords = {\n            'LinkedIn': [\n                'linkedin',\n                'linked in'\n            ],\n            'Facebook': [\n                'facebook',\n                'fb'\n            ],\n            'Instagram': [\n                'instagram',\n                'ig',\n                'insta'\n            ],\n            'Twitter/X': [\n                'twitter',\n                'x.com',\n                ' x '\n            ],\n            'TikTok': [\n                'tiktok',\n                'tik tok'\n            ],\n            'Reddit': [\n                'reddit'\n            ]\n        };\n        const platforms = [];\n        for (const [platform, keywords] of Object.entries(platformKeywords)){\n            if (keywords.some((keyword)=>input.toLowerCase().includes(keyword))) {\n                platforms.push(platform);\n            }\n        }\n        if (platforms.length > 0) {\n            data.platforms = platforms;\n        }\n        // Extract audience hints\n        const audienceKeywords = [\n            'small business',\n            'entrepreneurs',\n            'professionals',\n            'developers',\n            'students',\n            'parents',\n            'millennials',\n            'gen z',\n            'b2b',\n            'b2c'\n        ];\n        for (const keyword of audienceKeywords){\n            if (input.toLowerCase().includes(keyword)) {\n                data.targetAudience = keyword;\n                break;\n            }\n        }\n        return data;\n    }\n    extractPhase1Info(response) {\n        // Similar extraction logic for Phase 1 responses\n        return this.extractInitialInfo(response);\n    }\n    extractPhase2Info(response) {\n        const data = {};\n        // Extract platforms\n        const platforms = this.extractInitialInfo(response).platforms || [];\n        if (platforms.length > 0) {\n            data.platforms = platforms;\n        }\n        // Extract content type preferences\n        const contentTypes = {};\n        const contentKeywords = {\n            'video': [\n                'video',\n                'videos',\n                'reels',\n                'stories'\n            ],\n            'images': [\n                'images',\n                'photos',\n                'graphics',\n                'visual'\n            ],\n            'text': [\n                'text',\n                'articles',\n                'posts',\n                'written'\n            ],\n            'mix': [\n                'mix',\n                'combination',\n                'variety',\n                'all types'\n            ]\n        };\n        for (const [type, keywords] of Object.entries(contentKeywords)){\n            if (keywords.some((keyword)=>response.toLowerCase().includes(keyword))) {\n                contentTypes['preferred'] = type;\n                break;\n            }\n        }\n        if (Object.keys(contentTypes).length > 0) {\n            data.contentTypes = contentTypes;\n        }\n        return data;\n    }\n    extractPhase3Info(response) {\n        const data = {};\n        // Extract timeline information\n        const timeline = {};\n        // Look for date patterns and time references\n        const timeKeywords = [\n            '4 weeks',\n            '3 months',\n            'ongoing',\n            'immediately',\n            'next month',\n            'daily',\n            'weekly',\n            'twice a week',\n            '3 times per week'\n        ];\n        for (const keyword of timeKeywords){\n            if (response.toLowerCase().includes(keyword)) {\n                if (keyword.includes('week') || keyword.includes('month')) {\n                    timeline.endDate = keyword;\n                }\n                break;\n            }\n        }\n        if (Object.keys(timeline).length > 0) {\n            data.timeline = timeline;\n        }\n        // Extract budget mentions\n        if (response.toLowerCase().includes('budget') || response.toLowerCase().includes('$')) {\n            const budgetMatch = response.match(/\\$[\\d,]+/);\n            if (budgetMatch) {\n                data.budget = budgetMatch[0];\n            } else if (response.toLowerCase().includes('no budget') || response.toLowerCase().includes('free')) {\n                data.budget = 'Organic only';\n            } else {\n                data.budget = 'Budget mentioned but amount not specified';\n            }\n        }\n        return data;\n    }\n    extractPhase4Info(response) {\n        const data = {};\n        // Extract KPIs\n        const kpiKeywords = [\n            'engagement',\n            'reach',\n            'impressions',\n            'traffic',\n            'leads',\n            'conversions',\n            'sales',\n            'followers',\n            'brand awareness'\n        ];\n        const kpis = [];\n        for (const kpi of kpiKeywords){\n            if (response.toLowerCase().includes(kpi)) {\n                kpis.push(kpi);\n            }\n        }\n        if (kpis.length > 0) {\n            data.kpis = kpis;\n        }\n        // Extract brand guidelines mentions\n        if (response.toLowerCase().includes('brand') || response.toLowerCase().includes('guideline')) {\n            data.brandGuidelines = 'Brand guidelines mentioned';\n        }\n        // Extract competitive context\n        if (response.toLowerCase().includes('competitor') || response.toLowerCase().includes('competition')) {\n            data.competitiveContext = 'Competitive context provided';\n        }\n        return data;\n    }\n    extractCorrections(response) {\n        // Allow users to make final corrections to any field\n        return this.extractInitialInfo(response);\n    }\n    createCampaignReport(data) {\n        var _data_kpis, _data_timeline, _data_timeline1;\n        const timestamp = new Date().toLocaleDateString();\n        return \"# Marketing Campaign Possibilities Report\\n\\n*Generated on \".concat(timestamp, \" by EAC CMO Agent*\\n\\n## Executive Summary\\n\\nThis comprehensive marketing campaign strategy outlines a multi-platform approach designed to achieve your specified objectives through targeted content and strategic platform utilization.\\n\\n## Campaign Objectives\\n\\n**Primary Objective:** \").concat(data.objective || 'To be defined', \"\\n\\n**Success Definition:** \").concat(((_data_kpis = data.kpis) === null || _data_kpis === void 0 ? void 0 : _data_kpis.join(', ')) || 'Standard engagement and conversion metrics', \"\\n\\n## Target Audience\\n\\n**Demographics & Characteristics:** \").concat(data.targetAudience || 'Target audience to be refined', \"\\n\\n**Key Pain Points:** \\n- Needs efficient solutions for their business challenges\\n- Values authentic, helpful content over promotional messaging\\n- Active on professional and social platforms\\n\\n## Multi-Platform Strategy\\n\\n\").concat(this.generatePlatformStrategies(data.platforms || [\n            'LinkedIn',\n            'Twitter/X'\n        ]), \"\\n\\n## Content Strategy & Messaging\\n\\n**Content Types:** \").concat(this.getContentTypeRecommendations(data.contentTypes), \"\\n\\n**Brand Voice:** \").concat(data.brandGuidelines || 'Professional yet approachable, focusing on value delivery', \"\\n\\n**Key Messages:**\\n- Position as industry expert and thought leader\\n- Emphasize practical solutions and real results\\n- Build trust through authentic engagement\\n\\n## Campaign Timeline\\n\\n**Duration:** \").concat(((_data_timeline = data.timeline) === null || _data_timeline === void 0 ? void 0 : _data_timeline.startDate) || 'To be determined', \" - \").concat(((_data_timeline1 = data.timeline) === null || _data_timeline1 === void 0 ? void 0 : _data_timeline1.endDate) || 'Ongoing', \"\\n\\n**Key Milestones:**\\n- Week 1-2: Content foundation and initial engagement\\n- Week 3-4: Community building and relationship development\\n- Month 2+: Conversion optimization and scaling\\n\\n## Budget Considerations\\n\\n**Allocation:** \").concat(data.budget || 'Budget to be determined based on platform performance', \"\\n\\n**Recommended Distribution:**\\n- 60% Content creation and management\\n- 30% Paid advertising and promotion\\n- 10% Analytics and optimization tools\\n\\n## Key Performance Indicators (KPIs)\\n\\n**Primary Metrics:**\\n\").concat((data.kpis || [\n            'engagement rate',\n            'reach',\n            'website traffic'\n        ]).map((kpi)=>\"- \".concat(kpi.charAt(0).toUpperCase() + kpi.slice(1))).join('\\n'), \"\\n\\n**Reporting Frequency:** Weekly performance reviews with monthly strategic assessments\\n\\n## Implementation Next Steps\\n\\n1. **Content Calendar Development**\\n   - Create 30-day content calendar with platform-specific posts\\n   - Establish content creation workflow and approval process\\n\\n2. **Platform Setup & Optimization**\\n   - Optimize profiles across all selected platforms\\n   - Implement tracking pixels and analytics\\n\\n3. **Community Engagement Strategy**\\n   - Identify key influencers and thought leaders\\n   - Develop engagement guidelines and response templates\\n\\n4. **Performance Monitoring**\\n   - Set up analytics dashboards\\n   - Establish weekly review and optimization process\\n\\n## Risk Mitigation\\n\\n- **Content Consistency:** Maintain brand voice across all platforms\\n- **Resource Management:** Ensure sustainable content creation workflow\\n- **Platform Changes:** Stay updated on algorithm and feature changes\\n- **Competitive Response:** Monitor competitor activities and differentiate accordingly\\n\\n---\\n\\n*This campaign strategy provides a foundation for successful multi-platform marketing. Regular review and optimization based on performance data will ensure continued success and ROI improvement.*\\n\\n## Additional Resources\\n\\nFor implementation support and ongoing optimization, consider:\\n- Platform-specific content templates\\n- Automation tools for posting and engagement\\n- Analytics training for team members\\n- Competitive analysis and monitoring tools\\n\\n---\\n\\n**Generated by EAC CMO Agent - Your Strategic Marketing Partner** \\uD83C\\uDFAF\");\n    }\n    generatePlatformStrategies(platforms) {\n        const strategies = {\n            'LinkedIn': {\n                content: 'Professional insights, industry analysis, thought leadership articles, company updates, employee spotlights',\n                cadence: '3-4 posts per week',\n                recommendations: 'Focus on business value, engage in relevant groups, share industry expertise, use LinkedIn native video'\n            },\n            'Facebook': {\n                content: 'Long-form content, community discussions, behind-the-scenes content, customer stories, live Q&A sessions',\n                cadence: '4-5 posts per week',\n                recommendations: 'Build community through Facebook Groups, use Facebook Live for real-time engagement, share customer success stories'\n            },\n            'Instagram': {\n                content: 'High-quality visuals, Stories, Reels, carousel posts, user-generated content, behind-the-scenes content',\n                cadence: 'Daily Stories, 4-5 feed posts per week',\n                recommendations: 'Use relevant hashtags, collaborate with micro-influencers, leverage Instagram Shopping features, create engaging Reels'\n            },\n            'Twitter/X': {\n                content: 'Real-time updates, industry commentary, quick tips, thread discussions, engagement with trending topics',\n                cadence: 'Multiple posts per day',\n                recommendations: 'Engage in Twitter chats, use relevant hashtags, share quick insights, participate in trending conversations'\n            },\n            'TikTok': {\n                content: 'Short-form entertaining videos, educational content, trending challenges, behind-the-scenes glimpses',\n                cadence: 'Daily posts',\n                recommendations: 'Stay current with trends, use popular sounds, create educational series, collaborate with creators'\n            },\n            'Reddit': {\n                content: 'Valuable discussions, AMAs, helpful resources, authentic community participation',\n                cadence: '2-3 posts per week',\n                recommendations: 'Understand subreddit rules, provide genuine value, avoid over-promotion, build community relationships'\n            }\n        };\n        return platforms.map((platform)=>{\n            const strategy = strategies[platform];\n            if (!strategy) {\n                return \"### \".concat(platform, \"\\n*Platform strategy to be developed*\\n\");\n            }\n            return \"### \".concat(platform, \"\\n\\n**Content Type Recommendations:** \").concat(strategy.content, \"\\n\\n**Posting Cadence:** \").concat(strategy.cadence, \"\\n\\n**Specific Recommendations:** \").concat(strategy.recommendations, \"\\n\\n\");\n        }).join('\\n');\n    }\n    getContentTypeRecommendations(contentTypes) {\n        if (!contentTypes || Object.keys(contentTypes).length === 0) {\n            return 'Mix of visual and text content optimized for each platform';\n        }\n        const type = contentTypes.preferred || 'mix';\n        const recommendations = {\n            'video': 'Focus on short-form videos, tutorials, behind-the-scenes content, and live streams',\n            'images': 'High-quality graphics, infographics, carousel posts, and visual storytelling',\n            'text': 'In-depth articles, thought leadership posts, industry insights, and detailed guides',\n            'mix': 'Balanced content approach with platform-specific optimization'\n        };\n        return recommendations[type] || recommendations['mix'];\n    }\n    generateReportFileName() {\n        const timestamp = new Date().toISOString().split('T')[0];\n        return \"marketing-campaign-strategy-\".concat(timestamp, \".md\");\n    }\n    constructor(...args){\n        super(...args), this.id = 'cmo', this.name = 'CMO', this.description = 'Marketing campaign strategy and planning with multi-platform recommendations', this.icon = 'TrendingUp', this.tools = [\n            {\n                id: \"define-campaign\",\n                name: \"Define Marketing Campaign\",\n                command: \"/cmo\",\n                description: \"Interactive campaign planning with strategic recommendations\",\n                parameters: [\n                    {\n                        name: \"campaign_request\",\n                        type: \"string\",\n                        description: \"Describe your marketing campaign needs or goals\",\n                        required: true\n                    }\n                ]\n            }\n        ], // Campaign conversation state\n        this.campaignState = new Map();\n    }\n}\n// Export singleton instance\nconst cmoAgent = new CMOAgent();\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./store/agents/cmoAgent.ts\n"));

/***/ }),

/***/ "(app-pages-browser)/./store/agents/registry.ts":
/*!**********************************!*\
  !*** ./store/agents/registry.ts ***!
  \**********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AgentRegistry: () => (/* binding */ AgentRegistry),\n/* harmony export */   agentRegistry: () => (/* binding */ agentRegistry),\n/* harmony export */   executeCMOAgent: () => (/* binding */ executeCMOAgent),\n/* harmony export */   executeInstructionsAgent: () => (/* binding */ executeInstructionsAgent),\n/* harmony export */   executeProjectCreatorAgent: () => (/* binding */ executeProjectCreatorAgent),\n/* harmony export */   executeTwitterPostAgent: () => (/* binding */ executeTwitterPostAgent),\n/* harmony export */   getAvailableAgents: () => (/* binding */ getAvailableAgents),\n/* harmony export */   getAvailableCommands: () => (/* binding */ getAvailableCommands)\n/* harmony export */ });\n/* harmony import */ var _cmoAgent__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./cmoAgent */ \"(app-pages-browser)/./store/agents/cmoAgent.ts\");\n/* harmony import */ var _directorAgent__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./directorAgent */ \"(app-pages-browser)/./store/agents/directorAgent.ts\");\n/* harmony import */ var _editorAgent__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./editorAgent */ \"(app-pages-browser)/./store/agents/editorAgent.ts\");\n/* harmony import */ var _fileCreatorAgent__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./fileCreatorAgent */ \"(app-pages-browser)/./store/agents/fileCreatorAgent.ts\");\n/* harmony import */ var _instructionsAgent__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./instructionsAgent */ \"(app-pages-browser)/./store/agents/instructionsAgent.ts\");\n/* harmony import */ var _projectCreatorAgent__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./projectCreatorAgent */ \"(app-pages-browser)/./store/agents/projectCreatorAgent.ts\");\n/* harmony import */ var _schedulingAgent__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./schedulingAgent */ \"(app-pages-browser)/./store/agents/schedulingAgent.ts\");\n// Agent Registry\n// /Users/matthewsimon/Projects/eac/eac/store/agents/registry.ts\n\n\n\n\n\n\n\n/**\n * Central registry for all available agents\n */ class AgentRegistry {\n    /**\n   * Register a new agent\n   */ registerAgent(agent) {\n        this.agents.set(agent.id, agent);\n    }\n    /**\n   * Get an agent by ID\n   */ getAgent(id) {\n        return this.agents.get(id);\n    }\n    /**\n   * Get all available agents\n   */ getAllAgents() {\n        return Array.from(this.agents.values());\n    }\n    /**\n   * Get all agent tools (flattened)\n   */ getAllTools() {\n        const tools = [];\n        for (const agent of this.agents.values()){\n            for (const tool of agent.tools){\n                tools.push({\n                    agent,\n                    tool\n                });\n            }\n        }\n        return tools;\n    }\n    /**\n   * Find agent by tool command\n   */ findAgentByCommand(command) {\n        // Normalize legacy aliases first\n        const normalized = this.legacyCommandAliases[command] || command;\n        for (const agent of this.agents.values()){\n            const tool = agent.tools.find((t)=>t.command === normalized);\n            if (tool) return {\n                agent,\n                tool\n            };\n        }\n        return undefined;\n    }\n    /**\n   * Execute an agent tool\n   */ async executeAgent(agentId, toolId, input, convexMutations, sessionId) {\n        const agent = this.getAgent(agentId);\n        if (!agent) {\n            throw new Error(\"Agent not found: \".concat(agentId));\n        }\n        const tool = agent.tools.find((t)=>t.id === toolId);\n        if (!tool) {\n            throw new Error(\"Tool not found: \".concat(toolId, \" for agent \").concat(agentId));\n        }\n        return await agent.execute(tool, input, convexMutations, sessionId);\n    }\n    /**\n   * Execute agent by command (legacy support)\n   */ async executeByCommand(command, input, convexMutations) {\n        const result = this.findAgentByCommand(command);\n        if (!result) {\n            throw new Error(\"No agent found for command: \".concat(command));\n        }\n        return await result.agent.execute(result.tool, input, convexMutations);\n    }\n    constructor(){\n        this.agents = new Map();\n        // Legacy command aliases (to be removed after deprecation window)\n        this.legacyCommandAliases = {\n            'create': '/create-project',\n            'create-project': '/create-project',\n            'create-file': '/create-file'\n        };\n        console.log('🤖 Agent Registry: Initializing...');\n        this.registerAgent(_instructionsAgent__WEBPACK_IMPORTED_MODULE_4__.instructionsAgent);\n        console.log('🤖 Registered:', _instructionsAgent__WEBPACK_IMPORTED_MODULE_4__.instructionsAgent.id, _instructionsAgent__WEBPACK_IMPORTED_MODULE_4__.instructionsAgent.name);\n        this.registerAgent(_schedulingAgent__WEBPACK_IMPORTED_MODULE_6__.schedulingAgent);\n        console.log('🤖 Registered:', _schedulingAgent__WEBPACK_IMPORTED_MODULE_6__.schedulingAgent.id, _schedulingAgent__WEBPACK_IMPORTED_MODULE_6__.schedulingAgent.name);\n        this.registerAgent(_projectCreatorAgent__WEBPACK_IMPORTED_MODULE_5__.projectCreatorAgent);\n        console.log('🤖 Registered:', _projectCreatorAgent__WEBPACK_IMPORTED_MODULE_5__.projectCreatorAgent.id, _projectCreatorAgent__WEBPACK_IMPORTED_MODULE_5__.projectCreatorAgent.name);\n        this.registerAgent(_fileCreatorAgent__WEBPACK_IMPORTED_MODULE_3__.fileCreatorAgent);\n        console.log('🤖 Registered:', _fileCreatorAgent__WEBPACK_IMPORTED_MODULE_3__.fileCreatorAgent.id, _fileCreatorAgent__WEBPACK_IMPORTED_MODULE_3__.fileCreatorAgent.name);\n        this.registerAgent(_editorAgent__WEBPACK_IMPORTED_MODULE_2__.editorAgent);\n        console.log('🤖 Registered:', _editorAgent__WEBPACK_IMPORTED_MODULE_2__.editorAgent.id, _editorAgent__WEBPACK_IMPORTED_MODULE_2__.editorAgent.name);\n        this.registerAgent(_cmoAgent__WEBPACK_IMPORTED_MODULE_0__.cmoAgent);\n        console.log('🤖 Registered:', _cmoAgent__WEBPACK_IMPORTED_MODULE_0__.cmoAgent.id, _cmoAgent__WEBPACK_IMPORTED_MODULE_0__.cmoAgent.name);\n        this.registerAgent(_directorAgent__WEBPACK_IMPORTED_MODULE_1__.directorAgent);\n        console.log('🤖 Registered:', _directorAgent__WEBPACK_IMPORTED_MODULE_1__.directorAgent.id, _directorAgent__WEBPACK_IMPORTED_MODULE_1__.directorAgent.name);\n        console.log('🤖 Total agents registered:', this.agents.size);\n    }\n}\n/**\n * Singleton agent registry instance\n */ const agentRegistry = new AgentRegistry();\n/**\n * Legacy support functions for backward compatibility\n */ async function executeInstructionsAgent(input, convexMutations) {\n    return await agentRegistry.executeAgent('instructions', 'generate-instructions', input, convexMutations);\n}\nasync function executeTwitterPostAgent(input, convexMutations) {\n    return await agentRegistry.executeAgent('twitter-post', 'create-twitter-post', input, convexMutations);\n}\n/**\n * Get all available agents for UI display\n */ function getAvailableAgents() {\n    return agentRegistry.getAllAgents().map((agent)=>({\n            id: agent.id,\n            name: agent.name,\n            description: agent.description,\n            icon: agent.icon,\n            isActive: false,\n            tools: agent.tools.map((tool)=>({\n                    id: tool.id,\n                    name: tool.name,\n                    command: tool.command,\n                    description: tool.description,\n                    parameters: tool.parameters\n                }))\n        }));\n}\n/**\n * Get available commands for autocomplete\n */ function getAvailableCommands() {\n    const commands = [];\n    for (const agent of agentRegistry.getAllAgents()){\n        for (const tool of agent.tools){\n            commands.push(tool.command);\n        }\n    }\n    return commands;\n}\n/**\n * Legacy support function for project creator agent\n */ async function executeProjectCreatorAgent(input, convexMutations) {\n    return await agentRegistry.executeAgent('project-creator', 'create-project-with-files', input, convexMutations);\n}\n/**\n * Legacy support function for CMO agent\n */ async function executeCMOAgent(input, convexMutations, sessionId) {\n    return await agentRegistry.executeAgent('cmo', 'define-campaign', input, convexMutations, sessionId);\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./store/agents/registry.ts\n"));

/***/ })

});