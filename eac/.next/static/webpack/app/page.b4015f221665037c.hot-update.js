"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./store/terminal/index.ts":
/*!*********************************!*\
  !*** ./store/terminal/index.ts ***!
  \*********************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useTerminalStore: () => (/* binding */ useTerminalStore)\n/* harmony export */ });\n/* harmony import */ var zustand__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! zustand */ \"(app-pages-browser)/../node_modules/.pnpm/zustand@5.0.6_@types+react@19.1.8_react@19.1.0_use-sync-external-store@1.5.0_react@19.1.0_/node_modules/zustand/esm/react.mjs\");\n// Terminal Store\n// /Users/matthewsimon/Projects/EAC/eac/store/terminal/index.ts\n\nconst useTerminalStore = (0,zustand__WEBPACK_IMPORTED_MODULE_0__.create)((set, get)=>({\n        isCollapsed: true,\n        currentSize: 5,\n        lastExpandedSize: 105,\n        panelRef: null,\n        isResizing: false,\n        setCollapsed: (collapsed)=>{\n            const state = get();\n            console.log('setCollapsed called:', {\n                collapsed,\n                currentLastExpandedSize: state.lastExpandedSize\n            });\n            set({\n                isCollapsed: collapsed,\n                currentSize: collapsed ? 5 : state.lastExpandedSize\n            });\n        },\n        setSize: (size)=>{\n            const state = get();\n            console.log('setSize called:', {\n                size,\n                isCollapsed: state.isCollapsed,\n                currentLastExpandedSize: state.lastExpandedSize,\n                isResizing: state.isResizing\n            });\n            // If we're in the middle of an imperative resize, ignore onResize callbacks for a short time\n            if (state.isResizing) {\n                console.log('Ignoring setSize during imperative resize operation');\n                set({\n                    currentSize: size\n                });\n                return;\n            }\n            // Don't update lastExpandedSize if we're getting a size that's close to minSize (20-25%)\n            // when we have a much larger saved size - this indicates ResizablePanel interference during expand\n            const isLikelyExpandInterference = !state.isCollapsed && size <= 25 && state.lastExpandedSize > 40;\n            // Only update lastExpandedSize if:\n            // 1. Not collapsed AND\n            // 2. Size is reasonable (> 25% to avoid minSize interference) AND \n            // 3. Size is significantly different from current (> 3% difference) OR size is at maxSize (70%) AND\n            // 4. Not likely to be expand interference\n            const isSignificantChange = Math.abs(size - state.lastExpandedSize) > 3;\n            const isMaxSize = size >= 70;\n            const shouldUpdateLastExpandedSize = !state.isCollapsed && size > 25 && (isSignificantChange || isMaxSize) && !isLikelyExpandInterference;\n            const newLastExpandedSize = shouldUpdateLastExpandedSize ? size : state.lastExpandedSize;\n            console.log('Setting new lastExpandedSize:', newLastExpandedSize, 'shouldUpdate:', shouldUpdateLastExpandedSize, 'isSignificantChange:', isSignificantChange, 'isMaxSize:', isMaxSize, 'isLikelyExpandInterference:', isLikelyExpandInterference);\n            set({\n                currentSize: size,\n                lastExpandedSize: newLastExpandedSize\n            });\n        },\n        setLastExpandedSize: (size)=>{\n            console.log('setLastExpandedSize called:', size);\n            set({\n                lastExpandedSize: size\n            });\n        },\n        setPanelRef: (ref)=>{\n            console.log('setPanelRef called:', ref);\n            set({\n                panelRef: ref\n            });\n        },\n        toggleCollapse: ()=>{\n            var _state_panelRef;\n            const state = get();\n            const newCollapsed = !state.isCollapsed;\n            const newSize = newCollapsed ? 5 : state.lastExpandedSize;\n            console.log('toggleCollapse called:', {\n                currentCollapsed: state.isCollapsed,\n                newCollapsed,\n                lastExpandedSize: state.lastExpandedSize,\n                newSize,\n                panelRef: state.panelRef\n            });\n            // Set resizing flag to ignore onResize callbacks temporarily\n            set({\n                isResizing: true\n            });\n            // Use imperative API to resize the panel\n            if ((_state_panelRef = state.panelRef) === null || _state_panelRef === void 0 ? void 0 : _state_panelRef.current) {\n                console.log('Resizing panel imperatively to:', newSize);\n                state.panelRef.current.resize(newSize);\n            }\n            set({\n                isCollapsed: newCollapsed,\n                currentSize: newSize\n            });\n            // Clear the resizing flag after a short delay\n            setTimeout(()=>{\n                set({\n                    isResizing: false\n                });\n            }, 100);\n        }\n    }));\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./store/terminal/index.ts\n"));

/***/ })

});