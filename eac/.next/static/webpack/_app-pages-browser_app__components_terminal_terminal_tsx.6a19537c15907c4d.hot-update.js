"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_app__components_terminal_terminal_tsx",{

/***/ "(app-pages-browser)/./lib/hooks/useChat.ts":
/*!******************************!*\
  !*** ./lib/hooks/useChat.ts ***!
  \******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useChat: () => (/* binding */ useChat)\n/* harmony export */ });\n/* harmony import */ var _convex_generated_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/convex/_generated/api */ \"(app-pages-browser)/./convex/_generated/api.js\");\n/* harmony import */ var _store_terminal_chat__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @/store/terminal/chat */ \"(app-pages-browser)/./store/terminal/chat.ts\");\n/* harmony import */ var _store_terminal_session__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @/store/terminal/session */ \"(app-pages-browser)/./store/terminal/session.ts\");\n/* harmony import */ var convex_react__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! convex/react */ \"(app-pages-browser)/../node_modules/.pnpm/convex@1.25.4_@clerk+clerk-react@5.38.0_react-dom@18.3.1_react@18.3.1__react@18.3.1__react@18.3.1/node_modules/convex/dist/esm/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../node_modules/.pnpm/next@15.3.5_react-dom@18.3.1_react@18.3.1__react@18.3.1/node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_4___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_4__);\n/* harmony import */ var _chatCommands__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../chatCommands */ \"(app-pages-browser)/./lib/chatCommands.ts\");\n// Custom hook for chat functionality with Convex\n// /Users/matthewsimon/Projects/eac/eac/lib/hooks/useChat.ts\n\n\n\n\n\n\nfunction useChat() {\n    const { sessionId, isLoading, setLoading, addTerminalFeedback, loadMessagesForSession } = (0,_store_terminal_chat__WEBPACK_IMPORTED_MODULE_1__.useChatStore)();\n    const { activeSessionId, updateSession } = (0,_store_terminal_session__WEBPACK_IMPORTED_MODULE_2__.useSessionStore)();\n    // Use the active session ID from session store, fallback to chat store\n    const currentSessionId = activeSessionId || sessionId;\n    // Get messages from Convex for the current session\n    const messages = (0,convex_react__WEBPACK_IMPORTED_MODULE_3__.useQuery)(_convex_generated_api__WEBPACK_IMPORTED_MODULE_0__.api.chat.getChatMessages, {\n        sessionId: currentSessionId,\n        limit: 500\n    });\n    // Action to send messages to Claude\n    const sendChatMessage = (0,convex_react__WEBPACK_IMPORTED_MODULE_3__.useAction)(_convex_generated_api__WEBPACK_IMPORTED_MODULE_0__.api.chatActions.sendChatMessage);\n    // Mutation to store local messages\n    const storeChatMessage = (0,convex_react__WEBPACK_IMPORTED_MODULE_3__.useMutation)(_convex_generated_api__WEBPACK_IMPORTED_MODULE_0__.api.chat.storeChatMessage);\n    // Mutation to clear chat history\n    const clearChatHistory = (0,convex_react__WEBPACK_IMPORTED_MODULE_3__.useMutation)(_convex_generated_api__WEBPACK_IMPORTED_MODULE_0__.api.chat.clearChatHistory);\n    // Update session metadata when messages change\n    (0,react__WEBPACK_IMPORTED_MODULE_4__.useEffect)({\n        \"useChat.useEffect\": ()=>{\n            if (messages && messages.length > 0 && currentSessionId) {\n                const lastMessage = messages[messages.length - 1];\n                updateSession(currentSessionId, {\n                    lastActivity: lastMessage._creationTime,\n                    messageCount: messages.length,\n                    preview: lastMessage.content.substring(0, 50) + (lastMessage.content.length > 50 ? '...' : '')\n                });\n            }\n        }\n    }[\"useChat.useEffect\"], [\n        messages,\n        currentSessionId,\n        updateSession\n    ]);\n    const sendMessage = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)({\n        \"useChat.useCallback[sendMessage]\": async (content, originalContent)=>{\n            if (!content.trim() || isLoading) return;\n            const trimmedContent = content.trim();\n            const originalTrimmedContent = originalContent === null || originalContent === void 0 ? void 0 : originalContent.trim();\n            // Handle specific local commands only\n            const contentToCheck = originalTrimmedContent || trimmedContent;\n            if ((0,_chatCommands__WEBPACK_IMPORTED_MODULE_5__.isCommand)(contentToCheck)) {\n                const { command } = (0,_chatCommands__WEBPACK_IMPORTED_MODULE_5__.parseCommand)(contentToCheck);\n                // Only handle /clear locally, let all other commands go to Convex\n                if (command === '/clear') {\n                    // Store user command\n                    await storeChatMessage({\n                        role: \"user\",\n                        content: originalTrimmedContent || trimmedContent,\n                        sessionId: currentSessionId\n                    });\n                    await clearChatHistory({\n                        sessionId: currentSessionId\n                    });\n                    return;\n                }\n                // Check if it's a local help command (not agent command)\n                if ([\n                    '/help',\n                    '/project',\n                    '/tech',\n                    '/files',\n                    '/components',\n                    '/stores',\n                    '/convex'\n                ].includes(command)) {\n                    // Store user command\n                    await storeChatMessage({\n                        role: \"user\",\n                        content: originalTrimmedContent || trimmedContent,\n                        sessionId: currentSessionId\n                    });\n                    const commandResponse = (0,_chatCommands__WEBPACK_IMPORTED_MODULE_5__.handleCommand)(command);\n                    if (commandResponse) {\n                        // Store system response for command\n                        await storeChatMessage({\n                            role: \"system\",\n                            content: commandResponse,\n                            sessionId: currentSessionId\n                        });\n                        return;\n                    }\n                }\n            // All other commands (like /twitter, /instructions, /) go to Convex\n            }\n            // Handle regular AI chat messages\n            setLoading(true);\n            try {\n                await sendChatMessage({\n                    content: trimmedContent,\n                    originalContent: originalTrimmedContent,\n                    sessionId: currentSessionId\n                });\n            } catch (error) {\n                console.error(\"Error sending message:\", error);\n            // Error messages are already handled in the Convex action\n            } finally{\n                setLoading(false);\n            }\n        }\n    }[\"useChat.useCallback[sendMessage]\"], [\n        sendChatMessage,\n        storeChatMessage,\n        clearChatHistory,\n        currentSessionId,\n        isLoading,\n        setLoading\n    ]);\n    var _messages_length;\n    // Check if session is approaching or at limit\n    const messageCount = (_messages_length = messages === null || messages === void 0 ? void 0 : messages.length) !== null && _messages_length !== void 0 ? _messages_length : 0;\n    const isNearSessionLimit = messageCount >= 450; // Warning at 450 messages\n    const isAtSessionLimit = messageCount >= 500; // Hard limit at 500 messages\n    // Function to check if new messages can be added\n    const canAddMessages = ()=>{\n        return messageCount < 500;\n    };\n    // Function to get session status\n    const getSessionStatus = ()=>{\n        if (isAtSessionLimit) {\n            return {\n                status: 'limit_reached',\n                message: '🚨 Session limit reached (500 messages). Please start a new session to continue.',\n                messageCount,\n                limit: 500\n            };\n        } else if (isNearSessionLimit) {\n            return {\n                status: 'near_limit',\n                message: \"⚠️ Approaching session limit (\".concat(messageCount, \"/500 messages). Consider starting a new session soon.\"),\n                messageCount,\n                limit: 500\n            };\n        }\n        return {\n            status: 'normal',\n            message: null,\n            messageCount,\n            limit: 500\n        };\n    };\n    // Function to start a new session (integrated with session store)\n    const startNewSession = (0,react__WEBPACK_IMPORTED_MODULE_4__.useCallback)({\n        \"useChat.useCallback[startNewSession]\": ()=>{\n            const { createNewSession } = _store_terminal_session__WEBPACK_IMPORTED_MODULE_2__.useSessionStore.getState();\n            const newSessionId = createNewSession();\n            console.log(\"🔄 Started new session:\", newSessionId);\n            return newSessionId;\n        }\n    }[\"useChat.useCallback[startNewSession]\"], []);\n    return {\n        messages: messages !== null && messages !== void 0 ? messages : [],\n        isLoading,\n        sendMessage,\n        sessionId: currentSessionId,\n        storeChatMessage,\n        addTerminalFeedback,\n        // Session limit functionality\n        messageCount,\n        isNearSessionLimit,\n        isAtSessionLimit,\n        canAddMessages,\n        getSessionStatus,\n        startNewSession\n    };\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/hooks/useChat.ts\n"));

/***/ })

});