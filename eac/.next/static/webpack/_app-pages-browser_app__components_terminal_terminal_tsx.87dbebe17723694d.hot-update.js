/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_app__components_terminal_terminal_tsx",{

/***/ "(app-pages-browser)/./app/_components/terminal/_components/chatMessages.tsx":
/*!***************************************************************!*\
  !*** ./app/_components/terminal/_components/chatMessages.tsx ***!
  \***************************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval(__webpack_require__.ts("// Simplified Chat Messages Component - No Slash Commands// /Users/matthewsimon/Projects/eac/eac/app/_components/terminal/_components/chatMessages.tsx\"use client\";import { api } from \"@/convex/_generated/api\";import { useChat } from \"@/lib/hooks/useChat\";import { useInstructionContext, useInstructions } from \"@/lib/hooks/useInstructions\";import { useMCP } from \"@/lib/hooks/useMCP\";import { useAgentStore } from \"@/store\";import { useChatStore } from \"@/store/terminal/chat\";import { useSessionStore } from \"@/store/terminal/session\";import { useUser } from \"@clerk/nextjs\";import { useMutation, useQuery } from \"convex/react\";import React, { useEffect, useRef, useState } from \"react\";import { ToolSelector } from \"./toolSelector\";import { ToolsToggle } from \"./toolsToggle\";export function ChatMessages() {  const scrollRef = useRef<HTMLDivElement>(null);  const inputRef = useRef<HTMLInputElement>(null);  const [message, setMessage] = useState(\"\");    const { user, isLoaded } = useUser();  const { initializeUserSession, addTerminalFeedback, setSessionId } = useChatStore();  const { activeSessionId } = useSessionStore();  const {     messages,     isLoading: chatLoading,     sendMessage,     sessionId,     storeChatMessage,     addTerminalFeedback: useTerminalFeedback,    messageCount,    isNearSessionLimit,    isAtSessionLimit,    canAddMessages,    getSessionStatus,    startNewSession  } = useChat();  const {    isConnected: mcpConnected,    isLoading: mcpLoading,    error: mcpError,    availableTools,    processNaturalLanguage,  } = useMCP();    // Agent execution and mutations  const { agents, activeAgentId, setActiveAgent, executeAgentTool } = useAgentStore();  const createInstruction = useMutation(api.instructions.createInstructionFile);  const ensureInstructionsProject = useMutation(api.instructions.ensureInstructionsProject);  const upsertPost = useMutation(api.twitter.upsertPost);  const { instructionContext } = useInstructionContext();  const { instructions, isLoading: instructionsLoading } = useInstructions();  const isLoading = chatLoading || mcpLoading || instructionsLoading;  // Auto-scroll to bottom when new messages arrive  useEffect(() => {    if (scrollRef.current) {      scrollRef.current.scrollTop = scrollRef.current.scrollHeight;    }  }, [messages]);  // Initialize user session when component mounts and user is loaded  useEffect(() => {    if (isLoaded && user && !sessionId) {      console.log(\"üîÑ Initializing user session...\", { userId: user.id });      initializeUserSession(user.id);    }  }, [user, isLoaded, sessionId, initializeUserSession]);  // Sync session ID if active session changes  useEffect(() => {    if (activeSessionId && activeSessionId !== sessionId) {      console.log(\"üîÑ Syncing to active session:\", activeSessionId);      setSessionId(activeSessionId);    }  }, [activeSessionId, sessionId, setSessionId]);  // Helper function to strip markdown formatting  const stripMarkdown = (text: string): string => {    return text      .replace(/#{1,6}\\s*/g, '') // Remove headers      .replace(/\\*\\*(.*?)\\*\\*/g, '$1') // Remove **bold**      .replace(/\\*(.*?)\\*/g, '$1') // Remove *italic*      .replace(/`([^`]+)`/g, '$1') // Remove `code`      .replace(/^\\s*[-*+]\\s+/gm, '‚Ä¢ ') // Convert markdown lists to bullet points      .replace(/^\\s*\\d+\\.\\s+/gm, '‚Ä¢ ') // Convert numbered lists to bullet points      .replace(/\\n\\s*\\n\\s*\\n/g, '\\n\\n') // Reduce multiple blank lines to double      .split('\\n') // Split into lines for processing      .map(line => {        // Add spacing after section headers (lines that don't start with bullet points)        if (line.trim() && !line.startsWith('‚Ä¢') && !line.startsWith(' ') && line.length > 0) {          return line + '\\n'; // Add extra newline after headers        }        return line;      })      .join('\\n')      .replace(/\\n{3,}/g, '\\n\\n') // Clean up excessive newlines      .trim();  };  // Helper function to detect MCP-related queries (excluding direct tool commands)  const isMCPQuery = (text: string): boolean => {    // Don't treat direct tool commands as NLP queries    if (text.startsWith('/')) return false;        // Look for keywords that suggest MCP analysis would be helpful    const mcpKeywords = [      'analyze', 'examine', 'review', 'explain', 'understand', 'architecture',      'structure', 'code', 'component', 'function', 'implementation', 'pattern',      'best practice', 'issue', 'bug', 'error', 'performance', 'optimization',      'refactor', 'improvement', 'documentation', 'overview', 'summary',      'how does', 'what is', 'why is', 'where is', 'when is', 'which'    ];        const lowerText = text.toLowerCase();    return mcpKeywords.some(keyword => lowerText.includes(keyword));  };  const handleToolSelectorClose = () => {    setMessage(\"\");    inputRef.current?.focus();  };  const handleSubmit = async (e: React.FormEvent) => {    e.preventDefault();        // Check session limit before processing    if (!canAddMessages()) {      console.warn(\"Cannot send message: Session limit reached\");      // Add a terminal feedback message about the limit      await storeChatMessage({        role: \"terminal\",        content: `[${new Date().toLocaleTimeString('en-US', {           hour12: false,           hour: '2-digit',           minute: '2-digit',           second: '2-digit'         })}] üö® Message not sent: Session limit reached (500 messages)Please start a new session to continue chatting.`,        sessionId,      });      return;    }        if (message.trim() && !isLoading) {      const messageContent = message.trim();      setMessage(\"\");            // Check if this looks like a natural language MCP query      if (mcpConnected && isMCPQuery(messageContent)) {        try {          const mcpResponse = await processNaturalLanguage(messageContent);                    if (mcpResponse.success && mcpResponse.content && mcpResponse.content.length > 0) {            // Extract the actual text content from the MCP response            const textContent = mcpResponse.content[0].text;                        // Strip markdown formatting and convert to plain text            const plainText = stripMarkdown(textContent);                        // Send the MCP response with clean text content            await sendMessage(`ü§ñ MCP Analysis:\\n\\n${plainText}`);          } else {            await sendMessage(messageContent);          }        } catch (error) {          console.error('MCP Error:', error);          // Fall back to regular chat          await sendMessage(messageContent);        }      } else {        // Regular chat message - add instruction context if available        let contextualMessage = messageContent;        if (instructionContext) {          contextualMessage = `${instructionContext}\\n\\n---\\n\\n${messageContent}`;        }                // Use the useChat hook which will call the sendChatMessage action        await sendMessage(contextualMessage, messageContent);      }    }  };  const handleKeyDown = (e: React.KeyboardEvent) => {    if (e.key === 'Enter' && !e.shiftKey) {      e.preventDefault();      handleSubmit(e);    }  };  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {    const value = e.target.value;    setMessage(value);  };  return (    <div       ref={scrollRef}       className=\"flex-1 overflow-y-auto bg-[#0e0e0e] p-2 min-h-0 scrollbar-hidden\"    >      <div className=\"font-mono text-xs space-y-2 min-h-full\">        {/* Terminal Welcome Text */}        <div className=\"text-[#cccccc] space-y-1 mb-4\">          <div>EAC Financial Dashboard - AI Assistant</div>          <div className=\"text-[#4ec9b0]\">‚ñ≤ Next.js 15.0.0 + Convex Backend</div>          <div>- Anthropic Claude 3.5 Sonnet Integration</div>          <div className={`text-xs ${mcpConnected ? 'text-[#4ec9b0]' : 'text-[#f48771]'}`}>            üîå MCP Server: {mcpConnected ? 'Connected' : 'Disconnected'}            {mcpConnected && ` (${availableTools.length} tools)`}          </div>          <div className={`text-xs ${activeAgentId ? 'text-[#4ec9b0]' : 'text-[#858585]'}`}>            ü§ñ Agents: {activeAgentId ? `Active (${agents.find(a => a.id === activeAgentId)?.name})` : 'None selected'}            {activeAgentId && ` (${agents.find(a => a.id === activeAgentId)?.tools.length || 0} tools)`}          </div>          {mcpError && (            <div className=\"text-[#f48771] text-xs\">MCP Error: {mcpError}</div>          )}          <div className=\"text-[#858585] mt-2\">AI Assistant ready for EAC project questions.</div>          <div className=\"text-[#858585] text-xs\">Session: {sessionId.slice(-8)}</div>                    {/* Session Status and Limits */}          <div className=\"text-[#858585] text-xs\">            Messages: {messageCount}/500            {isNearSessionLimit && (              <span className=\"text-[#f48771] ml-2\">‚ö†Ô∏è Approaching limit</span>            )}            {isAtSessionLimit && (              <span className=\"text-[#f48771] ml-2\">üö® Session full</span>            )}          </div>        </div>        {/* Messages */}        {messages.map((msg, index) => (          <div key={index} className=\"space-y-1\">            {msg.role === 'user' && (              <div className=\"text-[#007acc]\">                <span className=\"text-[#007acc]\">$ user:</span>                <span className=\"ml-1 text-[#cccccc]\">{msg.content}</span>              </div>            )}            {msg.role === 'assistant' && (              <div className=\"text-[#4ec9b0]\">                <span className=\"text-[#4ec9b0]\">ü§ñ assistant:</span>                <div className=\"ml-1 text-[#cccccc] whitespace-pre-wrap\">{msg.content}</div>              </div>            )}            {msg.role === 'terminal' && (              <div className=\"text-[#858585]\">                <div className=\"text-[#585858] whitespace-pre-wrap bg-[#1a1a1a] p-1 rounded text-[10px] border-l-2 border-[#333]\">                  {msg.content}                </div>              </div>            )}          </div>        ))}        {/* Loading indicator */}        {isLoading && (          <div className=\"text-[#4ec9b0]\">            <span className=\"text-[#4ec9b0]\">ü§ñ assistant:</span>            <span className=\"ml-1 text-[#858585]\">thinking...</span>          </div>        )}        {/* Input area */}        <div className=\"sticky bottom-0 bg-[#0e0e0e] pt-2\">          <div className=\"flex items-center\">            <span className=\"text-[#007acc]\">$ user:</span>            <form onSubmit={handleSubmit} className=\"flex-1 ml-1\">              <input                ref={inputRef}                type=\"text\"                value={message}                onChange={handleInputChange}                onKeyDown={handleKeyDown}                placeholder={                  isAtSessionLimit                     ? \"Session limit reached - Start new session to continue...\"                     : isLoading                       ? \"AI is thinking...\"                       : \"Ask about your EAC project...\"                }                disabled={isLoading || isAtSessionLimit}                className={`w-full bg-transparent border-none outline-none placeholder:text-[#858585] disabled:opacity-50 disabled:cursor-not-allowed caret-[#cccccc] ${                  isAtSessionLimit ? 'text-[#f48771]' : 'text-[#cccccc]'                }`}              />            </form>          </div>        </div>      </div>    </div>  );}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./app/_components/terminal/_components/chatMessages.tsx\n"));

/***/ })

});