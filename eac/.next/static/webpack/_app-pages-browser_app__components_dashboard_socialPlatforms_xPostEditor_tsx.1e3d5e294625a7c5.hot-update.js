"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("_app-pages-browser_app__components_dashboard_socialPlatforms_xPostEditor_tsx",{

/***/ "(app-pages-browser)/./lib/hooks/useXApi.ts":
/*!******************************!*\
  !*** ./lib/hooks/useXApi.ts ***!
  \******************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   useXApi: () => (/* binding */ useXApi)\n/* harmony export */ });\n/* harmony import */ var _convex_generated_api__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @/convex/_generated/api */ \"(app-pages-browser)/./convex/_generated/api.js\");\n/* harmony import */ var convex_react__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! convex/react */ \"(app-pages-browser)/../node_modules/convex/dist/esm/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(app-pages-browser)/../node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n/* harmony import */ var _useSocialConnectionSync__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./useSocialConnectionSync */ \"(app-pages-browser)/./lib/hooks/useSocialConnectionSync.ts\");\n// X API Integration Hook - Uses Real Convex Social Connections\n// /Users/matthewsimon/Projects/eac/eac/lib/hooks/useXApi.ts\n\n\n\n\nfunction useXApi() {\n    var _twitterConnection_twitterAccessToken;\n    const [isPosting, setIsPosting] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    const [isScheduling, setIsScheduling] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    const [isUploading, setIsUploading] = (0,react__WEBPACK_IMPORTED_MODULE_2__.useState)(false);\n    // Use centralized social connection sync\n    const { twitterConnection, isLoading: connectionsLoading } = (0,_useSocialConnectionSync__WEBPACK_IMPORTED_MODULE_3__.useSocialConnectionSync)();\n    // Debug what we received from useSocialConnectionSync\n    console.log('🔍 useXApi received from useSocialConnectionSync:', {\n        twitterConnection: twitterConnection ? 'FOUND' : 'NULL',\n        connectionsLoading,\n        twitterConnectionId: twitterConnection === null || twitterConnection === void 0 ? void 0 : twitterConnection._id,\n        twitterConnectionPlatform: twitterConnection === null || twitterConnection === void 0 ? void 0 : twitterConnection.platform,\n        twitterConnectionUsername: twitterConnection === null || twitterConnection === void 0 ? void 0 : twitterConnection.username\n    });\n    // Debug logging with more detail - ALWAYS log to track state changes\n    console.log('🔍 X API Connection Debug (useXApi hook):', {\n        hasConnection: !!twitterConnection,\n        connectionsLoading,\n        twitterConnectionExists: twitterConnection !== null,\n        twitterConnectionUndefined: twitterConnection === undefined,\n        connectionDetails: twitterConnection ? {\n            id: twitterConnection._id,\n            platform: twitterConnection.platform,\n            username: twitterConnection.username,\n            twitterScreenName: twitterConnection.twitterScreenName,\n            hasAccessToken: !!twitterConnection.twitterAccessToken,\n            accessTokenActual: twitterConnection.twitterAccessToken ? 'HAS TOKEN' : 'NO TOKEN',\n            isActive: twitterConnection.isActive,\n            tokenLength: ((_twitterConnection_twitterAccessToken = twitterConnection.twitterAccessToken) === null || _twitterConnection_twitterAccessToken === void 0 ? void 0 : _twitterConnection_twitterAccessToken.length) || 0,\n            createdAt: new Date(twitterConnection.createdAt).toLocaleString(),\n            updatedAt: new Date(twitterConnection.updatedAt).toLocaleString()\n        } : 'NO_CONNECTION_FOUND - twitterConnection is null/undefined'\n    });\n    // Convex actions for X API\n    const createTweetAction = (0,convex_react__WEBPACK_IMPORTED_MODULE_1__.useAction)(_convex_generated_api__WEBPACK_IMPORTED_MODULE_0__.api.xApiActions.createTweet);\n    const uploadMediaAction = (0,convex_react__WEBPACK_IMPORTED_MODULE_1__.useAction)(_convex_generated_api__WEBPACK_IMPORTED_MODULE_0__.api.xApiActions.uploadMedia);\n    const deleteConnectionMutation = (0,convex_react__WEBPACK_IMPORTED_MODULE_1__.useMutation)(_convex_generated_api__WEBPACK_IMPORTED_MODULE_0__.api.x.deleteXConnection);\n    const postTweet = async (args)=>{\n        console.log('🐦 PostTweet called with:', {\n            hasConnection: !!twitterConnection,\n            connectionId: twitterConnection === null || twitterConnection === void 0 ? void 0 : twitterConnection._id\n        });\n        if (!twitterConnection) {\n            console.error('❌ No X connection found.');\n            return {\n                success: false,\n                error: 'No active X connection found. Please connect your X account in Settings → Social Connections.'\n            };\n        }\n        if (!twitterConnection.twitterAccessToken) {\n            console.error('❌ X connection found but no access token:', {\n                connectionId: twitterConnection._id,\n                platform: twitterConnection.platform\n            });\n            return {\n                success: false,\n                error: 'X connection found but not properly authenticated. Please reconnect your X account.'\n            };\n        }\n        try {\n            setIsPosting(true);\n            console.log('🐦 Starting tweet creation...');\n            const mediaIds = [];\n            // Upload media files if provided\n            if (args.media_files && args.media_files.length > 0) {\n                setIsUploading(true);\n                for (const file of args.media_files){\n                    try {\n                        // Convert file to base64 for upload\n                        const base64Data = await fileToBase64(file);\n                        const mediaResult = await uploadMediaAction({\n                            connectionId: twitterConnection._id,\n                            mediaData: base64Data,\n                            mediaType: file.type\n                        });\n                        if (mediaResult.success && mediaResult.media_id_string) {\n                            mediaIds.push(mediaResult.media_id_string);\n                        } else {\n                            console.warn('Failed to upload media:', mediaResult.error);\n                        }\n                    } catch (error) {\n                        console.error('Error uploading media file:', error);\n                    }\n                }\n                setIsUploading(false);\n            }\n            // Handle thread posting\n            if (args.is_thread && args.thread_tweets && args.thread_tweets.length > 1) {\n                var _firstTweet_data;\n                // Post first tweet\n                const firstTweet = await createTweetAction({\n                    connectionId: twitterConnection._id,\n                    text: args.thread_tweets[0],\n                    mediaIds: mediaIds.length > 0 ? [\n                        mediaIds[0]\n                    ] : undefined,\n                    replySettings: args.reply_settings\n                });\n                if (!firstTweet.success) {\n                    throw new Error(firstTweet.error || 'Failed to post first tweet');\n                }\n                let previousTweetId = (_firstTweet_data = firstTweet.data) === null || _firstTweet_data === void 0 ? void 0 : _firstTweet_data.id;\n                // Post remaining tweets as replies\n                for(let i = 1; i < args.thread_tweets.length; i++){\n                    var _threadTweet_data;\n                    const threadTweet = await createTweetAction({\n                        connectionId: twitterConnection._id,\n                        text: args.thread_tweets[i],\n                        replyToId: previousTweetId,\n                        mediaIds: mediaIds[i] ? [\n                            mediaIds[i]\n                        ] : undefined,\n                        replySettings: args.reply_settings\n                    });\n                    if (!threadTweet.success) {\n                        console.error(\"Failed to post tweet \".concat(i + 1, \" in thread:\"), threadTweet.error);\n                        break;\n                    }\n                    previousTweetId = (_threadTweet_data = threadTweet.data) === null || _threadTweet_data === void 0 ? void 0 : _threadTweet_data.id;\n                }\n                return {\n                    success: true,\n                    message: \"Thread posted successfully with \".concat(args.thread_tweets.length, \" tweets\"),\n                    data: firstTweet.data\n                };\n            } else {\n                // Single tweet\n                console.log('🐦 Calling createTweetAction with:', {\n                    connectionId: twitterConnection._id,\n                    text: args.text,\n                    textLength: args.text.length,\n                    mediaCount: mediaIds.length,\n                    replySettings: args.reply_settings\n                });\n                // Validate tweet text\n                if (!args.text || args.text.trim().length === 0) {\n                    console.error('❌ Tweet text is empty');\n                    return {\n                        success: false,\n                        error: 'Tweet text cannot be empty'\n                    };\n                }\n                if (args.text.length > 280) {\n                    console.error('❌ Tweet text too long:', args.text.length);\n                    return {\n                        success: false,\n                        error: \"Tweet text is too long (\".concat(args.text.length, \" characters). Maximum is 280 characters.\")\n                    };\n                }\n                const result = await createTweetAction({\n                    connectionId: twitterConnection._id,\n                    text: args.text,\n                    mediaIds: mediaIds.length > 0 ? mediaIds : undefined,\n                    replySettings: args.reply_settings\n                });\n                console.log('🐦 CreateTweetAction result:', result);\n                return {\n                    success: result.success,\n                    message: result.success ? 'Tweet posted successfully!' : result.error || 'Failed to post tweet',\n                    data: result.data,\n                    error: result.error\n                };\n            }\n        } catch (error) {\n            console.error('Error posting tweet:', error);\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Unknown error occurred'\n            };\n        } finally{\n            setIsPosting(false);\n            setIsUploading(false);\n        }\n    };\n    const schedulePost = async (args)=>{\n        if (!twitterConnection) {\n            return {\n                success: false,\n                error: 'No active X connection found. Please connect your X account first.'\n            };\n        }\n        setIsScheduling(true);\n        try {\n            // For now, store scheduled posts in localStorage \n            // In production, you'd want to use Convex mutations to store in a scheduledPosts table\n            const scheduledData = {\n                ...args,\n                connectionId: twitterConnection._id,\n                createdAt: new Date().toISOString(),\n                status: 'scheduled',\n                scheduledId: \"sched_\".concat(Date.now())\n            };\n            // Store in localStorage for demo purposes\n            const existingScheduled = JSON.parse(localStorage.getItem('scheduledPosts') || '[]');\n            existingScheduled.push(scheduledData);\n            localStorage.setItem('scheduledPosts', JSON.stringify(existingScheduled));\n            return {\n                success: true,\n                message: \"Post scheduled for \".concat(new Date(args.scheduledFor).toLocaleString()),\n                data: {\n                    scheduledId: scheduledData.scheduledId,\n                    scheduledFor: args.scheduledFor,\n                    status: 'scheduled'\n                }\n            };\n        } catch (error) {\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Failed to schedule post'\n            };\n        } finally{\n            setIsScheduling(false);\n        }\n    };\n    const uploadMediaFile = async (file)=>{\n        if (!twitterConnection) {\n            throw new Error('No active X connection');\n        }\n        setIsUploading(true);\n        try {\n            const base64Data = await fileToBase64(file);\n            const result = await uploadMediaAction({\n                connectionId: twitterConnection._id,\n                mediaData: base64Data,\n                mediaType: file.type\n            });\n            return result;\n        } finally{\n            setIsUploading(false);\n        }\n    };\n    const disconnectAccount = async ()=>{\n        console.log('🔌 disconnectAccount function called - START');\n        console.log('🔌 twitterConnection check:', !!twitterConnection);\n        if (!twitterConnection) {\n            console.log('❌ No X connection to disconnect');\n            return {\n                success: false,\n                error: 'No X connection found to disconnect'\n            };\n        }\n        try {\n            console.log('🔌 About to call deleteConnectionMutation with:', {\n                connectionId: twitterConnection._id,\n                connectionIdType: typeof twitterConnection._id\n            });\n            const mutationResult = await deleteConnectionMutation({\n                connectionId: twitterConnection._id\n            });\n            console.log('🔌 deleteConnectionMutation completed:', mutationResult);\n            console.log('✅ X account disconnected successfully');\n            return {\n                success: true,\n                message: 'X account disconnected successfully'\n            };\n        } catch (error) {\n            console.error('❌ Failed to disconnect X account:', error);\n            console.error('❌ Error details:', {\n                name: error instanceof Error ? error.name : 'Unknown',\n                message: error instanceof Error ? error.message : String(error),\n                stack: error instanceof Error ? error.stack : 'No stack'\n            });\n            return {\n                success: false,\n                error: error instanceof Error ? error.message : 'Failed to disconnect X account'\n            };\n        }\n    };\n    const returnValues = {\n        postTweet,\n        schedulePost,\n        uploadMediaFile,\n        disconnectAccount,\n        isPosting,\n        isScheduling,\n        isUploading,\n        hasConnection: !!twitterConnection,\n        connectionInfo: twitterConnection ? {\n            username: twitterConnection.twitterScreenName || twitterConnection.username || 'Unknown',\n            userId: twitterConnection.twitterUserId || 'Unknown',\n            connectionId: twitterConnection._id\n        } : null\n    };\n    console.log('🔍 useXApi returning values:', {\n        hasConnection: returnValues.hasConnection,\n        connectionInfo: returnValues.connectionInfo,\n        twitterConnectionNull: twitterConnection === null,\n        twitterConnectionUndefined: twitterConnection === undefined\n    });\n    return returnValues;\n}\n// Helper function to convert File to base64\nfunction fileToBase64(file) {\n    return new Promise((resolve, reject)=>{\n        const reader = new FileReader();\n        reader.readAsDataURL(file);\n        reader.onload = ()=>{\n            if (typeof reader.result === 'string') {\n                // Remove the data:image/jpeg;base64, prefix\n                const base64Data = reader.result.split(',')[1];\n                resolve(base64Data);\n            } else {\n                reject(new Error('Failed to convert file to base64'));\n            }\n        };\n        reader.onerror = (error)=>reject(error);\n    });\n}\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/./lib/hooks/useXApi.ts\n"));

/***/ })

});